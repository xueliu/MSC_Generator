<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://schema.omg.org/spec/UML/2.1/umlL0.xml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="uml" ecore:package="L0" targetNamespace="http://schema.omg.org/spec/UML/2.1/umlL0.xml">
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="../../../plugin/org.eclipse.emf.ecore/model/Ecore.xsd"/>
  <xsd:element ecore:ignore="true" name="Class" type="uml:Class"/>
  <xsd:element ecore:ignore="true" name="Type" type="uml:Type"/>
  <xsd:element ecore:ignore="true" name="NamedElement" type="uml:NamedElement"/>
  <xsd:element ecore:ignore="true" name="Element" type="uml:Element"/>
  <xsd:element ecore:ignore="true" name="Comment" type="uml:Comment"/>
  <xsd:element ecore:ignore="true" name="Package" type="uml:Package"/>
  <xsd:element ecore:ignore="true" name="Property" type="uml:Property"/>
  <xsd:element ecore:ignore="true" name="TypedElement" type="uml:TypedElement"/>
  <xsd:element ecore:ignore="true" name="MultiplicityElement" type="uml:MultiplicityElement"/>
  <xsd:element ecore:ignore="true" name="Operation" type="uml:Operation"/>
  <xsd:element ecore:ignore="true" name="Parameter" type="uml:Parameter"/>
  <xsd:element ecore:ignore="true" name="Enumeration" type="uml:Enumeration"/>
  <xsd:element ecore:ignore="true" name="DataType" type="uml:DataType"/>
  <xsd:element ecore:ignore="true" name="EnumerationLiteral" type="uml:EnumerationLiteral"/>
  <xsd:element ecore:ignore="true" name="PrimitiveType" type="uml:PrimitiveType"/>
  <xsd:complexType name="Class">
    <xsd:annotation>
      <xsd:documentation>A class is a type that has objects as its instances.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Type">
        <xsd:sequence>
          <xsd:element ecore:opposite="class" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes owned by a class. These do not include the inherited attributes. Attributes are represented by instances of Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="class" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by a class. These do not include the inherited operations.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isAbstract" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>True when a class is abstract.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Class" name="superClass">
          <xsd:annotation>
            <xsd:documentation>The immediate superclasses of a class, from which the class inherits.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:opposite="ownedType" ecore:reference="uml:Package" name="package" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the owning package of this classifier, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element represents an element with a name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:unsettable="true" name="name" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedComment" type="uml:Comment">
        <xsd:annotation>
          <xsd:documentation>The Comments owned by this element.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="body" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Specifies a string that is the comment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Element" name="annotatedElement">
          <xsd:annotation>
            <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:instanceClass="java.lang.String" name="String">
    <xsd:annotation>
      <xsd:documentation>A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:complexType name="Package">
    <xsd:annotation>
      <xsd:documentation>A package is a container for types and other packages.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:opposite="nestingPackage" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="nestedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>The set of contained packages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="package" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedType" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>The set of contained types.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="nestedPackage" ecore:reference="uml:Package" name="nestingPackage" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The containing package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:instanceClass="boolean" name="Boolean">
    <xsd:annotation>
      <xsd:documentation>A Boolean type is used for logical expression, consisting of the predefined values true and false.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:complexType ecore:implements="uml:TypedElement" name="Property">
    <xsd:annotation>
      <xsd:documentation>A property is a typed element that represents an attribute of a class.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReadOnly" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If isReadOnly is true, the attribute may not be written to after initialization.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="true" name="default" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>A string that is evaluated to give a default value for the attribute when an object of the owning class is instantiated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isComposite" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDerived" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If isDerived is true, the value of the attribute is derived from information elsewhere.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Property" name="opposite" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Two attributes attr1 and attr2 of two objects o1 and o2 (which may be the same object) may be paired with each other so that o1.attr1 refers to o2 if and only if o2.attr2 refers to o1. In such a case attr1 is the opposite of attr2 and attr2 is the opposite of attr1.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedAttribute" ecore:reference="uml:Class" name="class" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The class that owns the property, and of which the property is an attribute.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:reference="uml:Type" name="type" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isOrdered" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="isUnique" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="false" name="lower" type="uml:Integer">
          <xsd:annotation>
            <xsd:documentation>Specifies the lower bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="false" name="upper" type="uml:UnlimitedNatural">
          <xsd:annotation>
            <xsd:documentation>Specifies the upper bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:instanceClass="int" name="Integer">
    <xsd:annotation>
      <xsd:documentation>An integer is a primitive type representing integer values.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:simpleType ecore:instanceClass="int" name="UnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>An unlimited natural is a primitive type representing unlimited natural values.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:complexType ecore:implements="uml:TypedElement" name="Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:sequence>
          <xsd:element ecore:opposite="operation" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>The parameters to the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Type" name="raisedException">
          <xsd:annotation>
            <xsd:documentation>The exceptions that are declared as possible during an invocation of the operation.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedOperation" ecore:reference="uml:Class" name="class" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The class that owns the operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:TypedElement" name="Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a typed element that represents a parameter of an operation.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:attribute ecore:opposite="ownedParameter" ecore:reference="uml:Operation" name="operation" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The operation that owns the parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration defines a set of literals that can be used as its values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType">
        <xsd:sequence>
          <xsd:element ecore:opposite="enumeration" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedLiteral" type="uml:EnumerationLiteral">
            <xsd:annotation>
              <xsd:documentation>The ordered set of literals for this Enumeration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="DataType">
    <xsd:annotation>
      <xsd:documentation>DataType is an abstract class that acts as a common superclass for different kinds of data types.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Type"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a value of an enumeration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:opposite="ownedLiteral" ecore:reference="uml:Enumeration" name="enumeration" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type is a data type implemented by the underlying infrastructure and made available for modeling.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
