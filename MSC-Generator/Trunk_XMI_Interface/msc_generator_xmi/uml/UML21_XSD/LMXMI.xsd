<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:uml="http://schema.omg.org/spec/UML/2.1/umlLM.xml" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://schema.omg.org/spec/UML/2.1/umlLM.xml">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="../../../plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:simpleType name="VisibilityKind">
    <xsd:annotation>
      <xsd:documentation>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="public">
        <xsd:annotation>
          <xsd:documentation>A public element is visible to all elements that can access the contents of the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="private">
        <xsd:annotation>
          <xsd:documentation>A private element is only visible inside the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="protected">
        <xsd:annotation>
          <xsd:documentation>A protected element is visible to elements that have a generalization relationship to the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="package">
        <xsd:annotation>
          <xsd:documentation>A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParameterDirectionKind">
    <xsd:annotation>
      <xsd:documentation>Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="in">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into the behavioral element by the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="inout">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="out">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed from a behavioral element out to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="return">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed as return values from a behavioral element back to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType abstract="true" name="Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="general" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="general" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Classifier" type="uml:Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="elementImport" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References the ElementImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageImport" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References the PackageImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedRule" type="uml:Constraint"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Namespace" type="uml:Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute name="name" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="visibility" type="uml:VisibilityKind">
          <xsd:annotation>
            <xsd:documentation>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NamedElement" type="uml:NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="ownedComment" type="uml:Comment">
        <xsd:annotation>
          <xsd:documentation>The Comments owned by this element.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Element" type="uml:Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="annotatedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="body" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies a string that is the comment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="annotatedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Comment" type="uml:Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageableElement" type="uml:PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="alias" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ElementImport" type="uml:ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Relationship"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DirectedRelationship" type="uml:DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Relationship" type="uml:Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageImport" type="uml:PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="packagedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the packageable elements that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageMerge" type="uml:PackageMerge">
            <xsd:annotation>
              <xsd:documentation>References the PackageMerges that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Package" type="uml:Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Type" type="uml:Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mergedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="receivingPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="mergedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="receivingPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageMerge" type="uml:PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="constrainedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A condition that must be true when evaluated in order for the constraint to be satisfied.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="context" type="uml:Namespace"/>
        </xsd:choice>
        <xsd:attribute name="constrainedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="context" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Constraint" type="uml:Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValueSpecification" type="uml:ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TypedElement" type="uml:TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="class" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>References the Class that owns the Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningAssociation" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="association" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subsettedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReadOnly" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If isReadOnly is true, the attribute may not be written to after initialization.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="default" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies a String that represents a value to be used when no argument is supplied for the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isComposite" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If isDerived is true, the value of the attribute is derived from information elsewhere.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerivedUnion" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Class that owns the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningAssociation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="association" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="subsettedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Property" type="uml:Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lower" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the lower bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="upper" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the upper bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuralFeature" type="uml:StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Feature" type="uml:Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RedefinableElement" type="uml:RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lower" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the lower bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="upper" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the upper bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MultiplicityElement" type="uml:MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="superClass" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>This gives the superclasses of a class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes (i.e. the properties) owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isAbstract" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>True when a class is abstract.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="superClass" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This gives the superclasses of a class.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Class" type="uml:Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="precondition" type="uml:Constraint"/>
          <xsd:element name="postcondition" type="uml:Constraint"/>
          <xsd:element name="bodyCondition" type="uml:Constraint"/>
          <xsd:element name="class" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>The class that owns the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isQuery" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedOperation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="precondition" type="xsd:string"/>
        <xsd:attribute name="postcondition" type="xsd:string"/>
        <xsd:attribute name="bodyCondition" type="xsd:string"/>
        <xsd:attribute name="class" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The class that owns the operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Operation" type="uml:Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>Specifies the ordered set of formal parameters of this BehavioralFeature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="raisedException" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="raisedException" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehavioralFeature" type="uml:BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement">
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lower" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the lower bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="upper" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the upper bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="default" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies a String that represents a value to be used when no argument is supplied for the Parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="direction" type="uml:ParameterDirectionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether a parameter is being sent into or out of a behavioral element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Parameter" type="uml:Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The Attributes owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataType" type="uml:DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memberEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="navigableOwnedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the association is derived from other model elements such as other associations or constraints.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="memberEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigableOwnedEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Association" type="uml:Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedLiteral" type="uml:EnumerationLiteral">
            <xsd:annotation>
              <xsd:documentation>The ordered set of literals for this Enumeration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Enumeration" type="uml:Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="enumeration" type="uml:Enumeration">
            <xsd:annotation>
              <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="enumeration" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EnumerationLiteral" type="uml:EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PrimitiveType" type="uml:PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The text of the expression, possibly in multiple languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueExpression" type="uml:OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operand" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a sequence of operands.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Expression" type="uml:Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>
