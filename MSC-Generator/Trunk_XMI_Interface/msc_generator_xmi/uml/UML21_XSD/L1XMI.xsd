<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:uml="http://schema.omg.org/spec/UML/2.1/uml.xml" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://schema.omg.org/spec/UML/2.1/uml.xml">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="../../../plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:simpleType name="VisibilityKind">
    <xsd:annotation>
      <xsd:documentation>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="public">
        <xsd:annotation>
          <xsd:documentation>A public element is visible to all elements that can access the contents of the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="private">
        <xsd:annotation>
          <xsd:documentation>A private element is only visible inside the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="protected">
        <xsd:annotation>
          <xsd:documentation>A protected element is visible to elements that have a generalization relationship to the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="package">
        <xsd:annotation>
          <xsd:documentation>A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParameterDirectionKind">
    <xsd:annotation>
      <xsd:documentation>Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="in">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into the behavioral element by the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="inout">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="out">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed from a behavioral element out to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="return">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed as return values from a behavioral element back to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AggregationKind">
    <xsd:annotation>
      <xsd:documentation>AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="none">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property has no aggregation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="shared">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property has a shared aggregation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="composite">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CallConcurrencyKind">
    <xsd:annotation>
      <xsd:documentation>CallConcurrencyKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="sequential">
        <xsd:annotation>
          <xsd:documentation>No concurrency management mechanism is associated with the operation and, therefore, concurrency conflicts may occur. Instances that invoke a behavioral feature need to coordinate so that only one invocation to a target on any behavioral feature occurs at once.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="guarded">
        <xsd:annotation>
          <xsd:documentation>Multiple invocations of a behavioral feature may occur simultaneously to one instance, but only one is allowed to commence. The others are blocked until the performance of the first behavioral feature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocks.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="concurrent">
        <xsd:annotation>
          <xsd:documentation>Multiple invocations of a behavioral feature may occur simultaneously to one instance and all of them may proceed concurrently.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageKind">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="complete">
        <xsd:annotation>
          <xsd:documentation>sendEvent and receiveEvent are present</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="lost">
        <xsd:annotation>
          <xsd:documentation>sendEvent present and receiveEvent absent</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="found">
        <xsd:annotation>
          <xsd:documentation>sendEvent absent and receiveEvent present</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="unknown">
        <xsd:annotation>
          <xsd:documentation>sendEvent and receiveEvent absent (should not appear)</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageSort">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of communication action that was used to generate the message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="synchCall">
        <xsd:annotation>
          <xsd:documentation>The message was generated by a synchronous call to an operation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="asynchCall">
        <xsd:annotation>
          <xsd:documentation>The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous
= false.
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="asynchSignal">
        <xsd:annotation>
          <xsd:documentation>The message was generated by an asynchronous send action.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="createMessage">
        <xsd:annotation>
          <xsd:documentation>The message designating the creation of another lifeline object.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="deleteMessage">
        <xsd:annotation>
          <xsd:documentation>The message designating the termination of another lifeline.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="reply">
        <xsd:annotation>
          <xsd:documentation>The message is a reply message to an operation call.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType abstract="true" name="Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="ownedComment" type="uml:Comment">
        <xsd:annotation>
          <xsd:documentation>The Comments owned by this element.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Element" type="uml:Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="annotatedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="body" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies a string that is the comment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="annotatedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Comment" type="uml:Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Relationship"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DirectedRelationship" type="uml:DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Relationship" type="uml:Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="LiteralSpecification">
    <xsd:annotation>
      <xsd:documentation>A literal specification identifies a literal constant being modeled.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralSpecification" type="uml:LiteralSpecification">
    <xsd:annotation>
      <xsd:documentation>A literal specification identifies a literal constant being modeled.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValueSpecification" type="uml:ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.
A typed element has a type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TypedElement" type="uml:TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.
A typed element has a type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="clientDependency" type="uml:Dependency">
            <xsd:annotation>
              <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="visibility" type="uml:VisibilityKind">
          <xsd:annotation>
            <xsd:documentation>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="clientDependency" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NamedElement" type="uml:NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Dependency">
    <xsd:annotation>
      <xsd:documentation>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="supplier" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="client" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="supplier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="client" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Dependency" type="uml:Dependency">
    <xsd:annotation>
      <xsd:documentation>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageableElement" type="uml:PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="elementImport" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References the ElementImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageImport" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References the PackageImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedRule" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies a set of Constraints owned by this Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Namespace" type="uml:Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="alias" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ElementImport" type="uml:ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageImport" type="uml:PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="packageMerge" type="uml:PackageMerge">
            <xsd:annotation>
              <xsd:documentation>References the PackageMerges that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packagedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the packageable elements that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Package" type="uml:Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mergedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="receivingPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="mergedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="receivingPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageMerge" type="uml:PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Type" type="uml:Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="constrainedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A condition that must be true when evaluated in order for the constraint to be satisfied.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="context" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="constrainedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="context" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Constraint" type="uml:Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralInteger">
    <xsd:annotation>
      <xsd:documentation>A literal integer is a specification of an integer value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Integer value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralInteger" type="uml:LiteralInteger">
    <xsd:annotation>
      <xsd:documentation>A literal integer is a specification of an integer value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralString">
    <xsd:annotation>
      <xsd:documentation>A literal string is a specification of a string value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The specified String value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralString" type="uml:LiteralString">
    <xsd:annotation>
      <xsd:documentation>A literal string is a specification of a string value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralBoolean">
    <xsd:annotation>
      <xsd:documentation>A literal Boolean is a specification of a Boolean value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Boolean value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralBoolean" type="uml:LiteralBoolean">
    <xsd:annotation>
      <xsd:documentation>A literal Boolean is a specification of a Boolean value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralNull">
    <xsd:annotation>
      <xsd:documentation>A literal null specifies the lack of a value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralNull" type="uml:LiteralNull">
    <xsd:annotation>
      <xsd:documentation>A literal null specifies the lack of a value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:attribute name="isStatic" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Feature" type="uml:Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RedefinableElement" type="uml:RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="generalization" type="uml:Generalization">
            <xsd:annotation>
              <xsd:documentation>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the Classifiers that are redefined by this Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="substitution" type="uml:Substitution">
            <xsd:annotation>
              <xsd:documentation>References the substitutions that are owned by this Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedUseCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use cases owned by this classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="useCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>The set of use cases for which this Classifier is the subject.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isAbstract" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Classifiers that are redefined by this Classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="useCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of use cases for which this Classifier is the subject.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Classifier" type="uml:Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Generalization">
    <xsd:annotation>
      <xsd:documentation>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="general" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specific" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the specializing classifier in the Generalization relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isSubstitutable" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="general" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="specific" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the specializing classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Generalization" type="uml:Generalization">
    <xsd:annotation>
      <xsd:documentation>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Substitution">
    <xsd:annotation>
      <xsd:documentation>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="contract" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The contract with which the substituting classifier complies.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="substitutingClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="contract" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The contract with which the substituting classifier complies.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="substitutingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Substitution" type="uml:Substitution">
    <xsd:annotation>
      <xsd:documentation>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Realization">
    <xsd:annotation>
      <xsd:documentation>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Abstraction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Realization" type="uml:Realization">
    <xsd:annotation>
      <xsd:documentation>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Abstraction">
    <xsd:annotation>
      <xsd:documentation>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mapping" type="uml:OpaqueExpression">
            <xsd:annotation>
              <xsd:documentation>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Abstraction" type="uml:Abstraction">
    <xsd:annotation>
      <xsd:documentation>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The text of the expression, possibly in multiple languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Specifies the behavior of the opaque expression.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the behavior of the opaque expression.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueExpression" type="uml:OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="clientDependency" type="uml:Dependency">
            <xsd:annotation>
              <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="visibility" type="uml:VisibilityKind">
          <xsd:annotation>
            <xsd:documentation>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="clientDependency" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="direction" type="uml:ParameterDirectionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether a parameter is being sent into or out of a behavioral element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Parameter" type="uml:Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MultiplicityElement" type="uml:MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interface" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>The Interface that owns this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="class" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>The class that owns the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="precondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints on the state of the system when the Operation is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="postcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying the state of the system when the Operation is completed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="bodyCondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional Constraint on the result values of an invocation of this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isQuery" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interface that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The class that owns the operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="precondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints on the state of the system when the Operation is invoked.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="postcondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints specifying the state of the system when the Operation is completed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedOperation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bodyCondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional Constraint on the result values of an invocation of this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Operation" type="uml:Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>Specifies the ordered set of formal parameters of this BehavioralFeature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="method" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="raisedException" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.
The signals that the behavioral feature raises as exceptions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isStatic" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isAbstract" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="concurrency" type="uml:CallConcurrencyKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="method" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="raisedException" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.
The signals that the behavioral feature raises as exceptions.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehavioralFeature" type="uml:BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Behavior">
    <xsd:annotation>
      <xsd:documentation>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="redefinedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="precondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="postcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:BehavioralFeature">
            <xsd:annotation>
              <xsd:documentation>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReentrant" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedBehavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="specification" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Behavior" type="uml:Behavior">
    <xsd:annotation>
      <xsd:documentation>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes (i.e. the properties) owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects of this class are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isActive" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Class" type="uml:Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BehavioredClassifier">
    <xsd:annotation>
      <xsd:documentation>A behaviored classifier may have an interface realization.
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References behavior specifications owned by a classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="classifierBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interfaceRealization" type="uml:InterfaceRealization">
            <xsd:annotation>
              <xsd:documentation>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>References Trigger descriptions owned by a Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifierBehavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehavioredClassifier" type="uml:BehavioredClassifier">
    <xsd:annotation>
      <xsd:documentation>A behaviored classifier may have an interface realization.
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterfaceRealization">
    <xsd:annotation>
      <xsd:documentation>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="contract" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>References the Interface specifying the conformance contract.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="implementingClassifier" type="uml:BehavioredClassifier">
            <xsd:annotation>
              <xsd:documentation>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="contract" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Interface specifying the conformance contract.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="implementingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterfaceRealization" type="uml:InterfaceRealization">
    <xsd:annotation>
      <xsd:documentation>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Interface">
    <xsd:annotation>
      <xsd:documentation>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.
Interfaces may include receptions (in addition to operations).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes (i.e. the properties) owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedInterface" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>References all the Interfaces redefined by this Interface.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects providing this interface are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="redefinedInterface" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References all the Interfaces redefined by this Interface.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Interface" type="uml:Interface">
    <xsd:annotation>
      <xsd:documentation>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.
Interfaces may include receptions (in addition to operations).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property represents a set of instances that are owned by a containing classifier instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="class" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>References the Class that owns the Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningAssociation" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="association" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subsettedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If isDerived is true, the value of the attribute is derived from information elsewhere.
Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerivedUnion" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="aggregation" type="uml:AggregationKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the kind of aggregation that applies to the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Class that owns the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningAssociation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="association" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="subsettedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Property" type="uml:Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property represents a set of instances that are owned by a containing classifier instance.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ConnectableElement">
    <xsd:annotation>
      <xsd:documentation>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectableElement" type="uml:ConnectableElement">
    <xsd:annotation>
      <xsd:documentation>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConnectorEnd">
    <xsd:annotation>
      <xsd:documentation>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="role" type="uml:ConnectableElement">
            <xsd:annotation>
              <xsd:documentation>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="role" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectorEnd" type="uml:ConnectorEnd">
    <xsd:annotation>
      <xsd:documentation>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isReadOnly" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>States whether the feature's value may be modified by a client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuralFeature" type="uml:StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memberEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="navigableOwnedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the association is derived from other model elements such as other associations or constraints.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="memberEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigableOwnedEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Association" type="uml:Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The Attributes owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataType" type="uml:DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Reception">
    <xsd:annotation>
      <xsd:documentation>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal that this reception handles.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal that this reception handles.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Reception" type="uml:Reception">
    <xsd:annotation>
      <xsd:documentation>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Signal">
    <xsd:annotation>
      <xsd:documentation>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes owned by the signal.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Signal" type="uml:Signal">
    <xsd:annotation>
      <xsd:documentation>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Trigger">
    <xsd:annotation>
      <xsd:documentation>A trigger relates an event to a behavior that may affect an instance of the classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="uml:Event">
            <xsd:annotation>
              <xsd:documentation>The event that causes the trigger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The event that causes the trigger.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Trigger" type="uml:Trigger">
    <xsd:annotation>
      <xsd:documentation>A trigger relates an event to a behavior that may affect an instance of the classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Event">
    <xsd:annotation>
      <xsd:documentation>An event is the specification of some occurrence that may potentially trigger effects by an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Event" type="uml:Event">
    <xsd:annotation>
      <xsd:documentation>An event is the specification of some occurrence that may potentially trigger effects by an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UseCase">
    <xsd:annotation>
      <xsd:documentation>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="include" type="uml:Include">
            <xsd:annotation>
              <xsd:documentation>References the Include relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extend" type="uml:Extend">
            <xsd:annotation>
              <xsd:documentation>References the Extend relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extensionPoint" type="uml:ExtensionPoint">
            <xsd:annotation>
              <xsd:documentation>References the ExtensionPoints owned by the use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subject" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="subject" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UseCase" type="uml:UseCase">
    <xsd:annotation>
      <xsd:documentation>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Include">
    <xsd:annotation>
      <xsd:documentation>An include relationship defines that a use case contains the behavior defined in another use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="addition" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that is to be included.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="includingCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case which will include the addition and owns the include relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="addition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that is to be included.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="includingCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case which will include the addition and owns the include relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Include" type="uml:Include">
    <xsd:annotation>
      <xsd:documentation>An include relationship defines that a use case contains the behavior defined in another use case.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Extend">
    <xsd:annotation>
      <xsd:documentation>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="extendedCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that is being extended.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="condition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extensionLocation" type="uml:ExtensionPoint">
            <xsd:annotation>
              <xsd:documentation>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extension" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that represents the extension and owns the extend relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="extendedCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that is being extended.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extensionLocation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extension" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that represents the extension and owns the extend relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Extend" type="uml:Extend">
    <xsd:annotation>
      <xsd:documentation>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExtensionPoint">
    <xsd:annotation>
      <xsd:documentation>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="useCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that owns this extension point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="useCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that owns this extension point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExtensionPoint" type="uml:ExtensionPoint">
    <xsd:annotation>
      <xsd:documentation>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstanceSpecification">
    <xsd:annotation>
      <xsd:documentation>An instance specification is a model element that represents an instance in a modeled system.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="classifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="slot" type="uml:Slot">
            <xsd:annotation>
              <xsd:documentation>A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A specification of how to compute, derive, or construct the instance.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstanceSpecification" type="uml:InstanceSpecification">
    <xsd:annotation>
      <xsd:documentation>An instance specification is a model element that represents an instance in a modeled system.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Slot">
    <xsd:annotation>
      <xsd:documentation>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="definingFeature" type="uml:StructuralFeature">
            <xsd:annotation>
              <xsd:documentation>The structural feature that specifies the values that may be held by the slot.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The value or values corresponding to the defining feature for the owning instance specification.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningInstance" type="uml:InstanceSpecification">
            <xsd:annotation>
              <xsd:documentation>The instance specification that owns this slot.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="definingFeature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The structural feature that specifies the values that may be held by the slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningInstance" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The instance specification that owns this slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Slot" type="uml:Slot">
    <xsd:annotation>
      <xsd:documentation>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedLiteral" type="uml:EnumerationLiteral">
            <xsd:annotation>
              <xsd:documentation>The ordered set of literals for this Enumeration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Enumeration" type="uml:Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InstanceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="enumeration" type="uml:Enumeration">
            <xsd:annotation>
              <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="enumeration" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EnumerationLiteral" type="uml:EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PrimitiveType" type="uml:PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstanceValue">
    <xsd:annotation>
      <xsd:documentation>An instance value is a value specification that identifies an instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="instance" type="uml:InstanceSpecification">
            <xsd:annotation>
              <xsd:documentation>The instance that is the specified value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="instance" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The instance that is the specified value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstanceValue" type="uml:InstanceValue">
    <xsd:annotation>
      <xsd:documentation>An instance value is a value specification that identifies an instance.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralUnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>A literal unlimited natural is a specification of an unlimited natural number.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified UnlimitedNatural value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralUnlimitedNatural" type="uml:LiteralUnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>A literal unlimited natural is a specification of an unlimited natural number.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operand" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a sequence of operands.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="symbol" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The symbol associated with the node in the expression tree.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Expression" type="uml:Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueBehavior">
    <xsd:annotation>
      <xsd:documentation>An behavior with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the behavior in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use in the same order as the body strings.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueBehavior" type="uml:OpaqueBehavior">
    <xsd:annotation>
      <xsd:documentation>An behavior with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FunctionBehavior">
    <xsd:annotation>
      <xsd:documentation>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OpaqueBehavior"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FunctionBehavior" type="uml:FunctionBehavior">
    <xsd:annotation>
      <xsd:documentation>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueAction">
    <xsd:annotation>
      <xsd:documentation>An action with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the action in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use, in the same order as the body strings</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inputValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Provides input to the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="outputValue" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Takes output from the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueAction" type="uml:OpaqueAction">
    <xsd:annotation>
      <xsd:documentation>An action with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Action">
    <xsd:annotation>
      <xsd:documentation>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Action" type="uml:Action">
    <xsd:annotation>
      <xsd:documentation>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityNode">
    <xsd:annotation>
      <xsd:documentation>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="activity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="outgoing" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges that have the node as source.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="incoming" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges that have the node as target.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedNode" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Inherited nodes replaced by this node in a specialization of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="activity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="outgoing" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as source.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="incoming" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as target.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedNode" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Inherited nodes replaced by this node in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityNode" type="uml:ActivityNode">
    <xsd:annotation>
      <xsd:documentation>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Activity">
    <xsd:annotation>
      <xsd:documentation>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="group" type="uml:ActivityGroup">
            <xsd:annotation>
              <xsd:documentation>Top-level groups in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="edge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges expressing flow between nodes of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes coordinated by the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReadOnly" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Activity" type="uml:Activity">
    <xsd:annotation>
      <xsd:documentation>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityGroup">
    <xsd:annotation>
      <xsd:documentation>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="inActivity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="inActivity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityGroup" type="uml:ActivityGroup">
    <xsd:annotation>
      <xsd:documentation>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityEdge">
    <xsd:annotation>
      <xsd:documentation>An activity edge is an abstract class for directed connections between two activity nodes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="activity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="source" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Node from which tokens are taken when they traverse the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="target" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Node to which tokens are put when they traverse the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedEdge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Inherited edges replaced by this edge in a specialization of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="activity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="source" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Node from which tokens are taken when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Node to which tokens are put when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedEdge" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Inherited edges replaced by this edge in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityEdge" type="uml:ActivityEdge">
    <xsd:annotation>
      <xsd:documentation>An activity edge is an abstract class for directed connections between two activity nodes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OutputPin">
    <xsd:annotation>
      <xsd:documentation>An output pin is a pin that holds output values produced by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OutputPin" type="uml:OutputPin">
    <xsd:annotation>
      <xsd:documentation>An output pin is a pin that holds output values produced by an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Pin">
    <xsd:annotation>
      <xsd:documentation>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Pin" type="uml:Pin">
    <xsd:annotation>
      <xsd:documentation>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ObjectNode">
    <xsd:annotation>
      <xsd:documentation>An object node is an abstract activity node that is part of defining object flow in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ObjectNode" type="uml:ObjectNode">
    <xsd:annotation>
      <xsd:documentation>An object node is an abstract activity node that is part of defining object flow in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InputPin">
    <xsd:annotation>
      <xsd:documentation>An input pin is a pin that holds input values to be consumed by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InputPin" type="uml:InputPin">
    <xsd:annotation>
      <xsd:documentation>An input pin is a pin that holds input values to be consumed by an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="InvocationAction">
    <xsd:annotation>
      <xsd:documentation>InvocationAction is an abstract class for the various actions that invoke behavior.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="argument" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specification of the ordered set of argument values that appears during execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InvocationAction" type="uml:InvocationAction">
    <xsd:annotation>
      <xsd:documentation>InvocationAction is an abstract class for the various actions that invoke behavior.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="CallAction">
    <xsd:annotation>
      <xsd:documentation>CallAction is an abstract class for actions that invoke behavior and receive return values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins where the results of performing the invocation are placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isSynchronous" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the call is synchronous and the caller waits for completion of the invoked behavior.
If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallAction" type="uml:CallAction">
    <xsd:annotation>
      <xsd:documentation>CallAction is an abstract class for actions that invoke behavior and receive return values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendSignalAction">
    <xsd:annotation>
      <xsd:documentation>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the signal is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The type of signal transmitted to the target object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The type of signal transmitted to the target object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendSignalAction" type="uml:SendSignalAction">
    <xsd:annotation>
      <xsd:documentation>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallOperationAction">
    <xsd:annotation>
      <xsd:documentation>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation to be invoked by the action execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation to be invoked by the action execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallOperationAction" type="uml:CallOperationAction">
    <xsd:annotation>
      <xsd:documentation>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>The invoked behavior. It must be capable of accepting and returning control.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The invoked behavior. It must be capable of accepting and returning control.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallBehaviorAction" type="uml:CallBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ControlNode">
    <xsd:annotation>
      <xsd:documentation>A control node is an abstract activity node that coordinates flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ControlNode" type="uml:ControlNode">
    <xsd:annotation>
      <xsd:documentation>A control node is an abstract activity node that coordinates flows in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ControlFlow">
    <xsd:annotation>
      <xsd:documentation>A control flow is an edge that starts an activity node after the previous one is finished.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ControlFlow" type="uml:ControlFlow">
    <xsd:annotation>
      <xsd:documentation>A control flow is an edge that starts an activity node after the previous one is finished.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ObjectFlow">
    <xsd:annotation>
      <xsd:documentation>An object flow is an activity edge that can have objects or data passing along it.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ObjectFlow" type="uml:ObjectFlow">
    <xsd:annotation>
      <xsd:documentation>An object flow is an activity edge that can have objects or data passing along it.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InitialNode">
    <xsd:annotation>
      <xsd:documentation>An initial node is a control node at which flow starts when the activity is invoked.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InitialNode" type="uml:InitialNode">
    <xsd:annotation>
      <xsd:documentation>An initial node is a control node at which flow starts when the activity is invoked.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActivityFinalNode">
    <xsd:annotation>
      <xsd:documentation>An activity final node is a final node that stops all flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityFinalNode" type="uml:ActivityFinalNode">
    <xsd:annotation>
      <xsd:documentation>An activity final node is a final node that stops all flows in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActivityParameterNode">
    <xsd:annotation>
      <xsd:documentation>An activity parameter node is an object node for inputs and outputs to activities.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>The parameter the object node will be accepting or providing values for.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="parameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The parameter the object node will be accepting or providing values for.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityParameterNode" type="uml:ActivityParameterNode">
    <xsd:annotation>
      <xsd:documentation>An activity parameter node is an object node for inputs and outputs to activities.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ValuePin">
    <xsd:annotation>
      <xsd:documentation>A value pin is an input pin that provides a value by evaluating a value specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InputPin">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Value that the pin will provide.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValuePin" type="uml:ValuePin">
    <xsd:annotation>
      <xsd:documentation>A value pin is an input pin that provides a value by evaluating a value specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Usage">
    <xsd:annotation>
      <xsd:documentation>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Usage" type="uml:Usage">
    <xsd:annotation>
      <xsd:documentation>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Connector">
    <xsd:annotation>
      <xsd:documentation>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>An optional association that specifies the link corresponding to this connector.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional association that specifies the link corresponding to this connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedConnector" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Connector" type="uml:Connector">
    <xsd:annotation>
      <xsd:documentation>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuredClassifier">
    <xsd:annotation>
      <xsd:documentation>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>References the connectors owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuredClassifier" type="uml:StructuredClassifier">
    <xsd:annotation>
      <xsd:documentation>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Interaction">
    <xsd:annotation>
      <xsd:documentation>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="covered" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingInteraction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lifeline" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>Specifies the participants in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="fragment" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>The ordered set of fragments in the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>The Messages contained in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="action" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>Actions owned by the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="covered" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingInteraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Interaction" type="uml:Interaction">
    <xsd:annotation>
      <xsd:documentation>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="InteractionFragment">
    <xsd:annotation>
      <xsd:documentation>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="covered" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingInteraction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="covered" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingInteraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InteractionFragment" type="uml:InteractionFragment">
    <xsd:annotation>
      <xsd:documentation>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Lifeline">
    <xsd:annotation>
      <xsd:documentation>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="represents" type="uml:ConnectableElement">
            <xsd:annotation>
              <xsd:documentation>References the ConnectableElement within the classifier that contains the enclosing interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interaction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>References the Interaction enclosing this Lifeline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="selector" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="coveredBy" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>References the InteractionFragments in which this Lifeline takes part.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="represents" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the ConnectableElement within the classifier that contains the enclosing interaction.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interaction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Interaction enclosing this Lifeline.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="coveredBy" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the InteractionFragments in which this Lifeline takes part.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Lifeline" type="uml:Lifeline">
    <xsd:annotation>
      <xsd:documentation>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GeneralOrdering">
    <xsd:annotation>
      <xsd:documentation>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="before" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="after" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="before" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="after" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GeneralOrdering" type="uml:GeneralOrdering">
    <xsd:annotation>
      <xsd:documentation>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="toBefore" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="event" type="uml:Event">
            <xsd:annotation>
              <xsd:documentation>References a specification of the occurring event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="toAfter" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="toBefore" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a specification of the occurring event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="toAfter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OccurrenceSpecification" type="uml:OccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Message">
    <xsd:annotation>
      <xsd:documentation>A message defines a particular communication between lifelines of an interaction.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="receiveEvent" type="uml:MessageEnd">
            <xsd:annotation>
              <xsd:documentation>References the Receiving of the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="sendEvent" type="uml:MessageEnd">
            <xsd:annotation>
              <xsd:documentation>References the Sending of the Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="connector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>The Connector on which this Message is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="argument" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The arguments of the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interaction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The enclosing Interaction owning the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="messageSort" type="uml:MessageSort" use="required">
          <xsd:annotation>
            <xsd:documentation>The sort of communication reflected by the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="receiveEvent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Receiving of the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sendEvent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Sending of the Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="connector" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Connector on which this Message is sent.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interaction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The enclosing Interaction owning the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Message" type="uml:Message">
    <xsd:annotation>
      <xsd:documentation>A message defines a particular communication between lifelines of an interaction.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MessageEnd">
    <xsd:annotation>
      <xsd:documentation>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>References a Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="message" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageEnd" type="uml:MessageEnd">
    <xsd:annotation>
      <xsd:documentation>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="start" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>References the OccurrenceSpecification that designates the start of the Action or Behavior</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="finish" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="start" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the start of the Action or Behavior</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="finish" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionSpecification" type="uml:ExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StateInvariant">
    <xsd:annotation>
      <xsd:documentation>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="invariant" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>A Constraint that should hold at runtime for this StateInvariant</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StateInvariant" type="uml:StateInvariant">
    <xsd:annotation>
      <xsd:documentation>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActionExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An action execution specification is a kind of execution specification representing the execution of an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="action" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>Action whose execution is occurring.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="action" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Action whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActionExecutionSpecification" type="uml:ActionExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An action execution specification is a kind of execution specification representing the execution of an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="BehaviorExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Behavior whose execution is occurring.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Behavior whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehaviorExecutionSpecification" type="uml:BehaviorExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExecutionEvent">
    <xsd:annotation>
      <xsd:documentation>An execution event models the start or finish of an execution occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionEvent" type="uml:ExecutionEvent">
    <xsd:annotation>
      <xsd:documentation>An execution event models the start or finish of an execution occurrence.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CreationEvent">
    <xsd:annotation>
      <xsd:documentation>A creation event models the creation of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CreationEvent" type="uml:CreationEvent">
    <xsd:annotation>
      <xsd:documentation>A creation event models the creation of an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DestructionEvent">
    <xsd:annotation>
      <xsd:documentation>A destruction event models the destruction of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DestructionEvent" type="uml:DestructionEvent">
    <xsd:annotation>
      <xsd:documentation>A destruction event models the destruction of an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A send operation event models the invocation of an operation call.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendOperationEvent" type="uml:SendOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A send operation event models the invocation of an operation call.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MessageEvent">
    <xsd:annotation>
      <xsd:documentation>A message event specifies the receipt by an object of either a call or a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageEvent" type="uml:MessageEvent">
    <xsd:annotation>
      <xsd:documentation>A message event specifies the receipt by an object of either a call or a signal.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A send signal event models the sending of a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendSignalEvent" type="uml:SendSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A send signal event models the sending of a signal.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="MessageOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>References a Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="message" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageOccurrenceSpecification" type="uml:MessageOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExecutionOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="execution" type="uml:ExecutionSpecification">
            <xsd:annotation>
              <xsd:documentation>References the execution specification describing the execution that is started or finished at this execution event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="execution" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the execution specification describing the execution that is started or finished at this execution event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionOccurrenceSpecification" type="uml:ExecutionOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReceiveOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReceiveOperationEvent" type="uml:ReceiveOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReceiveSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A receive signal event specifies the event of receiving a signal by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReceiveSignalEvent" type="uml:ReceiveSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A receive signal event specifies the event of receiving a signal by the target entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Actor">
    <xsd:annotation>
      <xsd:documentation>An actor specifies a role played by a user or any other system that interacts with the subject.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Actor" type="uml:Actor">
    <xsd:annotation>
      <xsd:documentation>An actor specifies a role played by a user or any other system that interacts with the subject.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallEvent">
    <xsd:annotation>
      <xsd:documentation>A call event models the receipt by an object of a message invoking a call of an operation.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>Designates the operation whose invocation raised the call event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the operation whose invocation raised the call event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallEvent" type="uml:CallEvent">
    <xsd:annotation>
      <xsd:documentation>A call event models the receipt by an object of a message invoking a call of an operation.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ChangeEvent">
    <xsd:annotation>
      <xsd:documentation>A change event models a change in the system configuration that makes a condition true.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="changeExpression" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ChangeEvent" type="uml:ChangeEvent">
    <xsd:annotation>
      <xsd:documentation>A change event models a change in the system configuration that makes a condition true.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SignalEvent">
    <xsd:annotation>
      <xsd:documentation>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The specific signal that is associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The specific signal that is associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SignalEvent" type="uml:SignalEvent">
    <xsd:annotation>
      <xsd:documentation>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeEvent">
    <xsd:annotation>
      <xsd:documentation>A time event specifies a point in time. At the specified time, the event occurs.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="when" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies the corresponding time deadline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isRelative" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether it is relative or absolute time.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeEvent" type="uml:TimeEvent">
    <xsd:annotation>
      <xsd:documentation>A time event specifies a point in time. At the specified time, the event occurs.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AnyReceiveEvent">
    <xsd:annotation>
      <xsd:documentation>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AnyReceiveEvent" type="uml:AnyReceiveEvent">
    <xsd:annotation>
      <xsd:documentation>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>
