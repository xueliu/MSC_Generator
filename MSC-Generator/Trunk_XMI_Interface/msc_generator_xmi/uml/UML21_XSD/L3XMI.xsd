<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:uml="http://schema.omg.org/spec/UML/2.1/uml.xml" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://schema.omg.org/spec/UML/2.1/uml.xml">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="../../../plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:simpleType name="VisibilityKind">
    <xsd:annotation>
      <xsd:documentation>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="public">
        <xsd:annotation>
          <xsd:documentation>A public element is visible to all elements that can access the contents of the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="private">
        <xsd:annotation>
          <xsd:documentation>A private element is only visible inside the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="protected">
        <xsd:annotation>
          <xsd:documentation>A protected element is visible to elements that have a generalization relationship to the namespace that owns it.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="package">
        <xsd:annotation>
          <xsd:documentation>A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CallConcurrencyKind">
    <xsd:annotation>
      <xsd:documentation>CallConcurrencyKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="sequential">
        <xsd:annotation>
          <xsd:documentation>No concurrency management mechanism is associated with the operation and, therefore, concurrency conflicts may occur. Instances that invoke a behavioral feature need to coordinate so that only one invocation to a target on any behavioral feature occurs at once.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="guarded">
        <xsd:annotation>
          <xsd:documentation>Multiple invocations of a behavioral feature may occur simultaneously to one instance, but only one is allowed to commence. The others are blocked until the performance of the first behavioral feature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocks.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="concurrent">
        <xsd:annotation>
          <xsd:documentation>Multiple invocations of a behavioral feature may occur simultaneously to one instance and all of them may proceed concurrently.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="TransitionKind">
    <xsd:annotation>
      <xsd:documentation>TransitionKind is an enumeration type.
kind=#local implies owner.source.isComposite
kind=#external implies owner.source.isComposite</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="internal">
        <xsd:annotation>
          <xsd:documentation>Implies that the transition, if triggered, occurs without exiting or entering the source state. Thus, it does not cause a state change. This means that the entry or exit condition of the source state will not be invoked. An internal transition can be taken even if the state machine is in one or more regions nested within this state.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="local">
        <xsd:annotation>
          <xsd:documentation>Implies that the transition, if triggered, will not exit the composite (source) state, but it will apply to any state within the composite state, and these will be exited and entered.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="external">
        <xsd:annotation>
          <xsd:documentation>Implies that the transition, if triggered, will exit the composite (source) state.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="PseudostateKind">
    <xsd:annotation>
      <xsd:documentation>PseudostateKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="initial">
        <xsd:annotation>
          <xsd:documentation>An initial pseudostate represents a default vertex that is the source for a single transition to the default state of a composite state. There can be at most one initial vertex in a region. The outgoing transition from the initial vertex may have a behavior, but not a trigger or guard.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="deepHistory">
        <xsd:annotation>
          <xsd:documentation>DeepHistory represents the most recent active configuration of the composite state that directly contains this pseudostate; e.g. the state configuration that was active when the composite state was last exited. A composite state can have at most one deep history vertex. At most one transition may originate from the history connector to the default deep history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a deep history are performed.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="shallowHistory">
        <xsd:annotation>
          <xsd:documentation>ShallowHistory represents the most recent active substate of its containing state (but not the substates of that substate). A composite state can have at most one shallow history vertex. A transition coming into the shallow history vertex is equivalent to a transition coming into the most recent active substate of a state. At most one transition may originate from the history connector to the default shallow history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a shallow history are performed.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="join">
        <xsd:annotation>
          <xsd:documentation>Join vertices serve to merge several transitions emanating from source vertices in different orthogonal regions. The transitions entering a join vertex cannot have guards or triggers.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="fork">
        <xsd:annotation>
          <xsd:documentation>Fork vertices serve to split an incoming transition into two or more transitions terminating on orthogonal target vertices&#13;
(i.e. vertices in different regions of a composite state). The segments outgoing from a fork vertex must not have guards or triggers.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="junction">
        <xsd:annotation>
          <xsd:documentation>Junction vertices are semantic-free vertices that are used to chain together multiple transitions. They are used to construct compound transition paths between states. For example, a junction can be used to converge multiple incoming transitions into a single outgoing transition representing a shared transition path (this is known as an merge). Conversely, they can be used to split an incoming transition into multiple outgoing transition segments with different guard conditions. This realizes a static conditional branch. (In the latter case, outgoing transitions whose guard conditions evaluate to false are disabled. A predefined guard denoted 'else' may be defined for at most one outgoing transition. This transition is enabled if all the guards labeling the other transitions are false.) Static conditional branches are distinct from dynamic conditional branches that are realized by choice vertices (described below).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="choice">
        <xsd:annotation>
          <xsd:documentation>Choice vertices which, when reached, result in the dynamic evaluation of the guards of the triggers of its outgoing transitions. This realizes a dynamic conditional branch. It allows splitting of transitions into multiple outgoing paths such that the decision on which path to take may be a function of the results of prior actions performed in the same run-tocompletion step. If more than one of the guards evaluates to true, an arbitrary one is selected. If none of the guards evaluates to true, then the model is considered ill-formed. (To avoid this, it is recommended to define one outgoing transition with the predefined else guard for every choice vertex.) Choice vertices should be distinguished from static branch points that are based on junction points (described above).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="entryPoint">
        <xsd:annotation>
          <xsd:documentation>An entry point pseudostate is an entry point of a state machine or composite state. In each region of the state machine or composite state it has a single transition to a vertex within the same region.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="exitPoint">
        <xsd:annotation>
          <xsd:documentation>An exit point pseudostate is an exit point of a state machine or composite state. Entering an exit point within any region of the composite state or state machine referenced by a submachine state implies the exit of this composite state or submachine state and the triggering of the transition that has this exit point as source in the state machine enclosing the submachine or composite state.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="terminate">
        <xsd:annotation>
          <xsd:documentation>Entering a terminate pseudostate implies that the execution of this state machine by means of its context object is terminated. The state machine does not exit any states nor does it perform any exit actions other than those associated with the transition leading to the terminate pseudostate. Entering a terminate pseudostate is equivalent to invoking a DestroyObjectAction.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AggregationKind">
    <xsd:annotation>
      <xsd:documentation>AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="none">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property has no aggregation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="shared">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property has a shared aggregation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="composite">
        <xsd:annotation>
          <xsd:documentation>Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParameterDirectionKind">
    <xsd:annotation>
      <xsd:documentation>Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="in">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into the behavioral element by the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="inout">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="out">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed from a behavioral element out to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="return">
        <xsd:annotation>
          <xsd:documentation>Indicates that parameter values are passed as return values from a behavioral element back to the caller.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParameterEffectKind">
    <xsd:annotation>
      <xsd:documentation>The datatype ParameterEffectKind is an enumeration that indicates the effect of a behavior on values passed in or out of its parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="create">
        <xsd:annotation>
          <xsd:documentation>Indicates that the behavior creates values.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="read">
        <xsd:annotation>
          <xsd:documentation>Indicates that the behavior reads values.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="update">
        <xsd:annotation>
          <xsd:documentation>Indicates that the behavior updates values.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="delete">
        <xsd:annotation>
          <xsd:documentation>Indicates that the behavior deletes values.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ConnectorKind">
    <xsd:annotation>
      <xsd:documentation>ConnectorKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="assembly">
        <xsd:annotation>
          <xsd:documentation>Indicates that the connector is an assembly connector.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="delegation">
        <xsd:annotation>
          <xsd:documentation>Indicates that the connector is a delegation connector.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ObjectNodeOrderingKind">
    <xsd:annotation>
      <xsd:documentation>ObjectNodeOrderingKind is an enumeration indicating queuing order within a node.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="unordered">
        <xsd:annotation>
          <xsd:documentation>Indicates that object node tokens are unordered.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="ordered">
        <xsd:annotation>
          <xsd:documentation>Indicates that object node tokens are ordered.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="LIFO">
        <xsd:annotation>
          <xsd:documentation>Indicates that object node tokens are queued in a last in, first out manner.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="FIFO">
        <xsd:annotation>
          <xsd:documentation>Indicates that object node tokens are queued in a first in, first out manner.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageKind">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="complete">
        <xsd:annotation>
          <xsd:documentation>sendEvent and receiveEvent are present</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="lost">
        <xsd:annotation>
          <xsd:documentation>sendEvent present and receiveEvent absent</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="found">
        <xsd:annotation>
          <xsd:documentation>sendEvent absent and receiveEvent present</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="unknown">
        <xsd:annotation>
          <xsd:documentation>sendEvent and receiveEvent absent (should not appear)</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageSort">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of communication action that was used to generate the message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="synchCall">
        <xsd:annotation>
          <xsd:documentation>The message was generated by a synchronous call to an operation.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="asynchCall">
        <xsd:annotation>
          <xsd:documentation>The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous
= false.
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="asynchSignal">
        <xsd:annotation>
          <xsd:documentation>The message was generated by an asynchronous send action.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="createMessage">
        <xsd:annotation>
          <xsd:documentation>The message designating the creation of another lifeline object.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="deleteMessage">
        <xsd:annotation>
          <xsd:documentation>The message designating the termination of another lifeline.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="reply">
        <xsd:annotation>
          <xsd:documentation>The message is a reply message to an operation call.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="InteractionOperatorKind">
    <xsd:annotation>
      <xsd:documentation>InteractionOperatorKind is an enumeration designating the different kinds of operators of combined fragments. The interaction operand defines the type of operator of a combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="seq">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator seq designates that the CombinedFragment represents a weak sequencing between the behaviors of the operands.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="alt">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator alt designates that the CombinedFragment represents a choice of behavior. At most one of the operands will be chosen. The chosen operand must have an explicit or implicit guard expression that evaluates to true at this point in the interaction. An implicit true guard is implied if the operand has no guard.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="opt">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator opt designates that the CombinedFragment represents a choice of behavior where either the (sole) operand happens or nothing happens. An option is semantically equivalent to an alternative CombinedFragment where there is one operand with non-empty content and the second operand is empty.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="break">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator break designates that the CombinedFragment represents a breaking scenario in the sense that the operand is a scenario that is performed instead of the remainder of the enclosing InteractionFragment. A break operator with a guard is chosen when the guard is true and the rest of the enclosing Interaction Fragment is ignored. When the guard of the break operand is false, the break operand is ignored and the rest of the enclosing InteractionFragment is chosen. The choice between a break operand without a guard and the rest of the enclosing InteractionFragment is done non-deterministically.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="par">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator par designates that the CombinedFragment represents a parallel merge between the behaviors of the operands. The OccurrenceSpecifications of the different operands can be interleaved in any way as long as the ordering imposed by each operand as such is preserved.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="strict">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator strict designates that the CombinedFragment represents a strict sequencing between the behaviors of the operands. The semantics of strict sequencing defines a strict ordering of the operands on the first level within the CombinedFragment with interactionOperator strict. Therefore OccurrenceSpecifications within contained CombinedFragment will not directly be compared with other OccurrenceSpecifications of the enclosing CombinedFragment.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="loop">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator loop designates that the CombinedFragment represents a loop. The loop operand will be repeated a number of times.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="critical">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator critical designates that the CombinedFragment represents a critical region. A critical region means that the traces of the region cannot be interleaved by other OccurrenceSpecifications (on those Lifelines covered by the region). This means that the region is treated atomically by the enclosing fragment when determining the set of valid traces. Even though enclosing CombinedFragments may imply that some OccurrenceSpecifications may interleave into the region, such as e.g. with par-operator, this is prevented by defining a region.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="neg">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator neg designates that the CombinedFragment represents traces that are defined to be invalid.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="assert">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator assert designates that the CombinedFragment represents an assertion. The sequences of the operand of the assertion are the only valid continuations. All other continuations result in an invalid trace.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="ignore">
        <xsd:annotation>
          <xsd:documentation>The interacionOperator ignore designates that there are some message types that are not shown within this combined fragment. These message types can be considered insignificant and are implicitly ignored if they appear in a corresponding execution. Alternatively, one can understand ignore to mean that the message types that are ignored can appear anywhere in the traces.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="consider">
        <xsd:annotation>
          <xsd:documentation>The interactionOperator consider designates which messages should be considered within this combined fragment. This is equivalent to defining every other message to be ignored.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ExpansionKind">
    <xsd:annotation>
      <xsd:documentation>ExpansionKind is an enumeration type used to specify how multiple executions of an expansion region interact.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="parallel">
        <xsd:annotation>
          <xsd:documentation>The executions are independent. They may be executed concurrently.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="iterative">
        <xsd:annotation>
          <xsd:documentation>The executions are dependent and must be executed one at a time, in order of the collection elements.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="stream">
        <xsd:annotation>
          <xsd:documentation>A stream of collection elements flows into a single execution, in order of the collection elements.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="annotatedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="body" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies a string that is the comment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="annotatedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Comment" type="uml:Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="ownedComment" type="uml:Comment">
        <xsd:annotation>
          <xsd:documentation>The Comments owned by this element.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Element" type="uml:Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Relationship"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DirectedRelationship" type="uml:DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Relationship" type="uml:Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="LiteralSpecification">
    <xsd:annotation>
      <xsd:documentation>A literal specification identifies a literal constant being modeled.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralSpecification" type="uml:LiteralSpecification">
    <xsd:annotation>
      <xsd:documentation>A literal specification identifies a literal constant being modeled.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.
ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValueSpecification" type="uml:ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.&#13;
ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.
A typed element has a type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TypedElement" type="uml:TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.
A typed element has a type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.
A named element supports using a string expression to specify its name. This allows names of model elements to involve template parameters. The actual name is evaluated from the string expression only when it is sensible to do so (e.g., when a template is bound).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="clientDependency" type="uml:Dependency">
            <xsd:annotation>
              <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nameExpression" type="uml:StringExpression">
            <xsd:annotation>
              <xsd:documentation>The string expression used to define the name of this named element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="visibility" type="uml:VisibilityKind">
          <xsd:annotation>
            <xsd:documentation>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="clientDependency" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NamedElement" type="uml:NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.
A named element supports using a string expression to specify its name. This allows names of model elements to involve template parameters. The actual name is evaluated from the string expression only when it is sensible to do so (e.g., when a template is bound).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Dependency">
    <xsd:annotation>
      <xsd:documentation>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="supplier" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="client" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="supplier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="client" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Dependency" type="uml:Dependency">
    <xsd:annotation>
      <xsd:documentation>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.
Packageable elements are able to serve as a template parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageableElement" type="uml:PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.
Packageable elements are able to serve as a template parameter.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ParameterableElement">
    <xsd:annotation>
      <xsd:documentation>A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ParameterableElement" type="uml:ParameterableElement">
    <xsd:annotation>
      <xsd:documentation>A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A template parameter exposes a parameterable element as a formal template parameter of a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The template signature that owns this template parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameteredElement" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The element that is owned by this template parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="default" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The element that is the default for this formal template parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedDefault" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The element that is owned by this template parameter for the purpose of providing a default.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="parameteredElement" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The element exposed by this template parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template signature that owns this template parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="default" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element that is the default for this formal template parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="parameteredElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element exposed by this template parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TemplateParameter" type="uml:TemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A template parameter exposes a parameterable element as a formal template parameter of a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TemplateSignature">
    <xsd:annotation>
      <xsd:documentation>A template signature bundles the set of formal template parameters for a templated element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The ordered set of all formal template parameters for this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="template" type="uml:TemplateableElement">
            <xsd:annotation>
              <xsd:documentation>The element that owns this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameters that are owned by this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="parameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The ordered set of all formal template parameters for this template signature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="template" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element that owns this template signature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TemplateSignature" type="uml:TemplateSignature">
    <xsd:annotation>
      <xsd:documentation>A template signature bundles the set of formal template parameters for a templated element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TemplateableElement">
    <xsd:annotation>
      <xsd:documentation>A templateable element is an element that can optionally be defined as a template and bound to other templates.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TemplateableElement" type="uml:TemplateableElement">
    <xsd:annotation>
      <xsd:documentation>A templateable element is an element that can optionally be defined as a template and bound to other templates.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TemplateBinding">
    <xsd:annotation>
      <xsd:documentation>A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The template signature for the template that is the target of the binding.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="parameterSubstitution" type="uml:TemplateParameterSubstitution">
            <xsd:annotation>
              <xsd:documentation>The parameter substitutions owned by this template binding.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="boundElement" type="uml:TemplateableElement">
            <xsd:annotation>
              <xsd:documentation>The element that is bound by this binding.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template signature for the template that is the target of the binding.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="boundElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element that is bound by this binding.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TemplateBinding" type="uml:TemplateBinding">
    <xsd:annotation>
      <xsd:documentation>A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TemplateParameterSubstitution">
    <xsd:annotation>
      <xsd:documentation>A template parameter substitution relates the actual parameter(s) to a formal template parameter as part of a template binding.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="formal" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that is associated with this substitution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="actual" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The elements that are the actual parameters for this substitution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedActual" type="uml:ParameterableElement">
            <xsd:annotation>
              <xsd:documentation>The actual parameters that are owned by this substitution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="formal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that is associated with this substitution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actual" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The elements that are the actual parameters for this substitution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="templateBinding" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TemplateParameterSubstitution" type="uml:TemplateParameterSubstitution">
    <xsd:annotation>
      <xsd:documentation>A template parameter substitution relates the actual parameter(s) to a formal template parameter as part of a template binding.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="elementImport" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References the ElementImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageImport" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References the PackageImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedRule" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies a set of Constraints owned by this Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Namespace" type="uml:Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="alias" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ElementImport" type="uml:ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="importedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="importingNamespace" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="importingNamespace" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageImport" type="uml:PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.
A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageMerge" type="uml:PackageMerge">
            <xsd:annotation>
              <xsd:documentation>References the PackageMerges that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packagedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the packageable elements that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="profileApplication" type="uml:ProfileApplication">
            <xsd:annotation>
              <xsd:documentation>References the ProfileApplications that indicate which profiles have been applied to the Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Package" type="uml:Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.
A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mergedPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="receivingPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="mergedPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="receivingPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PackageMerge" type="uml:PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Type" type="uml:Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProfileApplication">
    <xsd:annotation>
      <xsd:documentation>A profile application is used to show which profiles have been applied to a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="appliedProfile" type="uml:Profile">
            <xsd:annotation>
              <xsd:documentation>References the Profiles that are applied to a Package through this ProfileApplication.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="applyingPackage" type="uml:Package">
            <xsd:annotation>
              <xsd:documentation>The package that owns the profile application.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isStrict" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="appliedProfile" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Profiles that are applied to a Package through this ProfileApplication.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyingPackage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The package that owns the profile application.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProfileApplication" type="uml:ProfileApplication">
    <xsd:annotation>
      <xsd:documentation>A profile application is used to show which profiles have been applied to a package.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Profile">
    <xsd:annotation>
      <xsd:documentation>A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Package">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="metaclassReference" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References a metaclass that may be extended.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="metamodelReference" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References a package containing (directly or indirectly) metaclasses that may be extended.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="metaclassReference" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a metaclass that may be extended.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="metamodelReference" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a package containing (directly or indirectly) metaclasses that may be extended.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Profile" type="uml:Profile">
    <xsd:annotation>
      <xsd:documentation>A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Stereotype">
    <xsd:annotation>
      <xsd:documentation>A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="icon" type="uml:Image">
            <xsd:annotation>
              <xsd:documentation>Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Stereotype" type="uml:Stereotype">
    <xsd:annotation>
      <xsd:documentation>A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.
A class has the capability to have an internal structure and ports.
Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:EncapsulatedClassifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References behavior specifications owned by a classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="classifierBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interfaceRealization" type="uml:InterfaceRealization">
            <xsd:annotation>
              <xsd:documentation>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>References Trigger descriptions owned by a Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects of this class are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifierBehavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isActive" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Class" type="uml:Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.
A class has the capability to have an internal structure and ports.
Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BehavioredClassifier">
    <xsd:annotation>
      <xsd:documentation>A behaviored classifier may have an interface realization.&#13;
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References behavior specifications owned by a classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="classifierBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interfaceRealization" type="uml:InterfaceRealization">
            <xsd:annotation>
              <xsd:documentation>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>References Trigger descriptions owned by a Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifierBehavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehavioredClassifier" type="uml:BehavioredClassifier">
    <xsd:annotation>
      <xsd:documentation>A behaviored classifier may have an interface realization.&#13;
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.
Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalization" type="uml:Generalization">
            <xsd:annotation>
              <xsd:documentation>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="powertypeExtent" type="uml:GeneralizationSet">
            <xsd:annotation>
              <xsd:documentation>Designates the GeneralizationSet of which the associated Classifier is a power type.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the Classifiers that are redefined by this Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="substitution" type="uml:Substitution">
            <xsd:annotation>
              <xsd:documentation>References the substitutions that are owned by this Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="representation" type="uml:CollaborationUse">
            <xsd:annotation>
              <xsd:documentation>References a collaboration use which indicates the collaboration that represents this classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="collaborationUse" type="uml:CollaborationUse">
            <xsd:annotation>
              <xsd:documentation>References the collaboration uses owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedUseCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use cases owned by this classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="useCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>The set of use cases for which this Classifier is the subject.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isAbstract" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="powertypeExtent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the GeneralizationSet of which the associated Classifier is a power type.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Classifiers that are redefined by this Classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="representation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a collaboration use which indicates the collaboration that represents this classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="useCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of use cases for which this Classifier is the subject.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Classifier" type="uml:Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.
Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RedefinableElement" type="uml:RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Generalization">
    <xsd:annotation>
      <xsd:documentation>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.
A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="general" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalizationSet" type="uml:GeneralizationSet">
            <xsd:annotation>
              <xsd:documentation>Designates a set in which instances of Generalization is considered members.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specific" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the specializing classifier in the Generalization relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isSubstitutable" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="general" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="generalizationSet" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates a set in which instances of Generalization is considered members.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="specific" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the specializing classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Generalization" type="uml:Generalization">
    <xsd:annotation>
      <xsd:documentation>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.&#13;
A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GeneralizationSet">
    <xsd:annotation>
      <xsd:documentation>A generalization set is a packageable element whose instances define collections of subsets of generalization relationships.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="powertype" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Designates the Classifier that is defined as the power type for the associated GeneralizationSet.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalization" type="uml:Generalization">
            <xsd:annotation>
              <xsd:documentation>Designates the instances of Generalization which are members of a given GeneralizationSet.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isCovering" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDisjoint" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty. For example, Person could have two Generalization relationships, each with the different specific Classifier: Manager or Staff. This would be disjoint because every instance of Person must either be a Manager or Staff. In contrast, Person could have two Generalization relationships involving two specific (and non-covering) Classifiers: Sales Person and Manager. This GeneralizationSet would not be disjoint because there are instances of Person which can be a Sales Person and a Manager.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="powertype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the Classifier that is defined as the power type for the associated GeneralizationSet.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="generalization" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the instances of Generalization which are members of a given GeneralizationSet.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GeneralizationSet" type="uml:GeneralizationSet">
    <xsd:annotation>
      <xsd:documentation>A generalization set is a packageable element whose instances define collections of subsets of generalization relationships.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:attribute name="isStatic" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Feature" type="uml:Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Substitution">
    <xsd:annotation>
      <xsd:documentation>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="contract" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The contract with which the substituting classifier complies.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="substitutingClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="contract" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The contract with which the substituting classifier complies.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="substitutingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Substitution" type="uml:Substitution">
    <xsd:annotation>
      <xsd:documentation>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Realization">
    <xsd:annotation>
      <xsd:documentation>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Abstraction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Realization" type="uml:Realization">
    <xsd:annotation>
      <xsd:documentation>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Abstraction">
    <xsd:annotation>
      <xsd:documentation>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mapping" type="uml:OpaqueExpression">
            <xsd:annotation>
              <xsd:documentation>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Abstraction" type="uml:Abstraction">
    <xsd:annotation>
      <xsd:documentation>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The text of the expression, possibly in multiple languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Specifies the behavior of the opaque expression.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the behavior of the opaque expression.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueExpression" type="uml:OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.
Parameters are allowed to be treated as connectable elements.
Parameters have support for streaming, exceptions, and parameter sets.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ConnectableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="parameterSet" type="uml:ParameterSet">
            <xsd:annotation>
              <xsd:documentation>The parameter sets containing the parameter. See ParameterSet.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="direction" type="uml:ParameterDirectionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether a parameter is being sent into or out of a behavioral element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isException" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether an output parameter may emit a value to the exclusion of the other outputs.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isStream" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter post values while the behavior is executing.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="effect" type="uml:ParameterEffectKind">
          <xsd:annotation>
            <xsd:documentation>Specifies the effect that the owner of the parameter has on values passed in or out of the parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="parameterSet" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The parameter sets containing the parameter. See ParameterSet.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Parameter" type="uml:Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.
Parameters are allowed to be treated as connectable elements.
Parameters have support for streaming, exceptions, and parameter sets.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MultiplicityElement" type="uml:MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ConnectableElement">
    <xsd:annotation>
      <xsd:documentation>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.
A connectable element may be exposed as a connectable element template parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectableElement" type="uml:ConnectableElement">
    <xsd:annotation>
      <xsd:documentation>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.
A connectable element may be exposed as a connectable element template parameter.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConnectorEnd">
    <xsd:annotation>
      <xsd:documentation>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="partWithPort" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="role" type="uml:ConnectableElement">
            <xsd:annotation>
              <xsd:documentation>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="partWithPort" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="role" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectorEnd" type="uml:ConnectorEnd">
    <xsd:annotation>
      <xsd:documentation>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property represents a set of instances that are owned by a containing classifier instance.
A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.
Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. The range of valid values represented by the property can be controlled by setting the property's type.
Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="deployment" type="uml:Deployment">
            <xsd:annotation>
              <xsd:documentation>The set of Deployments for a DeploymentTarget.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningAssociation" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="association" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subsettedProperty" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="qualifier" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>An optional list of ordered qualifier attributes for the end. If the list is empty, then the Association is not qualified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="associationEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Designates the optional association end that owns a qualifier attribute.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If isDerived is true, the value of the attribute is derived from information elsewhere.
Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDerivedUnion" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="aggregation" type="uml:AggregationKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the kind of aggregation that applies to the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningAssociation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="association" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="subsettedProperty" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="associationEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the optional association end that owns a qualifier attribute.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Property" type="uml:Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property represents a set of instances that are owned by a containing classifier instance.
A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.
Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. The range of valid values represented by the property can be controlled by setting the property's type.
Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DeploymentTarget">
    <xsd:annotation>
      <xsd:documentation>A deployment target is the location for a deployed artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deployment" type="uml:Deployment">
            <xsd:annotation>
              <xsd:documentation>The set of Deployments for a DeploymentTarget.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DeploymentTarget" type="uml:DeploymentTarget">
    <xsd:annotation>
      <xsd:documentation>A deployment target is the location for a deployed artifact.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Deployment">
    <xsd:annotation>
      <xsd:documentation>A deployment is the allocation of an artifact or artifact instance to a deployment target.
A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deployedArtifact" type="uml:DeployedArtifact">
            <xsd:annotation>
              <xsd:documentation>The Artifacts that are deployed onto a Node. This association specializes the supplier association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="configuration" type="uml:DeploymentSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of properties that parameterize the deployment and execution of one or more Artifacts.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="location" type="uml:DeploymentTarget">
            <xsd:annotation>
              <xsd:documentation>The DeployedTarget which is the target of a Deployment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="deployedArtifact" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Artifacts that are deployed onto a Node. This association specializes the supplier association.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="location" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DeployedTarget which is the target of a Deployment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Deployment" type="uml:Deployment">
    <xsd:annotation>
      <xsd:documentation>A deployment is the allocation of an artifact or artifact instance to a deployment target.
A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DeployedArtifact">
    <xsd:annotation>
      <xsd:documentation>A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DeployedArtifact" type="uml:DeployedArtifact">
    <xsd:annotation>
      <xsd:documentation>A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DeploymentSpecification">
    <xsd:annotation>
      <xsd:documentation>A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Artifact">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deployment" type="uml:Deployment">
            <xsd:annotation>
              <xsd:documentation>The deployment with which the DeploymentSpecification is associated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="deploymentLocation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address'.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="executionLocation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The location where a component Artifact executes. This may be a local or remote location.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="deployment" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The deployment with which the DeploymentSpecification is associated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DeploymentSpecification" type="uml:DeploymentSpecification">
    <xsd:annotation>
      <xsd:documentation>A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Artifact">
    <xsd:annotation>
      <xsd:documentation>An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
An artifact is the source of a deployment to a node.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="nestedArtifact" type="uml:Artifact">
            <xsd:annotation>
              <xsd:documentation>The Artifacts that are defined (nested) within the Artifact.
The association is a specialization of the ownedMember association from Namespace to NamedElement.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="manifestation" type="uml:Manifestation">
            <xsd:annotation>
              <xsd:documentation>The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations defined for the Artifact. The association is a specialization of the ownedMember association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes or association ends defined for the Artifact.
The association is a specialization of the ownedMember association.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="fileName" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Artifact" type="uml:Artifact">
    <xsd:annotation>
      <xsd:documentation>An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
An artifact is the source of a deployment to a node.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Manifestation">
    <xsd:annotation>
      <xsd:documentation>A manifestation is the concrete physical rendering of one or more model elements by an artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Abstraction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="utilizedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>The model element that is utilized in the manifestation in an Artifact.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="utilizedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The model element that is utilized in the manifestation in an Artifact.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Manifestation" type="uml:Manifestation">
    <xsd:annotation>
      <xsd:documentation>A manifestation is the concrete physical rendering of one or more model elements by an artifact.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.
Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="class" type="uml:Class">
            <xsd:annotation>
              <xsd:documentation>The class that owns the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="precondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints on the state of the system when the Operation is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="postcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying the state of the system when the Operation is completed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="datatype" type="uml:DataType">
            <xsd:annotation>
              <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="bodyCondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional Constraint on the result values of an invocation of this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interface" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>The Interface that owns this Operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isQuery" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="class" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The class that owns the operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="precondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints on the state of the system when the Operation is invoked.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="postcondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints specifying the state of the system when the Operation is completed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedOperation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="datatype" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bodyCondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional Constraint on the result values of an invocation of this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interface that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Operation" type="uml:Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.
Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.
A behavioral feature owns zero or more parameter sets.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>Specifies the ordered set of formal parameters of this BehavioralFeature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="method" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="raisedException" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.
The signals that the behavioral feature raises as exceptions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameterSet" type="uml:ParameterSet">
            <xsd:annotation>
              <xsd:documentation>The ParameterSets owned by this BehavioralFeature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isStatic" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isAbstract" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="concurrency" type="uml:CallConcurrencyKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="method" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="raisedException" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.
The signals that the behavioral feature raises as exceptions.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehavioralFeature" type="uml:BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.
A behavioral feature owns zero or more parameter sets.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Behavior">
    <xsd:annotation>
      <xsd:documentation>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.
A behavior owns zero or more parameter sets.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="redefinedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="precondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="postcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameterSet" type="uml:ParameterSet">
            <xsd:annotation>
              <xsd:documentation>The ParameterSets owned by this Behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:BehavioralFeature">
            <xsd:annotation>
              <xsd:documentation>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReentrant" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedBehavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="specification" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Behavior" type="uml:Behavior">
    <xsd:annotation>
      <xsd:documentation>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.
A behavior owns zero or more parameter sets.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="constrainedElement" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A condition that must be true when evaluated in order for the constraint to be satisfied.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="context" type="uml:Namespace">
            <xsd:annotation>
              <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="constrainedElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="context" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Constraint" type="uml:Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ParameterSet">
    <xsd:annotation>
      <xsd:documentation>A parameter set is an element that provides alternative sets of inputs or outputs that a behavior may use.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>Parameters in the parameter set.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="condition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Constraint that should be satisfied for the owner of the parameters in an input parameter set to start execution using the values provided for those parameters, or the owner of the parameters in an output parameter set to end execution providing the values for those parameters, if all preconditions and conditions on input parameter sets were satisfied.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="parameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Parameters in the parameter set.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ParameterSet" type="uml:ParameterSet">
    <xsd:annotation>
      <xsd:documentation>A parameter set is an element that provides alternative sets of inputs or outputs that a behavior may use.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The Attributes owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataType" type="uml:DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Interface">
    <xsd:annotation>
      <xsd:documentation>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.
Interfaces may include receptions (in addition to operations).
Since an interface specifies conformance characteristics, it does not own detailed behavior specifications. Instead, interfaces may own a protocol state machine that specifies event sequences and pre/post conditions for the operations and receptions described by the interface.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes (i.e. the properties) owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedInterface" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>References all the Interfaces redefined by this Interface.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects providing this interface are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="protocol" type="uml:ProtocolStateMachine">
            <xsd:annotation>
              <xsd:documentation>References a protocol state machine specifying the legal sequences of the invocation of the behavioral features described in the interface.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="redefinedInterface" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References all the Interfaces redefined by this Interface.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Interface" type="uml:Interface">
    <xsd:annotation>
      <xsd:documentation>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.
Interfaces may include receptions (in addition to operations).
Since an interface specifies conformance characteristics, it does not own detailed behavior specifications. Instead, interfaces may own a protocol state machine that specifies event sequences and pre/post conditions for the operations and receptions described by the interface.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Reception">
    <xsd:annotation>
      <xsd:documentation>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal that this reception handles.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal that this reception handles.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Reception" type="uml:Reception">
    <xsd:annotation>
      <xsd:documentation>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Signal">
    <xsd:annotation>
      <xsd:documentation>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes owned by the signal.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Signal" type="uml:Signal">
    <xsd:annotation>
      <xsd:documentation>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProtocolStateMachine">
    <xsd:annotation>
      <xsd:documentation>A protocol state machine is always defined in the context of a classifier. It specifies which operations of the classifier can be called in which state and under which condition, thus specifying the allowed call sequences on the classifier's operations. A protocol state machine presents the possible and permitted transitions on the instances of its context classifier, together with the operations which carry the transitions. In this manner, an instance lifecycle can be created for a classifier, by specifying the order in which the operations can be activated and the states through which an instance progresses during its existence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StateMachine">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="conformance" type="uml:ProtocolConformance">
            <xsd:annotation>
              <xsd:documentation>Conformance between protocol state machines.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProtocolStateMachine" type="uml:ProtocolStateMachine">
    <xsd:annotation>
      <xsd:documentation>A protocol state machine is always defined in the context of a classifier. It specifies which operations of the classifier can be called in which state and under which condition, thus specifying the allowed call sequences on the classifier's operations. A protocol state machine presents the possible and permitted transitions on the instances of its context classifier, together with the operations which carry the transitions. In this manner, an instance lifecycle can be created for a classifier, by specifying the order in which the operations can be activated and the states through which an instance progresses during its existence.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StateMachine">
    <xsd:annotation>
      <xsd:documentation>State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="region" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The regions owned directly by the state machine.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="submachineState" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="connectionPoint" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extendedStateMachine" type="uml:StateMachine">
            <xsd:annotation>
              <xsd:documentation>The state machines of which this is an extension.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="submachineState" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extendedStateMachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The state machines of which this is an extension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StateMachine" type="uml:StateMachine">
    <xsd:annotation>
      <xsd:documentation>State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Region">
    <xsd:annotation>
      <xsd:documentation>A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="subvertex" type="uml:Vertex">
            <xsd:annotation>
              <xsd:documentation>The set of vertices that are owned by this region.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="transition" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the source state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="state" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extendedRegion" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The region of which this region is an extension.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="stateMachine" type="uml:StateMachine">
            <xsd:annotation>
              <xsd:documentation>The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="state" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extendedRegion" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The region of which this region is an extension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Region" type="uml:Region">
    <xsd:annotation>
      <xsd:documentation>A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Vertex">
    <xsd:annotation>
      <xsd:documentation>A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="outgoing" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>Specifies the transitions departing from this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="incoming" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>Specifies the transitions entering this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="container" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The region that contains this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="outgoing" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions departing from this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="incoming" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions entering this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="container" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The region that contains this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Vertex" type="uml:Vertex">
    <xsd:annotation>
      <xsd:documentation>A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Transition">
    <xsd:annotation>
      <xsd:documentation>A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="container" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>Designates the region that owns this transition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="target" type="uml:Vertex">
            <xsd:annotation>
              <xsd:documentation>Designates the target vertex that is reached when the transition is taken.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedTransition" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>The transition that is redefined by this transition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="guard" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="effect" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Specifies an optional behavior to be performed when the transition fires.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="trigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>Specifies the triggers that may fire the transition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="source" type="uml:Vertex">
            <xsd:annotation>
              <xsd:documentation>Designates the originating vertex (state or pseudostate) of the transition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="kind" type="uml:TransitionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates  the precise type of the transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="container" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the region that owns this transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the target vertex that is reached when the transition is taken.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedTransition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The transition that is redefined by this transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="guard" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="source" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the originating vertex (state or pseudostate) of the transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Transition" type="uml:Transition">
    <xsd:annotation>
      <xsd:documentation>A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Trigger">
    <xsd:annotation>
      <xsd:documentation>A trigger relates an event to a behavior that may affect an instance of the classifier.
A trigger specification may be qualified by the port on which the event occurred.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="uml:Event">
            <xsd:annotation>
              <xsd:documentation>The event that causes the trigger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="port" type="uml:Port">
            <xsd:annotation>
              <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The event that causes the trigger.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="port" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Trigger" type="uml:Trigger">
    <xsd:annotation>
      <xsd:documentation>A trigger relates an event to a behavior that may affect an instance of the classifier.
A trigger specification may be qualified by the port on which the event occurred.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Event">
    <xsd:annotation>
      <xsd:documentation>An event is the specification of some occurrence that may potentially trigger effects by an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Event" type="uml:Event">
    <xsd:annotation>
      <xsd:documentation>An event is the specification of some occurrence that may potentially trigger effects by an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Port">
    <xsd:annotation>
      <xsd:documentation>A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment.
A port has an associated protocol state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Property">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="redefinedPort" type="uml:Port">
            <xsd:annotation>
              <xsd:documentation>A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="protocol" type="uml:ProtocolStateMachine">
            <xsd:annotation>
              <xsd:documentation>References an optional protocol state machine which describes valid interactions at this interaction point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isBehavior" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether requests arriving at this port are sent to the classifier behavior of this classifier. Such ports are referred to as behavior port. Any invocation of a behavioral feature targeted at a behavior port will be handled by the instance of the owning classifier itself, rather than by any instances that this classifier may contain.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isService" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true indicates that this port is used to provide the published functionality of a classifier; if false, this port is used to implement the classifier but is not part of the essential externally-visible functionality of the classifier and can, therefore, be altered or deleted along with the internal implementation of the classifier and other properties that are considered part of its implementation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedPort" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="protocol" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References an optional protocol state machine which describes valid interactions at this interaction point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Port" type="uml:Port">
    <xsd:annotation>
      <xsd:documentation>A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment.
A port has an associated protocol state machine.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="State">
    <xsd:annotation>
      <xsd:documentation>A state models a situation during which some (usually implicit) invariant condition holds.
The states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="outgoing" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>Specifies the transitions departing from this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="incoming" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>Specifies the transitions entering this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="container" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The region that contains this vertex.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="submachine" type="uml:StateMachine">
            <xsd:annotation>
              <xsd:documentation>The state machine that is to be inserted in place of the (submachine) state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="connection" type="uml:ConnectionPointReference">
            <xsd:annotation>
              <xsd:documentation>The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="connectionPoint" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedState" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>The state of which this state is a redefinition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="stateInvariant" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="entry" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="exit" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="doActivity" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="deferrableTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="region" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The regions owned directly by the state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isLeaf" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="outgoing" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions departing from this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="incoming" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions entering this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="container" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The region that contains this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="submachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The state machine that is to be inserted in place of the (submachine) state.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedState" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The state of which this state is a redefinition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="State" type="uml:State">
    <xsd:annotation>
      <xsd:documentation>A state models a situation during which some (usually implicit) invariant condition holds.
The states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConnectionPointReference">
    <xsd:annotation>
      <xsd:documentation>A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Vertex">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entry" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The entryPoint kind pseudo states corresponding to this connection point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="exit" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The exitPoints kind pseudo states corresponding to this connection point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="state" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>The State in which the connection point refreshens are defined.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="entry" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The entryPoint kind pseudo states corresponding to this connection point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exit" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The exitPoints kind pseudo states corresponding to this connection point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="state" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The State in which the connection point refreshens are defined.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectionPointReference" type="uml:ConnectionPointReference">
    <xsd:annotation>
      <xsd:documentation>A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Pseudostate">
    <xsd:annotation>
      <xsd:documentation>A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Vertex">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="stateMachine" type="uml:StateMachine">
            <xsd:annotation>
              <xsd:documentation>The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="state" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>The State that owns this pseudostate and in which it appears.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="kind" type="uml:PseudostateKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="state" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The State that owns this pseudostate and in which it appears.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Pseudostate" type="uml:Pseudostate">
    <xsd:annotation>
      <xsd:documentation>A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProtocolConformance">
    <xsd:annotation>
      <xsd:documentation>Protocol state machines can be redefined into more specific protocol state machines, or into behavioral state machines. Protocol conformance declares that the specific protocol state machine specifies a protocol that conforms to the general state machine one, or that the specific behavioral state machine abide by the protocol of the general protocol state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="generalMachine" type="uml:ProtocolStateMachine">
            <xsd:annotation>
              <xsd:documentation>Specifies the protocol state machine to which the specific state machine conforms.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specificMachine" type="uml:ProtocolStateMachine">
            <xsd:annotation>
              <xsd:documentation>Specifies the state machine which conforms to the general state machine.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="generalMachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the protocol state machine to which the specific state machine conforms.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="specificMachine" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the state machine which conforms to the general state machine.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProtocolConformance" type="uml:ProtocolConformance">
    <xsd:annotation>
      <xsd:documentation>Protocol state machines can be redefined into more specific protocol state machines, or into behavioral state machines. Protocol conformance declares that the specific protocol state machine specifies a protocol that conforms to the general state machine one, or that the specific behavioral state machine abide by the protocol of the general protocol state machine.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OperationTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>An operation template parameter exposes an operation as a formal parameter for a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TemplateParameter"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OperationTemplateParameter" type="uml:OperationTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>An operation template parameter exposes an operation as a formal parameter for a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.&#13;
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isReadOnly" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>States whether the feature's value may be modified by a client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuralFeature" type="uml:StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memberEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="navigableOwnedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the association is derived from other model elements such as other associations or constraints.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="memberEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigableOwnedEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Association" type="uml:Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConnectableElementTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A connectable element template parameter exposes a connectable element as a formal parameter for a template.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TemplateParameter"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConnectableElementTemplateParameter" type="uml:ConnectableElementTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A connectable element template parameter exposes a connectable element as a formal parameter for a template.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CollaborationUse">
    <xsd:annotation>
      <xsd:documentation>A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations.
Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Collaboration">
            <xsd:annotation>
              <xsd:documentation>The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="roleBinding" type="uml:Dependency">
            <xsd:annotation>
              <xsd:documentation>A mapping between features of the collaboration type and features of the classifier or operation. This mapping indicates which connectable element of the classifier or operation plays which role(s) in the collaboration. A connectable element may be bound to multiple roles in the same collaboration use (that is, it may play multiple roles).
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CollaborationUse" type="uml:CollaborationUse">
    <xsd:annotation>
      <xsd:documentation>A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations.
Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Collaboration">
    <xsd:annotation>
      <xsd:documentation>A collaboration use represents the application of the pattern described by a collaboration to a specific situation involving specific classes or instances playing the roles of the collaboration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>References the connectors owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="collaborationRole" type="uml:ConnectableElement">
            <xsd:annotation>
              <xsd:documentation>References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="collaborationRole" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Collaboration" type="uml:Collaboration">
    <xsd:annotation>
      <xsd:documentation>A collaboration use represents the application of the pattern described by a collaboration to a specific situation involving specific classes or instances playing the roles of the collaboration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuredClassifier">
    <xsd:annotation>
      <xsd:documentation>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>References the connectors owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuredClassifier" type="uml:StructuredClassifier">
    <xsd:annotation>
      <xsd:documentation>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Connector">
    <xsd:annotation>
      <xsd:documentation>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.
A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the internal realization of that behavior by the component's parts. It represents the forwarding of signals (operation requests and events): a signal that arrives at a port that has a delegation connector to a part or to another port will be passed on to that target for handling.
An assembly connector is a connector between two components that defines that one component provides the services that another component requires. An assembly connector is a connector that is defined from a required interface or port to a provided interface or port.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>An optional association that specifies the link corresponding to this connector.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="contract" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>The set of Behaviors that specify the valid interaction patterns across the connector.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="kind" type="uml:ConnectorKind">
          <xsd:annotation>
            <xsd:documentation>Indicates the kind of connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An optional association that specifies the link corresponding to this connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedConnector" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="contract" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of Behaviors that specify the valid interaction patterns across the connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Connector" type="uml:Connector">
    <xsd:annotation>
      <xsd:documentation>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.
A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the internal realization of that behavior by the component's parts. It represents the forwarding of signals (operation requests and events): a signal that arrives at a port that has a delegation connector to a part or to another port will be passed on to that target for handling.
An assembly connector is a connector between two components that defines that one component provides the services that another component requires. An assembly connector is a connector that is defined from a required interface or port to a provided interface or port.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UseCase">
    <xsd:annotation>
      <xsd:documentation>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="include" type="uml:Include">
            <xsd:annotation>
              <xsd:documentation>References the Include relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extend" type="uml:Extend">
            <xsd:annotation>
              <xsd:documentation>References the Extend relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extensionPoint" type="uml:ExtensionPoint">
            <xsd:annotation>
              <xsd:documentation>References the ExtensionPoints owned by the use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subject" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="subject" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UseCase" type="uml:UseCase">
    <xsd:annotation>
      <xsd:documentation>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Include">
    <xsd:annotation>
      <xsd:documentation>An include relationship defines that a use case contains the behavior defined in another use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="addition" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that is to be included.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="includingCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case which will include the addition and owns the include relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="addition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that is to be included.&#13;
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="includingCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case which will include the addition and owns the include relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Include" type="uml:Include">
    <xsd:annotation>
      <xsd:documentation>An include relationship defines that a use case contains the behavior defined in another use case.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Extend">
    <xsd:annotation>
      <xsd:documentation>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="extendedCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that is being extended.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="condition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extensionLocation" type="uml:ExtensionPoint">
            <xsd:annotation>
              <xsd:documentation>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extension" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that represents the extension and owns the extend relationship.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="extendedCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that is being extended.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extensionLocation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extension" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that represents the extension and owns the extend relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Extend" type="uml:Extend">
    <xsd:annotation>
      <xsd:documentation>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExtensionPoint">
    <xsd:annotation>
      <xsd:documentation>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="useCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use case that owns this extension point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="useCase" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the use case that owns this extension point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExtensionPoint" type="uml:ExtensionPoint">
    <xsd:annotation>
      <xsd:documentation>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RedefinableTemplateSignature">
    <xsd:annotation>
      <xsd:documentation>A redefinable template signature supports the addition of formal template parameters in a specialization of a template classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The ordered set of all formal template parameters for this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="template" type="uml:TemplateableElement">
            <xsd:annotation>
              <xsd:documentation>The element that owns this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameters that are owned by this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="extendedSignature" type="uml:RedefinableTemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The template signature that is extended by this template signature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="parameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The ordered set of all formal template parameters for this template signature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="template" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The element that owns this template signature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="extendedSignature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template signature that is extended by this template signature.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RedefinableTemplateSignature" type="uml:RedefinableTemplateSignature">
    <xsd:annotation>
      <xsd:documentation>A redefinable template signature supports the addition of formal template parameters in a specialization of a template classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClassifierTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A classifier template parameter exposes a classifier as a formal template parameter.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TemplateParameter">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="defaultClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier that is used by default if no argument is provided during template binding. If this property is empty, then there is no default.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="constrainingClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier that constrains the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted, otherwise it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="allowSubstitutable" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier that is used by default if no argument is provided during template binding. If this property is empty, then there is no default.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constrainingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier that constrains the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted, otherwise it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClassifierTemplateParameter" type="uml:ClassifierTemplateParameter">
    <xsd:annotation>
      <xsd:documentation>A classifier template parameter exposes a classifier as a formal template parameter.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterfaceRealization">
    <xsd:annotation>
      <xsd:documentation>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="contract" type="uml:Interface">
            <xsd:annotation>
              <xsd:documentation>References the Interface specifying the conformance contract.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="implementingClassifier" type="uml:BehavioredClassifier">
            <xsd:annotation>
              <xsd:documentation>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="contract" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Interface specifying the conformance contract.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="implementingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterfaceRealization" type="uml:InterfaceRealization">
    <xsd:annotation>
      <xsd:documentation>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="EncapsulatedClassifier">
    <xsd:annotation>
      <xsd:documentation>A classifier has the ability to own ports as specific and type checked interaction points.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredClassifier"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EncapsulatedClassifier" type="uml:EncapsulatedClassifier">
    <xsd:annotation>
      <xsd:documentation>A classifier has the ability to own ports as specific and type checked interaction points.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Extension">
    <xsd:annotation>
      <xsd:documentation>An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Association"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Extension" type="uml:Extension">
    <xsd:annotation>
      <xsd:documentation>An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExtensionEnd">
    <xsd:annotation>
      <xsd:documentation>An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Property"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExtensionEnd" type="uml:ExtensionEnd">
    <xsd:annotation>
      <xsd:documentation>An extension end is used to tie an extension to a stereotype when extending a metaclass.&#13;
The default multiplicity of an extension end is 0..1.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Image">
    <xsd:annotation>
      <xsd:documentation>Physical definition of a graphical image.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute name="content" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="location" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="format" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This indicates the format of the content - which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP.

In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example "SVG" could instead be expressed as "MIME: image/svg+xml".</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Image" type="uml:Image">
    <xsd:annotation>
      <xsd:documentation>Physical definition of a graphical image.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StringExpression">
    <xsd:annotation>
      <xsd:documentation>An expression that specifies a string value that is derived by concatenating a set of sub string expressions, some of which might be template parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Expression">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateBinding" type="uml:TemplateBinding">
            <xsd:annotation>
              <xsd:documentation>The optional bindings from this element to templates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedTemplateSignature" type="uml:TemplateSignature">
            <xsd:annotation>
              <xsd:documentation>The optional template signature specifying the formal template parameters.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subExpression" type="uml:StringExpression">
            <xsd:annotation>
              <xsd:documentation>The StringExpressions that constitute this StringExpression.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningExpression" type="uml:StringExpression">
            <xsd:annotation>
              <xsd:documentation>The string expression of which this expression is a substring.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="owningExpression" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The string expression of which this expression is a substring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StringExpression" type="uml:StringExpression">
    <xsd:annotation>
      <xsd:documentation>An expression that specifies a string value that is derived by concatenating a set of sub string expressions, some of which might be template parameters.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.&#13;
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operand" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a sequence of operands.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="symbol" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The symbol associated with the node in the expression tree.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Expression" type="uml:Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralInteger">
    <xsd:annotation>
      <xsd:documentation>A literal integer is a specification of an integer value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Integer value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralInteger" type="uml:LiteralInteger">
    <xsd:annotation>
      <xsd:documentation>A literal integer is a specification of an integer value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralString">
    <xsd:annotation>
      <xsd:documentation>A literal string is a specification of a string value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The specified String value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralString" type="uml:LiteralString">
    <xsd:annotation>
      <xsd:documentation>A literal string is a specification of a string value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralBoolean">
    <xsd:annotation>
      <xsd:documentation>A literal Boolean is a specification of a Boolean value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Boolean value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralBoolean" type="uml:LiteralBoolean">
    <xsd:annotation>
      <xsd:documentation>A literal Boolean is a specification of a Boolean value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralNull">
    <xsd:annotation>
      <xsd:documentation>A literal null specifies the lack of a value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralNull" type="uml:LiteralNull">
    <xsd:annotation>
      <xsd:documentation>A literal null specifies the lack of a value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Slot">
    <xsd:annotation>
      <xsd:documentation>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="owningInstance" type="uml:InstanceSpecification">
            <xsd:annotation>
              <xsd:documentation>The instance specification that owns this slot.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="definingFeature" type="uml:StructuralFeature">
            <xsd:annotation>
              <xsd:documentation>The structural feature that specifies the values that may be held by the slot.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The value or values corresponding to the defining feature for the owning instance specification.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="owningInstance" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The instance specification that owns this slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="definingFeature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The structural feature that specifies the values that may be held by the slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Slot" type="uml:Slot">
    <xsd:annotation>
      <xsd:documentation>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstanceSpecification">
    <xsd:annotation>
      <xsd:documentation>An instance specification is a model element that represents an instance in a modeled system.
An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DeploymentTarget">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="templateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="owningTemplateParameter" type="uml:TemplateParameter">
            <xsd:annotation>
              <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="classifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A specification of how to compute, derive, or construct the instance.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="slot" type="uml:Slot">
            <xsd:annotation>
              <xsd:documentation>A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="templateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The template parameter that exposes this element as a formal parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="owningTemplateParameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The formal template parameter that owns this element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="classifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstanceSpecification" type="uml:InstanceSpecification">
    <xsd:annotation>
      <xsd:documentation>An instance specification is a model element that represents an instance in a modeled system.
An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ownedLiteral" type="uml:EnumerationLiteral">
            <xsd:annotation>
              <xsd:documentation>The ordered set of literals for this Enumeration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Enumeration" type="uml:Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InstanceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="enumeration" type="uml:Enumeration">
            <xsd:annotation>
              <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="enumeration" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EnumerationLiteral" type="uml:EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PrimitiveType" type="uml:PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstanceValue">
    <xsd:annotation>
      <xsd:documentation>An instance value is a value specification that identifies an instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="instance" type="uml:InstanceSpecification">
            <xsd:annotation>
              <xsd:documentation>The instance that is the specified value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="instance" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The instance that is the specified value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstanceValue" type="uml:InstanceValue">
    <xsd:annotation>
      <xsd:documentation>An instance value is a value specification that identifies an instance.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LiteralUnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>A literal unlimited natural is a specification of an unlimited natural number.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute name="value" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified UnlimitedNatural value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LiteralUnlimitedNatural" type="uml:LiteralUnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>A literal unlimited natural is a specification of an unlimited natural number.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueBehavior">
    <xsd:annotation>
      <xsd:documentation>An behavior with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the behavior in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use in the same order as the body strings.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueBehavior" type="uml:OpaqueBehavior">
    <xsd:annotation>
      <xsd:documentation>An behavior with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FunctionBehavior">
    <xsd:annotation>
      <xsd:documentation>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OpaqueBehavior"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FunctionBehavior" type="uml:FunctionBehavior">
    <xsd:annotation>
      <xsd:documentation>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpaqueAction">
    <xsd:annotation>
      <xsd:documentation>An action with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="body" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Specifies the action in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="language" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use, in the same order as the body strings</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inputValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Provides input to the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="outputValue" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Takes output from the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OpaqueAction" type="uml:OpaqueAction">
    <xsd:annotation>
      <xsd:documentation>An action with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Action">
    <xsd:annotation>
      <xsd:documentation>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.
An action has pre- and post-conditions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutableNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="localPrecondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Constraint that must be satisfied when execution is started.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="localPostcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Constraint that must be satisfied when executed is completed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Action" type="uml:Action">
    <xsd:annotation>
      <xsd:documentation>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.
An action has pre- and post-conditions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ExecutableNode">
    <xsd:annotation>
      <xsd:documentation>An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="handler" type="uml:ExceptionHandler">
            <xsd:annotation>
              <xsd:documentation>A set of exception handlers that are examined if an uncaught exception propagates to the outer level of the executable node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutableNode" type="uml:ExecutableNode">
    <xsd:annotation>
      <xsd:documentation>An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityNode">
    <xsd:annotation>
      <xsd:documentation>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="inStructuredNode" type="uml:StructuredActivityNode">
            <xsd:annotation>
              <xsd:documentation>Structured activity node containing the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="activity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="outgoing" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges that have the node as source.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="incoming" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges that have the node as target.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inPartition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Partitions containing the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inInterruptibleRegion" type="uml:InterruptibleActivityRegion">
            <xsd:annotation>
              <xsd:documentation>Interruptible regions containing the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedNode" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Inherited nodes replaced by this node in a specialization of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="inStructuredNode" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Structured activity node containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="activity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="outgoing" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as source.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="incoming" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as target.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inPartition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Partitions containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inInterruptibleRegion" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Interruptible regions containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedNode" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Inherited nodes replaced by this node in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityNode" type="uml:ActivityNode">
    <xsd:annotation>
      <xsd:documentation>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StructuredActivityNode">
    <xsd:annotation>
      <xsd:documentation>A structured activity node is an executable activity node that may have an expansion into subordinate nodes as an activity group. The subordinate nodes must belong to only one structured activity node, although they may be nested.
Because of the concurrent nature of the execution of actions within and across activities, it can be difficult to guarantee the consistent access and modification of object memory. In order to avoid race conditions or other concurrency-related problems, it is sometimes necessary to isolate the effects of a group of actions from the effects of actions outside the group. This may be indicated by setting the mustIsolate attribute to true on a structured activity node. If a structured activity node is "isolated," then any object used by an action within the node cannot be accessed by any action outside the node until the structured activity node as a whole completes. Any concurrent actions that would result in accessing such objects are required to have their execution deferred until the completion of the node.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="elementImport" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References the ElementImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="packageImport" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References the PackageImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedRule" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies a set of Constraints owned by this Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inActivity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="variable" type="uml:Variable">
            <xsd:annotation>
              <xsd:documentation>A variable defined in the scope of the structured activity node. It has no value and may not be accessed</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="edge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges immediately contained in the structured node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="inActivity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="mustIsolate" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, then the actions in the node execute in isolation from actions outside the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuredActivityNode" type="uml:StructuredActivityNode">
    <xsd:annotation>
      <xsd:documentation>A structured activity node is an executable activity node that may have an expansion into subordinate nodes as an activity group. The subordinate nodes must belong to only one structured activity node, although they may be nested.
Because of the concurrent nature of the execution of actions within and across activities, it can be difficult to guarantee the consistent access and modification of object memory. In order to avoid race conditions or other concurrency-related problems, it is sometimes necessary to isolate the effects of a group of actions from the effects of actions outside the group. This may be indicated by setting the mustIsolate attribute to true on a structured activity node. If a structured activity node is "isolated," then any object used by an action within the node cannot be accessed by any action outside the node until the structured activity node as a whole completes. Any concurrent actions that would result in accessing such objects are required to have their execution deferred until the completion of the node.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityGroup">
    <xsd:annotation>
      <xsd:documentation>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="inActivity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="inActivity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityGroup" type="uml:ActivityGroup">
    <xsd:annotation>
      <xsd:documentation>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Activity">
    <xsd:annotation>
      <xsd:documentation>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="variable" type="uml:Variable">
            <xsd:annotation>
              <xsd:documentation>Top-level variables in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes coordinated by the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="edge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges expressing flow between nodes of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="partition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Top-level partitions in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="group" type="uml:ActivityGroup">
            <xsd:annotation>
              <xsd:documentation>Top-level groups in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReadOnly" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isSingleExecution" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, all invocations of the activity are handled by the same execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="partition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Top-level partitions in the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Activity" type="uml:Activity">
    <xsd:annotation>
      <xsd:documentation>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Variable">
    <xsd:annotation>
      <xsd:documentation>Variables are elements for passing data between actions indirectly. A local variable stores values shared by the actions within a structured activity group but not accessible outside it. The output of an action may be written to a variable and read for the input to a subsequent action, which is effectively an indirect data flow path. Because there is no predefined relationship between actions that read and write variables, these actions must be sequenced by control flows to prevent race conditions that may occur between actions that read or write the same variable.
A variable is considered a connectable element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ConnectableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="scope" type="uml:StructuredActivityNode">
            <xsd:annotation>
              <xsd:documentation>A structured activity node that owns the variable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="activityScope" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>An activity that owns the variable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scope" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A structured activity node that owns the variable.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="activityScope" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An activity that owns the variable.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Variable" type="uml:Variable">
    <xsd:annotation>
      <xsd:documentation>Variables are elements for passing data between actions indirectly. A local variable stores values shared by the actions within a structured activity group but not accessible outside it. The output of an action may be written to a variable and read for the input to a subsequent action, which is effectively an indirect data flow path. Because there is no predefined relationship between actions that read and write variables, these actions must be sequenced by control flows to prevent race conditions that may occur between actions that read or write the same variable.
A variable is considered a connectable element.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ActivityEdge">
    <xsd:annotation>
      <xsd:documentation>An activity edge is an abstract class for directed connections between two activity nodes.
Activity edges can be contained in interruptible regions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="source" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Node from which tokens are taken when they traverse the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="target" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Node to which tokens are put when they traverse the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="redefinedEdge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Inherited edges replaced by this edge in a specialization of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inPartition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Partitions containing the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="guard" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specification evaluated at runtime to determine if the edge can be traversed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="weight" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Number of tokens consumed from the source node on each traversal.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interrupts" type="uml:InterruptibleActivityRegion">
            <xsd:annotation>
              <xsd:documentation>Region that the edge can interrupt.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inStructuredNode" type="uml:StructuredActivityNode">
            <xsd:annotation>
              <xsd:documentation>Structured activity node containing the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="activity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="source" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Node from which tokens are taken when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Node to which tokens are put when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="redefinedEdge" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Inherited edges replaced by this edge in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inPartition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Partitions containing the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interrupts" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Region that the edge can interrupt.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inStructuredNode" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Structured activity node containing the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="activity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityEdge" type="uml:ActivityEdge">
    <xsd:annotation>
      <xsd:documentation>An activity edge is an abstract class for directed connections between two activity nodes.
Activity edges can be contained in interruptible regions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActivityPartition">
    <xsd:annotation>
      <xsd:documentation>An activity partition is a kind of activity group for identifying actions that have some characteristic in common.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="inActivity" type="uml:Activity">
            <xsd:annotation>
              <xsd:documentation>Activity containing the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="subpartition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Partitions immediately contained in the partition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="superPartition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Partition immediately containing the partition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="represents" type="uml:Element">
            <xsd:annotation>
              <xsd:documentation>An element constraining behaviors invoked by nodes in the partition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="edge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges immediately contained in the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="inActivity" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Activity containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDimension" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the partition groups other partitions along a dimension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isExternal" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the partition represents an entity to which the partitioning structure does not apply.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="node" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="superPartition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Partition immediately containing the partition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="represents" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An element constraining behaviors invoked by nodes in the partition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="edge" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Edges immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityPartition" type="uml:ActivityPartition">
    <xsd:annotation>
      <xsd:documentation>An activity partition is a kind of activity group for identifying actions that have some characteristic in common.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterruptibleActivityRegion">
    <xsd:annotation>
      <xsd:documentation>An interruptible activity region is an activity group that supports termination of tokens flowing in the portions of an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityGroup">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interruptingEdge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>The edges leaving the region that will abort other tokens flowing in the region.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="node" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interruptingEdge" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The edges leaving the region that will abort other tokens flowing in the region.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterruptibleActivityRegion" type="uml:InterruptibleActivityRegion">
    <xsd:annotation>
      <xsd:documentation>An interruptible activity region is an activity group that supports termination of tokens flowing in the portions of an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExceptionHandler">
    <xsd:annotation>
      <xsd:documentation>An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="handlerBody" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>A node that is executed if the handler satisfies an uncaught exception.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="exceptionInput" type="uml:ObjectNode">
            <xsd:annotation>
              <xsd:documentation>An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="exceptionType" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="protectedNode" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="handlerBody" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A node that is executed if the handler satisfies an uncaught exception.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exceptionInput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exceptionType" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="protectedNode" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExceptionHandler" type="uml:ExceptionHandler">
    <xsd:annotation>
      <xsd:documentation>An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ObjectNode">
    <xsd:annotation>
      <xsd:documentation>An object node is an abstract activity node that is part of defining object flow in an activity.
Object nodes have support for token selection, limitation on the number of tokens, specifying the state required for tokens, and carrying control values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="uml:Type">
            <xsd:annotation>
              <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="upperBound" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The maximum number of tokens allowed in the node. Objects cannot flow into the node if the upper bound is reached.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inState" type="uml:State">
            <xsd:annotation>
              <xsd:documentation>The required states of the object available at this point in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="selection" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Selects tokens for outgoing edges.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ordering" type="uml:ObjectNodeOrderingKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether and how the tokens in the object node are ordered for selection to traverse edges outgoing from the object node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isControlType" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the type of the object node is to be treated as control.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inState" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The required states of the object available at this point in the activity.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="selection" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Selects tokens for outgoing edges.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ObjectNode" type="uml:ObjectNode">
    <xsd:annotation>
      <xsd:documentation>An object node is an abstract activity node that is part of defining object flow in an activity.
Object nodes have support for token selection, limitation on the number of tokens, specifying the state required for tokens, and carrying control values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OutputPin">
    <xsd:annotation>
      <xsd:documentation>An output pin is a pin that holds output values produced by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OutputPin" type="uml:OutputPin">
    <xsd:annotation>
      <xsd:documentation>An output pin is a pin that holds output values produced by an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Pin">
    <xsd:annotation>
      <xsd:documentation>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isUnique" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isControl" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the pins provide data to the actions, or just controls when it executes it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Pin" type="uml:Pin">
    <xsd:annotation>
      <xsd:documentation>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InputPin">
    <xsd:annotation>
      <xsd:documentation>An input pin is a pin that holds input values to be consumed by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InputPin" type="uml:InputPin">
    <xsd:annotation>
      <xsd:documentation>An input pin is a pin that holds input values to be consumed by an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="CallAction">
    <xsd:annotation>
      <xsd:documentation>CallAction is an abstract class for actions that invoke behavior and receive return values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins where the results of performing the invocation are placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isSynchronous" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the call is synchronous and the caller waits for completion of the invoked behavior.
If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallAction" type="uml:CallAction">
    <xsd:annotation>
      <xsd:documentation>CallAction is an abstract class for actions that invoke behavior and receive return values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="InvocationAction">
    <xsd:annotation>
      <xsd:documentation>InvocationAction is an abstract class for the various actions that invoke behavior.&#13;
In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="argument" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specification of the ordered set of argument values that appears during execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="onPort" type="uml:Port">
            <xsd:annotation>
              <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="onPort" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InvocationAction" type="uml:InvocationAction">
    <xsd:annotation>
      <xsd:documentation>InvocationAction is an abstract class for the various actions that invoke behavior.
In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendSignalAction">
    <xsd:annotation>
      <xsd:documentation>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the signal is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The type of signal transmitted to the target object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The type of signal transmitted to the target object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendSignalAction" type="uml:SendSignalAction">
    <xsd:annotation>
      <xsd:documentation>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallOperationAction">
    <xsd:annotation>
      <xsd:documentation>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation to be invoked by the action execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation to be invoked by the action execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallOperationAction" type="uml:CallOperationAction">
    <xsd:annotation>
      <xsd:documentation>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>The invoked behavior. It must be capable of accepting and returning control.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The invoked behavior. It must be capable of accepting and returning control.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallBehaviorAction" type="uml:CallBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SequenceNode">
    <xsd:annotation>
      <xsd:documentation>A sequence node is a structured activity node that executes its actions in order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="executableNode" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>An ordered set of executable nodes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SequenceNode" type="uml:SequenceNode">
    <xsd:annotation>
      <xsd:documentation>A sequence node is a structured activity node that executes its actions in order.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Usage">
    <xsd:annotation>
      <xsd:documentation>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Usage" type="uml:Usage">
    <xsd:annotation>
      <xsd:documentation>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ControlNode">
    <xsd:annotation>
      <xsd:documentation>A control node is an abstract activity node that coordinates flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ControlNode" type="uml:ControlNode">
    <xsd:annotation>
      <xsd:documentation>A control node is an abstract activity node that coordinates flows in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ControlFlow">
    <xsd:annotation>
      <xsd:documentation>A control flow is an edge that starts an activity node after the previous one is finished.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ControlFlow" type="uml:ControlFlow">
    <xsd:annotation>
      <xsd:documentation>A control flow is an edge that starts an activity node after the previous one is finished.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InitialNode">
    <xsd:annotation>
      <xsd:documentation>An initial node is a control node at which flow starts when the activity is invoked.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InitialNode" type="uml:InitialNode">
    <xsd:annotation>
      <xsd:documentation>An initial node is a control node at which flow starts when the activity is invoked.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActivityParameterNode">
    <xsd:annotation>
      <xsd:documentation>An activity parameter node is an object node for inputs and outputs to activities.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>The parameter the object node will be accepting or providing values for.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="parameter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The parameter the object node will be accepting or providing values for.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityParameterNode" type="uml:ActivityParameterNode">
    <xsd:annotation>
      <xsd:documentation>An activity parameter node is an object node for inputs and outputs to activities.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ValuePin">
    <xsd:annotation>
      <xsd:documentation>A value pin is an input pin that provides a value by evaluating a value specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InputPin">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Value that the pin will provide.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValuePin" type="uml:ValuePin">
    <xsd:annotation>
      <xsd:documentation>A value pin is an input pin that provides a value by evaluating a value specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Message">
    <xsd:annotation>
      <xsd:documentation>A message defines a particular communication between lifelines of an interaction.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="receiveEvent" type="uml:MessageEnd">
            <xsd:annotation>
              <xsd:documentation>References the Receiving of the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="sendEvent" type="uml:MessageEnd">
            <xsd:annotation>
              <xsd:documentation>References the Sending of the Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="connector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>The Connector on which this Message is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interaction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The enclosing Interaction owning the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="argument" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The arguments of the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="messageSort" type="uml:MessageSort" use="required">
          <xsd:annotation>
            <xsd:documentation>The sort of communication reflected by the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="receiveEvent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Receiving of the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sendEvent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Sending of the Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="connector" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Connector on which this Message is sent.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interaction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The enclosing Interaction owning the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Message" type="uml:Message">
    <xsd:annotation>
      <xsd:documentation>A message defines a particular communication between lifelines of an interaction.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MessageEnd">
    <xsd:annotation>
      <xsd:documentation>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>References a Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="message" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageEnd" type="uml:MessageEnd">
    <xsd:annotation>
      <xsd:documentation>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Interaction">
    <xsd:annotation>
      <xsd:documentation>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="covered" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingInteraction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingOperand" type="uml:InteractionOperand">
            <xsd:annotation>
              <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lifeline" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>Specifies the participants in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="fragment" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>The ordered set of fragments in the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="action" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>Actions owned by the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="formalGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>The Messages contained in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="covered" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingInteraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingOperand" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Interaction" type="uml:Interaction">
    <xsd:annotation>
      <xsd:documentation>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="InteractionFragment">
    <xsd:annotation>
      <xsd:documentation>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="covered" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingInteraction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingOperand" type="uml:InteractionOperand">
            <xsd:annotation>
              <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="covered" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingInteraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingOperand" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InteractionFragment" type="uml:InteractionFragment">
    <xsd:annotation>
      <xsd:documentation>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Lifeline">
    <xsd:annotation>
      <xsd:documentation>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="represents" type="uml:ConnectableElement">
            <xsd:annotation>
              <xsd:documentation>References the ConnectableElement within the classifier that contains the enclosing interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interaction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>References the Interaction enclosing this Lifeline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="selector" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="decomposedAs" type="uml:PartDecomposition">
            <xsd:annotation>
              <xsd:documentation>References the Interaction that represents the decomposition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="coveredBy" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>References the InteractionFragments in which this Lifeline takes part.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="represents" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the ConnectableElement within the classifier that contains the enclosing interaction.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interaction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Interaction enclosing this Lifeline.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="decomposedAs" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Interaction that represents the decomposition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="coveredBy" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the InteractionFragments in which this Lifeline takes part.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Lifeline" type="uml:Lifeline">
    <xsd:annotation>
      <xsd:documentation>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PartDecomposition">
    <xsd:annotation>
      <xsd:documentation>A part decomposition is a description of the internal interactions of one lifeline relative to an interaction.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionUse"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PartDecomposition" type="uml:PartDecomposition">
    <xsd:annotation>
      <xsd:documentation>A part decomposition is a description of the internal interactions of one lifeline relative to an interaction.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InteractionUse">
    <xsd:annotation>
      <xsd:documentation>An interaction use refers to an interaction. The interaction use is a shorthand for copying the contents of the referenced interaction where the interaction use is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="refersTo" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>Refers to the Interaction that defines its meaning</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="actualGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>The actual gates of the InteractionUse</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="argument" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>The actual arguments of the Interaction</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="refersTo" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Refers to the Interaction that defines its meaning</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InteractionUse" type="uml:InteractionUse">
    <xsd:annotation>
      <xsd:documentation>An interaction use refers to an interaction. The interaction use is a shorthand for copying the contents of the referenced interaction where the interaction use is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Gate">
    <xsd:annotation>
      <xsd:documentation>A gate is a connection point for relating a message outside an interaction fragment with a message inside the interaction fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEnd"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Gate" type="uml:Gate">
    <xsd:annotation>
      <xsd:documentation>A gate is a connection point for relating a message outside an interaction fragment with a message inside the interaction fragment.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GeneralOrdering">
    <xsd:annotation>
      <xsd:documentation>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="before" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="after" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="before" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="after" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GeneralOrdering" type="uml:GeneralOrdering">
    <xsd:annotation>
      <xsd:documentation>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="toBefore" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="event" type="uml:Event">
            <xsd:annotation>
              <xsd:documentation>References a specification of the occurring event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="toAfter" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="toBefore" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a specification of the occurring event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="toAfter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OccurrenceSpecification" type="uml:OccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InteractionOperand">
    <xsd:annotation>
      <xsd:documentation>An interaction operand is contained in a combined fragment. An interaction operand represents one operand of the expression given by the enclosing combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="covered" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingInteraction" type="uml:Interaction">
            <xsd:annotation>
              <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="enclosingOperand" type="uml:InteractionOperand">
            <xsd:annotation>
              <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="guard" type="uml:InteractionConstraint">
            <xsd:annotation>
              <xsd:documentation>Constraint of the operand.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="fragment" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>The fragments of the operand.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="covered" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingInteraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enclosingOperand" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InteractionOperand" type="uml:InteractionOperand">
    <xsd:annotation>
      <xsd:documentation>An interaction operand is contained in a combined fragment. An interaction operand represents one operand of the expression given by the enclosing combined fragment.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InteractionConstraint">
    <xsd:annotation>
      <xsd:documentation>An interaction constraint is a Boolean expression that guards an operand in a combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Constraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="minint" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The minimum number of iterations of a loop</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="maxint" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The maximum number of iterations of a loop</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InteractionConstraint" type="uml:InteractionConstraint">
    <xsd:annotation>
      <xsd:documentation>An interaction constraint is a Boolean expression that guards an operand in a combined fragment.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="start" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>References the OccurrenceSpecification that designates the start of the Action or Behavior</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="finish" type="uml:OccurrenceSpecification">
            <xsd:annotation>
              <xsd:documentation>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="start" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the start of the Action or Behavior</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="finish" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionSpecification" type="uml:ExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StateInvariant">
    <xsd:annotation>
      <xsd:documentation>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="invariant" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>A Constraint that should hold at runtime for this StateInvariant</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StateInvariant" type="uml:StateInvariant">
    <xsd:annotation>
      <xsd:documentation>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActionExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An action execution specification is a kind of execution specification representing the execution of an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="action" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>Action whose execution is occurring.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="action" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Action whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActionExecutionSpecification" type="uml:ActionExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An action execution specification is a kind of execution specification representing the execution of an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="BehaviorExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="behavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Behavior whose execution is occurring.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="behavior" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Behavior whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BehaviorExecutionSpecification" type="uml:BehaviorExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExecutionEvent">
    <xsd:annotation>
      <xsd:documentation>An execution event models the start or finish of an execution occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionEvent" type="uml:ExecutionEvent">
    <xsd:annotation>
      <xsd:documentation>An execution event models the start or finish of an execution occurrence.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CreationEvent">
    <xsd:annotation>
      <xsd:documentation>A creation event models the creation of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CreationEvent" type="uml:CreationEvent">
    <xsd:annotation>
      <xsd:documentation>A creation event models the creation of an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DestructionEvent">
    <xsd:annotation>
      <xsd:documentation>A destruction event models the destruction of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DestructionEvent" type="uml:DestructionEvent">
    <xsd:annotation>
      <xsd:documentation>A destruction event models the destruction of an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A send operation event models the invocation of an operation call.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendOperationEvent" type="uml:SendOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A send operation event models the invocation of an operation call.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MessageEvent">
    <xsd:annotation>
      <xsd:documentation>A message event specifies the receipt by an object of either a call or a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageEvent" type="uml:MessageEvent">
    <xsd:annotation>
      <xsd:documentation>A message event specifies the receipt by an object of either a call or a signal.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A send signal event models the sending of a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendSignalEvent" type="uml:SendSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A send signal event models the sending of a signal.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="MessageOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>References a Message.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="message" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References a Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MessageOccurrenceSpecification" type="uml:MessageOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExecutionOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="execution" type="uml:ExecutionSpecification">
            <xsd:annotation>
              <xsd:documentation>References the execution specification describing the execution that is started or finished at this execution event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="execution" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>References the execution specification describing the execution that is started or finished at this execution event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionOccurrenceSpecification" type="uml:ExecutionOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReceiveOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operation associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReceiveOperationEvent" type="uml:ReceiveOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReceiveSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A receive signal event specifies the event of receiving a signal by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The signal associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReceiveSignalEvent" type="uml:ReceiveSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A receive signal event specifies the event of receiving a signal by the target entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Actor">
    <xsd:annotation>
      <xsd:documentation>An actor specifies a role played by a user or any other system that interacts with the subject.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Actor" type="uml:Actor">
    <xsd:annotation>
      <xsd:documentation>An actor specifies a role played by a user or any other system that interacts with the subject.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallEvent">
    <xsd:annotation>
      <xsd:documentation>A call event models the receipt by an object of a message invoking a call of an operation.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>Designates the operation whose invocation raised the call event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="operation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Designates the operation whose invocation raised the call event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallEvent" type="uml:CallEvent">
    <xsd:annotation>
      <xsd:documentation>A call event models the receipt by an object of a message invoking a call of an operation.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ChangeEvent">
    <xsd:annotation>
      <xsd:documentation>A change event models a change in the system configuration that makes a condition true.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="changeExpression" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ChangeEvent" type="uml:ChangeEvent">
    <xsd:annotation>
      <xsd:documentation>A change event models a change in the system configuration that makes a condition true.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SignalEvent">
    <xsd:annotation>
      <xsd:documentation>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The specific signal that is associated with this event.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The specific signal that is associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SignalEvent" type="uml:SignalEvent">
    <xsd:annotation>
      <xsd:documentation>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AnyReceiveEvent">
    <xsd:annotation>
      <xsd:documentation>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AnyReceiveEvent" type="uml:AnyReceiveEvent">
    <xsd:annotation>
      <xsd:documentation>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ForkNode">
    <xsd:annotation>
      <xsd:documentation>A fork node is a control node that splits a flow into multiple concurrent flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ForkNode" type="uml:ForkNode">
    <xsd:annotation>
      <xsd:documentation>A fork node is a control node that splits a flow into multiple concurrent flows.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FlowFinalNode">
    <xsd:annotation>
      <xsd:documentation>A flow final node is a final node that terminates a flow.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:FinalNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FlowFinalNode" type="uml:FlowFinalNode">
    <xsd:annotation>
      <xsd:documentation>A flow final node is a final node that terminates a flow.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="FinalNode">
    <xsd:annotation>
      <xsd:documentation>A final node is an abstract control node at which a flow in an activity stops.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FinalNode" type="uml:FinalNode">
    <xsd:annotation>
      <xsd:documentation>A final node is an abstract control node at which a flow in an activity stops.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CentralBufferNode">
    <xsd:annotation>
      <xsd:documentation>A central buffer node is an object node for managing flows from multiple sources and destinations.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CentralBufferNode" type="uml:CentralBufferNode">
    <xsd:annotation>
      <xsd:documentation>A central buffer node is an object node for managing flows from multiple sources and destinations.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="MergeNode">
    <xsd:annotation>
      <xsd:documentation>A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MergeNode" type="uml:MergeNode">
    <xsd:annotation>
      <xsd:documentation>A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DecisionNode">
    <xsd:annotation>
      <xsd:documentation>A decision node is a control node that chooses between outgoing flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="decisionInput" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Provides input to guard specifications on edges outgoing from the decision node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="decisionInput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Provides input to guard specifications on edges outgoing from the decision node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DecisionNode" type="uml:DecisionNode">
    <xsd:annotation>
      <xsd:documentation>A decision node is a control node that chooses between outgoing flows.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActivityFinalNode">
    <xsd:annotation>
      <xsd:documentation>An activity final node is a final node that stops all flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:FinalNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActivityFinalNode" type="uml:ActivityFinalNode">
    <xsd:annotation>
      <xsd:documentation>An activity final node is a final node that stops all flows in an activity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ComponentRealization">
    <xsd:annotation>
      <xsd:documentation>The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="abstraction" type="uml:Component">
            <xsd:annotation>
              <xsd:documentation>The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="realizingClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>A classifier that is involved in the implementation of the Component that owns this ComponentRealization.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="abstraction" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="realizingClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A classifier that is involved in the implementation of the Component that owns this ComponentRealization.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComponentRealization" type="uml:ComponentRealization">
    <xsd:annotation>
      <xsd:documentation>The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Component">
    <xsd:annotation>
      <xsd:documentation>A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.
In the namespace of a component, all model elements that are involved in or related to its definition are either owned or imported explicitly. This may include, for example, use cases and dependencies (e.g. mappings), packages, components, and artifacts.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="packagedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>The set of PackageableElements that a Component owns. In the namespace of a component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g. Classes, Interfaces, Components, Packages, Use cases, Dependencies (e.g. mappings), and Artifacts.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="realization" type="uml:ComponentRealization">
            <xsd:annotation>
              <xsd:documentation>The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isIndirectlyInstantiated" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at runtime (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute, e.g. &lt;&lt;specification&gt;&gt;, &lt;&lt;focus&gt;&gt;, &lt;&lt;subsystem&gt;&gt;.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Component" type="uml:Component">
    <xsd:annotation>
      <xsd:documentation>A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.&#13;
In the namespace of a component, all model elements that are involved in or related to its definition are either owned or imported explicitly. This may include, for example, use cases and dependencies (e.g. mappings), packages, components, and artifacts.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Node">
    <xsd:annotation>
      <xsd:documentation>A node is computational resource upon which artifacts may be deployed for execution.
Nodes can be interconnected through communication paths to define network structures.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deployment" type="uml:Deployment">
            <xsd:annotation>
              <xsd:documentation>The set of Deployments for a DeploymentTarget.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nestedNode" type="uml:Node">
            <xsd:annotation>
              <xsd:documentation>The Nodes that are defined (nested) within the Node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Node" type="uml:Node">
    <xsd:annotation>
      <xsd:documentation>A node is computational resource upon which artifacts may be deployed for execution.&#13;
Nodes can be interconnected through communication paths to define network structures.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Device">
    <xsd:annotation>
      <xsd:documentation>A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Node"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Device" type="uml:Device">
    <xsd:annotation>
      <xsd:documentation>A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExecutionEnvironment">
    <xsd:annotation>
      <xsd:documentation>An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Node"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExecutionEnvironment" type="uml:ExecutionEnvironment">
    <xsd:annotation>
      <xsd:documentation>An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CommunicationPath">
    <xsd:annotation>
      <xsd:documentation>A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Association"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CommunicationPath" type="uml:CommunicationPath">
    <xsd:annotation>
      <xsd:documentation>A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CombinedFragment">
    <xsd:annotation>
      <xsd:documentation>A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="operand" type="uml:InteractionOperand">
            <xsd:annotation>
              <xsd:documentation>The set of operands of the combined fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="cfragmentGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>Specifies the gates that form the interface between this CombinedFragment and its surroundings</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="interactionOperator" type="uml:InteractionOperatorKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the operation which defines the semantics of this combination of InteractionFragments.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CombinedFragment" type="uml:CombinedFragment">
    <xsd:annotation>
      <xsd:documentation>A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Continuation">
    <xsd:annotation>
      <xsd:documentation>A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:attribute name="setting" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Continuation" type="uml:Continuation">
    <xsd:annotation>
      <xsd:documentation>A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConsiderIgnoreFragment">
    <xsd:annotation>
      <xsd:documentation>A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CombinedFragment">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="message" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The set of messages that apply to this fragment</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="message" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of messages that apply to this fragment</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConsiderIgnoreFragment" type="uml:ConsiderIgnoreFragment">
    <xsd:annotation>
      <xsd:documentation>A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CreateObjectAction">
    <xsd:annotation>
      <xsd:documentation>A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="classifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Classifier to be instantiated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Classifier to be instantiated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CreateObjectAction" type="uml:CreateObjectAction">
    <xsd:annotation>
      <xsd:documentation>A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DestroyObjectAction">
    <xsd:annotation>
      <xsd:documentation>A destroy object action is an action that destroys objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The input pin providing the object to be destroyed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDestroyLinks" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether links in which the object participates are destroyed along with the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isDestroyOwnedObjects" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether objects owned by the object are destroyed along with the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DestroyObjectAction" type="uml:DestroyObjectAction">
    <xsd:annotation>
      <xsd:documentation>A destroy object action is an action that destroys objects.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TestIdentityAction">
    <xsd:annotation>
      <xsd:documentation>A test identity action is an action that tests if two values are identical objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="first" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the pin on which an object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="second" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the pin on which an object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Tells whether the two input objects are identical.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TestIdentityAction" type="uml:TestIdentityAction">
    <xsd:annotation>
      <xsd:documentation>A test identity action is an action that tests if two values are identical objects.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadSelfAction">
    <xsd:annotation>
      <xsd:documentation>A read self action is an action that retrieves the host object of an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the hosting object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadSelfAction" type="uml:ReadSelfAction">
    <xsd:annotation>
      <xsd:documentation>A read self action is an action that retrieves the host object of an action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="StructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>StructuralFeatureAction is an abstract class for all structural feature actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="structuralFeature" type="uml:StructuralFeature">
            <xsd:annotation>
              <xsd:documentation>Structural feature to be read.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which the object whose structural feature is to be read or written is obtained.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="structuralFeature" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Structural feature to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructuralFeatureAction" type="uml:StructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>StructuralFeatureAction is an abstract class for all structural feature actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A read structural feature action is a structural feature action that retrieves the values of a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadStructuralFeatureAction" type="uml:ReadStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A read structural feature action is a structural feature action that retrieves the values of a structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="WriteStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>WriteStructuralFeatureAction is an abstract class for structural feature actions that change structural feature values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Value to be added or removed from the structural feature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WriteStructuralFeatureAction" type="uml:WriteStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>WriteStructuralFeatureAction is an abstract class for structural feature actions that change structural feature values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClearStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A clear structural feature action is a structural feature action that removes all values of a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClearStructuralFeatureAction" type="uml:ClearStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A clear structural feature action is a structural feature action that removes all values of a structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RemoveStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove structural feature value action is a write structural feature action that removes values from structural features.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteStructuralFeatureAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="removeAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies the position of an existing value to remove in ordered nonunique structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isRemoveDuplicates" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to remove duplicates of the value in nonunique structural features.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RemoveStructuralFeatureValueAction" type="uml:RemoveStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove structural feature value action is a write structural feature action that removes values from structural features.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AddStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>An add structural feature value action is a write structural feature action for adding values to a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteStructuralFeatureAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="insertAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReplaceAll" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether existing values of the structural feature of the object should be removed before adding the new value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AddStructuralFeatureValueAction" type="uml:AddStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>An add structural feature value action is a write structural feature action for adding values to a structural feature.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="LinkAction">
    <xsd:annotation>
      <xsd:documentation>LinkAction is an abstract class for all link actions that identify their links by the objects at the ends of the links and by the qualifiers at ends of the links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="endData" type="uml:LinkEndData">
            <xsd:annotation>
              <xsd:documentation>Data identifying one end of a link by the objects on its ends and qualifiers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="inputValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Pins taking end objects and qualifier values as input.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LinkAction" type="uml:LinkAction">
    <xsd:annotation>
      <xsd:documentation>LinkAction is an abstract class for all link actions that identify their links by the objects at the ends of the links and by the qualifiers at ends of the links.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LinkEndData">
    <xsd:annotation>
      <xsd:documentation>A link end data is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of a link action. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around a link end data. Each association end is identified separately with an instance of the LinkEndData class.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Association end for which this link-end data specifies values.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="qualifier" type="uml:QualifierValue">
            <xsd:annotation>
              <xsd:documentation>List of qualifier values</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="value" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Association end for which this link-end data specifies values.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LinkEndData" type="uml:LinkEndData">
    <xsd:annotation>
      <xsd:documentation>A link end data is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of a link action. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around a link end data. Each association end is identified separately with an instance of the LinkEndData class.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="QualifierValue">
    <xsd:annotation>
      <xsd:documentation>A qualifier value is not an action. It is an element that identifies links. It gives a single qualifier within a link end data specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="qualifier" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Attribute representing the qualifier for which the value is to be specified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Input pin from which the specified value for the qualifier is taken.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="qualifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Attribute representing the qualifier for which the value is to be specified.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="value" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Input pin from which the specified value for the qualifier is taken.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="QualifierValue" type="uml:QualifierValue">
    <xsd:annotation>
      <xsd:documentation>A qualifier value is not an action. It is an element that identifies links. It gives a single qualifier within a link end data specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadLinkAction">
    <xsd:annotation>
      <xsd:documentation>A read link action is a link action that navigates across associations to retrieve objects on one end.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>The pin on which are put the objects participating in the association at the end not specified by the inputs.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadLinkAction" type="uml:ReadLinkAction">
    <xsd:annotation>
      <xsd:documentation>A read link action is a link action that navigates across associations to retrieve objects on one end.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LinkEndCreationData">
    <xsd:annotation>
      <xsd:documentation>A link end creation data is not an action. It is an element that identifies links. It identifies one end of a link to be created by a create link action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkEndData">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="insertAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReplaceAll" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="insertAt" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LinkEndCreationData" type="uml:LinkEndCreationData">
    <xsd:annotation>
      <xsd:documentation>A link end creation data is not an action. It is an element that identifies links. It identifies one end of a link to be created by a create link action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CreateLinkAction">
    <xsd:annotation>
      <xsd:documentation>A create link action is a write link action for creating links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteLinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CreateLinkAction" type="uml:CreateLinkAction">
    <xsd:annotation>
      <xsd:documentation>A create link action is a write link action for creating links.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="WriteLinkAction">
    <xsd:annotation>
      <xsd:documentation>WriteLinkAction is an abstract class for link actions that create and destroy links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WriteLinkAction" type="uml:WriteLinkAction">
    <xsd:annotation>
      <xsd:documentation>WriteLinkAction is an abstract class for link actions that create and destroy links.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DestroyLinkAction">
    <xsd:annotation>
      <xsd:documentation>A destroy link action is a write link action that destroys links and link objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteLinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DestroyLinkAction" type="uml:DestroyLinkAction">
    <xsd:annotation>
      <xsd:documentation>A destroy link action is a write link action that destroys links and link objects.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LinkEndDestructionData">
    <xsd:annotation>
      <xsd:documentation>A link end destruction data is not an action. It is an element that identifies links. It identifies one end of a link to be destroyed by destroy link action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkEndData">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="destroyAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDestroyDuplicates" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to destroy duplicates of the value in nonunique association ends.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="destroyAt" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LinkEndDestructionData" type="uml:LinkEndDestructionData">
    <xsd:annotation>
      <xsd:documentation>A link end destruction data is not an action. It is an element that identifies links. It identifies one end of a link to be destroyed by destroy link action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClearAssociationAction">
    <xsd:annotation>
      <xsd:documentation>A clear association action is an action that destroys all links of an association in which a particular object participates.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which is obtained the object whose participation in the association is to be cleared.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="association" type="uml:Association">
            <xsd:annotation>
              <xsd:documentation>Association to be cleared.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="association" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Association to be cleared.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClearAssociationAction" type="uml:ClearAssociationAction">
    <xsd:annotation>
      <xsd:documentation>A clear association action is an action that destroys all links of an association in which a particular object participates.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="BroadcastSignalAction">
    <xsd:annotation>
      <xsd:documentation>A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="signal" type="uml:Signal">
            <xsd:annotation>
              <xsd:documentation>The specification of signal object transmitted to the target objects.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="signal" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The specification of signal object transmitted to the target objects.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BroadcastSignalAction" type="uml:BroadcastSignalAction">
    <xsd:annotation>
      <xsd:documentation>A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SendObjectAction">
    <xsd:annotation>
      <xsd:documentation>A send object action is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the object is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="request" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SendObjectAction" type="uml:SendObjectAction">
    <xsd:annotation>
      <xsd:documentation>A send object action is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ValueSpecificationAction">
    <xsd:annotation>
      <xsd:documentation>A value specification action is an action that evaluates a value specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Value specification to be evaluated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValueSpecificationAction" type="uml:ValueSpecificationAction">
    <xsd:annotation>
      <xsd:documentation>A value specification action is an action that evaluates a value specification.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeExpression">
    <xsd:annotation>
      <xsd:documentation>A time expression defines a value specification that represents a time value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="expr" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The value of the time expression.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="observation" type="uml:Observation">
            <xsd:annotation>
              <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="expr" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The value of the time expression.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="observation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeExpression" type="uml:TimeExpression">
    <xsd:annotation>
      <xsd:documentation>A time expression defines a value specification that represents a time value.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Observation">
    <xsd:annotation>
      <xsd:documentation>Observation is a superclass of TimeObservation and DurationObservation in order for TimeExpression and Duration to refer to either in a simple way.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Observation" type="uml:Observation">
    <xsd:annotation>
      <xsd:documentation>Observation is a superclass of TimeObservation and DurationObservation in order for TimeExpression and Duration to refer to either in a simple way.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Duration">
    <xsd:annotation>
      <xsd:documentation>Duration defines a value specification that specifies the temporal distance between two time instants.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="expr" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The value of the Duration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="observation" type="uml:Observation">
            <xsd:annotation>
              <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="expr" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The value of the Duration.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="observation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Duration" type="uml:Duration">
    <xsd:annotation>
      <xsd:documentation>Duration defines a value specification that specifies the temporal distance between two time instants.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DurationInterval">
    <xsd:annotation>
      <xsd:documentation>A duration interval defines the range between two durations.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Interval"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DurationInterval" type="uml:DurationInterval">
    <xsd:annotation>
      <xsd:documentation>A duration interval defines the range between two durations.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Interval">
    <xsd:annotation>
      <xsd:documentation>An interval defines the range between two value specifications.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="min" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Refers to the ValueSpecification denoting the minimum value of the range.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="max" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Refers to the ValueSpecification denoting the maximum value of the range.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="min" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Refers to the ValueSpecification denoting the minimum value of the range.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="max" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Refers to the ValueSpecification denoting the maximum value of the range.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Interval" type="uml:Interval">
    <xsd:annotation>
      <xsd:documentation>An interval defines the range between two value specifications.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeConstraint">
    <xsd:annotation>
      <xsd:documentation>A time constraint is a constraint that refers to a time interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:IntervalConstraint">
        <xsd:attribute name="firstEvent" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The value of firstEvent is related to constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within constrainedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeConstraint" type="uml:TimeConstraint">
    <xsd:annotation>
      <xsd:documentation>A time constraint is a constraint that refers to a time interval.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="IntervalConstraint">
    <xsd:annotation>
      <xsd:documentation>An interval constraint is a constraint that refers to an interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Constraint"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="IntervalConstraint" type="uml:IntervalConstraint">
    <xsd:annotation>
      <xsd:documentation>An interval constraint is a constraint that refers to an interval.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeInterval">
    <xsd:annotation>
      <xsd:documentation>A time interval defines the range between two time expressions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Interval"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeInterval" type="uml:TimeInterval">
    <xsd:annotation>
      <xsd:documentation>A time interval defines the range between two time expressions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DurationConstraint">
    <xsd:annotation>
      <xsd:documentation>A duration constraint is a constraint that refers to a duration interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:IntervalConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="firstEvent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]. Default value is true applied when constrainedElement[i] refers an element that represents only one time instant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DurationConstraint" type="uml:DurationConstraint">
    <xsd:annotation>
      <xsd:documentation>A duration constraint is a constraint that refers to a duration interval.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeObservation">
    <xsd:annotation>
      <xsd:documentation>A time observation is a reference to a time instant during an execution. It points out the element in the model to observe and whether the observation is when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Observation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="firstEvent" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>The value of firstEvent is related to event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters event. If firstEvent is false, then the corresponding observation event is the time instant the execution exits event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeObservation" type="uml:TimeObservation">
    <xsd:annotation>
      <xsd:documentation>A time observation is a reference to a time instant during an execution. It points out the element in the model to observe and whether the observation is when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DurationObservation">
    <xsd:annotation>
      <xsd:documentation>A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Observation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="firstEvent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]. Default value is true applied when event[i] refers an element that represents only one time instant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="event" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="event" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DurationObservation" type="uml:DurationObservation">
    <xsd:annotation>
      <xsd:documentation>A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FinalState">
    <xsd:annotation>
      <xsd:documentation>A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:State"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FinalState" type="uml:FinalState">
    <xsd:annotation>
      <xsd:documentation>A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeEvent">
    <xsd:annotation>
      <xsd:documentation>A time event specifies a point in time. At the specified time, the event occurs.
A time event can be defined relative to entering the current state of the executing state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="when" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies the corresponding time deadline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isRelative" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether it is relative or absolute time.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeEvent" type="uml:TimeEvent">
    <xsd:annotation>
      <xsd:documentation>A time event specifies a point in time. At the specified time, the event occurs.
A time event can be defined relative to entering the current state of the executing state machine.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="VariableAction">
    <xsd:annotation>
      <xsd:documentation>VariableAction is an abstract class for actions that operate on a statically specified variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="variable" type="uml:Variable">
            <xsd:annotation>
              <xsd:documentation>Variable to be read.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="variable" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Variable to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="VariableAction" type="uml:VariableAction">
    <xsd:annotation>
      <xsd:documentation>VariableAction is an abstract class for actions that operate on a statically specified variable.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadVariableAction">
    <xsd:annotation>
      <xsd:documentation>A read variable action is a variable action that retrieves the values of a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadVariableAction" type="uml:ReadVariableAction">
    <xsd:annotation>
      <xsd:documentation>A read variable action is a variable action that retrieves the values of a variable.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="WriteVariableAction">
    <xsd:annotation>
      <xsd:documentation>WriteVariableAction is an abstract class for variable actions that change variable values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Value to be added or removed from the variable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WriteVariableAction" type="uml:WriteVariableAction">
    <xsd:annotation>
      <xsd:documentation>WriteVariableAction is an abstract class for variable actions that change variable values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClearVariableAction">
    <xsd:annotation>
      <xsd:documentation>A clear variable action is a variable action that removes all values of a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClearVariableAction" type="uml:ClearVariableAction">
    <xsd:annotation>
      <xsd:documentation>A clear variable action is a variable action that removes all values of a variable.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AddVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>An add variable value action is a write variable action for adding values to a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteVariableAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="insertAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReplaceAll" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether existing values of the variable should be removed before adding the new value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AddVariableValueAction" type="uml:AddVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>An add variable value action is a write variable action for adding values to a variable.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RemoveVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove variable value action is a write variable action that removes values from variables.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteVariableAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="removeAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies the position of an existing value to remove in ordered nonunique variables. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isRemoveDuplicates" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to remove duplicates of the value in nonunique variables.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RemoveVariableValueAction" type="uml:RemoveVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove variable value action is a write variable action that removes values from variables.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RaiseExceptionAction">
    <xsd:annotation>
      <xsd:documentation>A raise exception action is an action that causes an exception to occur. The input value becomes the exception object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="exception" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>An input pin whose value becomes an exception object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RaiseExceptionAction" type="uml:RaiseExceptionAction">
    <xsd:annotation>
      <xsd:documentation>A raise exception action is an action that causes an exception to occur. The input value becomes the exception object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ActionInputPin">
    <xsd:annotation>
      <xsd:documentation>An action input pin is a kind of pin that executes an action to determine the values to input to another.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InputPin">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="fromAction" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>The action used to provide values.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ActionInputPin" type="uml:ActionInputPin">
    <xsd:annotation>
      <xsd:documentation>An action input pin is a kind of pin that executes an action to determine the values to input to another.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InformationItem">
    <xsd:annotation>
      <xsd:documentation>An information item is an abstraction of all kinds of information that can be exchanged between objects. It is a kind of classifier intended for representing information in a very abstract way, one which cannot be instantiated.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="represented" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="represented" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InformationItem" type="uml:InformationItem">
    <xsd:annotation>
      <xsd:documentation>An information item is an abstraction of all kinds of information that can be exchanged between objects. It is a kind of classifier intended for representing information in a very abstract way, one which cannot be instantiated.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InformationFlow">
    <xsd:annotation>
      <xsd:documentation>An information flow specifies that one or more information items circulates from its sources to its targets. Information flows require some kind of information channel for transmitting information items from the source to the destination. An information channel is represented in various ways depending on the nature of its sources and targets. It may be represented by connectors, links, associations, or even dependencies. For example, if the source and destination are parts in some composite structure such as a collaboration, then the information channel is likely to be represented by a connector between them. Or, if the source and target are objects (which are a kind of instance specification), they may be represented by a link that joins the two, and so on.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="realization" type="uml:Relationship">
            <xsd:annotation>
              <xsd:documentation>Determines which Relationship will realize the specified flow</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="conveyed" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>Specifies the information items that may circulate on this information flow.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="informationSource" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>Defines from which source the conveyed InformationItems are initiated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="informationTarget" type="uml:NamedElement">
            <xsd:annotation>
              <xsd:documentation>Defines to which target the conveyed InformationItems are directed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="realizingActivityEdge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Determines which ActivityEdges will realize the specified flow.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="realizingConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>Determines which Connectors will realize the specified flow.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="realizingMessage" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>Determines which Messages will realize the specified flow.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="realization" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Determines which Relationship will realize the specified flow</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="conveyed" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the information items that may circulate on this information flow.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="informationSource" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Defines from which source the conveyed InformationItems are initiated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="informationTarget" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Defines to which target the conveyed InformationItems are directed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="realizingActivityEdge" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Determines which ActivityEdges will realize the specified flow.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="realizingConnector" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Determines which Connectors will realize the specified flow.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="realizingMessage" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Determines which Messages will realize the specified flow.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InformationFlow" type="uml:InformationFlow">
    <xsd:annotation>
      <xsd:documentation>An information flow specifies that one or more information items circulates from its sources to its targets. Information flows require some kind of information channel for transmitting information items from the source to the destination. An information channel is represented in various ways depending on the nature of its sources and targets. It may be represented by connectors, links, associations, or even dependencies. For example, if the source and destination are parts in some composite structure such as a collaboration, then the information channel is likely to be represented by a connector between them. Or, if the source and target are objects (which are a kind of instance specification), they may be represented by a link that joins the two, and so on.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Model">
    <xsd:annotation>
      <xsd:documentation>A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Package">
        <xsd:attribute name="viewpoint" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The name of the viewpoint that is expressed by a model (This name may refer to a profile definition).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Model" type="uml:Model">
    <xsd:annotation>
      <xsd:documentation>A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadExtentAction">
    <xsd:annotation>
      <xsd:documentation>A read extent action is an action that retrieves the current instances of a classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>The runtime instances of the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="classifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier whose instances are to be retrieved.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="classifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier whose instances are to be retrieved.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadExtentAction" type="uml:ReadExtentAction">
    <xsd:annotation>
      <xsd:documentation>A read extent action is an action that retrieves the current instances of a classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReclassifyObjectAction">
    <xsd:annotation>
      <xsd:documentation>A reclassify object action is an action that changes which classifiers classify an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="oldClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>A set of classifiers to be removed from the classifiers of the object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="newClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>A set of classifiers to be added to the classifiers of the object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Holds the object to be reclassified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isReplaceAll" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether existing classifiers should be removed before adding the new classifiers.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="oldClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A set of classifiers to be removed from the classifiers of the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="newClassifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A set of classifiers to be added to the classifiers of the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReclassifyObjectAction" type="uml:ReclassifyObjectAction">
    <xsd:annotation>
      <xsd:documentation>A reclassify object action is an action that changes which classifiers classify an object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadIsClassifiedObjectAction">
    <xsd:annotation>
      <xsd:documentation>A read is classified object action is an action that determines whether a runtime object is classified by a given classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="classifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The classifier against which the classification of the input object is tested.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>After termination of the action, will hold the result of the test.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Holds the object whose classification is to be tested.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDirect" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether the classifier must directly classify the input object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="classifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The classifier against which the classification of the input object is tested.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadIsClassifiedObjectAction" type="uml:ReadIsClassifiedObjectAction">
    <xsd:annotation>
      <xsd:documentation>A read is classified object action is an action that determines whether a runtime object is classified by a given classifier.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StartClassifierBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A start classifier behavior action is an action that starts the classifier behavior of the input.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Holds the object on which to start the owned behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StartClassifierBehaviorAction" type="uml:StartClassifierBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A start classifier behavior action is an action that starts the classifier behavior of the input.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadLinkObjectEndAction">
    <xsd:annotation>
      <xsd:documentation>A read link object end action is an action that retrieves an end object from a link object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which the link object is obtained.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="end" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Link end to be read.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Pin where the result value is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="end" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Link end to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadLinkObjectEndAction" type="uml:ReadLinkObjectEndAction">
    <xsd:annotation>
      <xsd:documentation>A read link object end action is an action that retrieves an end object from a link object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReadLinkObjectEndQualifierAction">
    <xsd:annotation>
      <xsd:documentation>A read link object end qualifier action is an action that retrieves a qualifier end value from a link object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which the link object is obtained.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Pin where the result value is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="qualifier" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attribute representing the qualifier to be read.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="qualifier" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The attribute representing the qualifier to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReadLinkObjectEndQualifierAction" type="uml:ReadLinkObjectEndQualifierAction">
    <xsd:annotation>
      <xsd:documentation>A read link object end qualifier action is an action that retrieves a qualifier end value from a link object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CreateLinkObjectAction">
    <xsd:annotation>
      <xsd:documentation>A create link object action creates a link object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CreateLinkAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CreateLinkObjectAction" type="uml:CreateLinkObjectAction">
    <xsd:annotation>
      <xsd:documentation>A create link object action creates a link object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AcceptEventAction">
    <xsd:annotation>
      <xsd:documentation>A accept event action is an action that waits for the occurrence of an event meeting specified conditions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="trigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>The type of events accepted by the action, as specified by triggers. For triggers with signal events, a signal of the specified type or any subtype of the specified signal type is accepted.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isUnmarshall" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether there is a single output pin for the event, or multiple output pins for attributes of the event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AcceptEventAction" type="uml:AcceptEventAction">
    <xsd:annotation>
      <xsd:documentation>A accept event action is an action that waits for the occurrence of an event meeting specified conditions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AcceptCallAction">
    <xsd:annotation>
      <xsd:documentation>An accept call action is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the reply action necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:AcceptEventAction">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="returnInformation" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Pin where a value is placed containing sufficient information to perform a subsequent reply and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AcceptCallAction" type="uml:AcceptCallAction">
    <xsd:annotation>
      <xsd:documentation>An accept call action is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the reply action necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReplyAction">
    <xsd:annotation>
      <xsd:documentation>A reply action is an action that accepts a set of return values and a value containing return information produced by a previous accept call action. The reply action returns the values to the caller of the previous call, completing execution of the call.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="replyToCall" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>The trigger specifying the operation whose call is being replied to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="returnInformation" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>A pin containing the return information value produced by an earlier AcceptCallAction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="replyValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>A list of pins containing the reply values of the operation. These values are returned to the caller.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="replyToCall" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The trigger specifying the operation whose call is being replied to.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReplyAction" type="uml:ReplyAction">
    <xsd:annotation>
      <xsd:documentation>A reply action is an action that accepts a set of return values and a value containing return information produced by a previous accept call action. The reply action returns the values to the caller of the previous call, completing execution of the call.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UnmarshallAction">
    <xsd:annotation>
      <xsd:documentation>An unmarshall action is an action that breaks an object of a known type into outputs each of which is equal to a value from a structural feature of the object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>The values of the structural features of the input object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="unmarshallType" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>The type of the object to be unmarshalled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The object to be unmarshalled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="unmarshallType" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The type of the object to be unmarshalled.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UnmarshallAction" type="uml:UnmarshallAction">
    <xsd:annotation>
      <xsd:documentation>An unmarshall action is an action that breaks an object of a known type into outputs each of which is equal to a value from a structural feature of the object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReduceAction">
    <xsd:annotation>
      <xsd:documentation>A reduce action is an action that reduces a collection to a single value by combining the elements of the collection.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="reducer" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Behavior that is applied to two elements of the input collection to produce a value that is the same type as elements of the collection.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="collection" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The collection to be reduced.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isOrdered" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the order of the input collection should determine the order in which the behavior is applied to its elements.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="reducer" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Behavior that is applied to two elements of the input collection to produce a value that is the same type as elements of the collection.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReduceAction" type="uml:ReduceAction">
    <xsd:annotation>
      <xsd:documentation>A reduce action is an action that reduces a collection to a single value by combining the elements of the collection.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="JoinNode">
    <xsd:annotation>
      <xsd:documentation>A join node is a control node that synchronizes multiple flows.
Join nodes have a Boolean value specification using the names of the incoming edges to specify the conditions under which the join will emit a token.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="joinSpec" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A specification giving the conditions under which the join with emit a token. Default is "and".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isCombineDuplicate" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether tokens having objects with the same identity are combined into one by the join.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="JoinNode" type="uml:JoinNode">
    <xsd:annotation>
      <xsd:documentation>A join node is a control node that synchronizes multiple flows.
Join nodes have a Boolean value specification using the names of the incoming edges to specify the conditions under which the join will emit a token.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataStoreNode">
    <xsd:annotation>
      <xsd:documentation>A data store node is a central buffer node for non-transient information.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CentralBufferNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataStoreNode" type="uml:DataStoreNode">
    <xsd:annotation>
      <xsd:documentation>A data store node is a central buffer node for non-transient information.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ObjectFlow">
    <xsd:annotation>
      <xsd:documentation>An object flow is an activity edge that can have objects or data passing along it.
Object flows have support for multicast/receive, token selection from object nodes, and transformation of tokens.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="transformation" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Changes or replaces data tokens flowing along edge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="selection" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Selects tokens from a source object node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isMulticast" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the objects in the flow are passed by multicasting.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isMultireceive" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the objects in the flow are gathered from respondents to multicasting.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="transformation" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Changes or replaces data tokens flowing along edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="selection" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Selects tokens from a source object node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ObjectFlow" type="uml:ObjectFlow">
    <xsd:annotation>
      <xsd:documentation>An object flow is an activity edge that can have objects or data passing along it.
Object flows have support for multicast/receive, token selection from object nodes, and transformation of tokens.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConditionalNode">
    <xsd:annotation>
      <xsd:documentation>A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="clause" type="uml:Clause">
            <xsd:annotation>
              <xsd:documentation>Set of clauses composing the conditional.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins that constitute the data flow outputs of the conditional.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDeterminate" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the modeler asserts that at most one test will succeed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="isAssured" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the modeler asserts that at least one test will succeed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConditionalNode" type="uml:ConditionalNode">
    <xsd:annotation>
      <xsd:documentation>A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Clause">
    <xsd:annotation>
      <xsd:documentation>A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="test" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>A nested activity fragment with a designated output pin that specifies the result of the test.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="body" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="predecessorClause" type="uml:Clause">
            <xsd:annotation>
              <xsd:documentation>A set of clauses whose tests must all evaluate false before the current clause can be tested.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="successorClause" type="uml:Clause">
            <xsd:annotation>
              <xsd:documentation>A set of clauses which may not be tested unless the current clause tests false.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="decider" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="bodyOutput" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node after execution of the clause body.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="test" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A nested activity fragment with a designated output pin that specifies the result of the test.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="body" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="predecessorClause" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A set of clauses whose tests must all evaluate false before the current clause can be tested.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="successorClause" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A set of clauses which may not be tested unless the current clause tests false.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="decider" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bodyOutput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node after execution of the clause body.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Clause" type="uml:Clause">
    <xsd:annotation>
      <xsd:documentation>A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LoopNode">
    <xsd:annotation>
      <xsd:documentation>A loop node is a structured activity node that represents a loop with setup, test, and body sections.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="bodyPart" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="setupPart" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>The set of nodes and edges that initialize values or perform other setup computations for the loop.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="decider" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="test" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins that constitute the data flow output of the entire loop.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="loopVariable" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are movied to the result pins of the loop.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="bodyOutput" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins within the body fragment the values of which are moved to the loop variable pins after completion of execution of the body, before the next iteration of the loop begins or before the loop exits.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="loopVariableInput" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>A list of values that are moved into the loop variable pins before the first iteration of the loop.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isTestedFirst" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the test is performed before the first execution of the body.
If false, the body is executed once before the test is performed.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bodyPart" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="setupPart" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of nodes and edges that initialize values or perform other setup computations for the loop.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="decider" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="test" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="loopVariable" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A list of output pins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are movied to the result pins of the loop.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bodyOutput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>A list of output pins within the body fragment the values of which are moved to the loop variable pins after completion of execution of the body, before the next iteration of the loop begins or before the loop exits.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LoopNode" type="uml:LoopNode">
    <xsd:annotation>
      <xsd:documentation>A loop node is a structured activity node that represents a loop with setup, test, and body sections.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExpansionNode">
    <xsd:annotation>
      <xsd:documentation>An expansion node is an object node used to indicate a flow across the boundary of an expansion region. A flow into a region contains a collection that is broken into its individual elements inside the region, which is executed once per element. A flow out of a region combines individual elements into a collection for use outside the region.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="regionAsOutput" type="uml:ExpansionRegion">
            <xsd:annotation>
              <xsd:documentation>The expansion region for which the node is an output.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="regionAsInput" type="uml:ExpansionRegion">
            <xsd:annotation>
              <xsd:documentation>The expansion region for which the node is an input.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="regionAsOutput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The expansion region for which the node is an output.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="regionAsInput" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The expansion region for which the node is an input.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExpansionNode" type="uml:ExpansionNode">
    <xsd:annotation>
      <xsd:documentation>An expansion node is an object node used to indicate a flow across the boundary of an expansion region. A flow into a region contains a collection that is broken into its individual elements inside the region, which is executed once per element. A flow out of a region combines individual elements into a collection for use outside the region.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExpansionRegion">
    <xsd:annotation>
      <xsd:documentation>An expansion region is a structured activity region that executes multiple times corresponding to elements of an input collection.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="inputElement" type="uml:ExpansionNode">
            <xsd:annotation>
              <xsd:documentation>An object node that holds a separate element of the input collection during each of the multiple executions of the region.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="outputElement" type="uml:ExpansionNode">
            <xsd:annotation>
              <xsd:documentation>An object node that accepts a separate element of the output collection during each of the multiple executions of the region. The values are formed into a collection that is available when the execution of the region is complete.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="mode" type="uml:ExpansionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>The way in which the executions interact:
parallel: all interactions are independent
iterative: the interactions occur in order of the elements
stream: a stream of values flows into a single execution
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inputElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An object node that holds a separate element of the input collection during each of the multiple executions of the region.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="outputElement" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>An object node that accepts a separate element of the output collection during each of the multiple executions of the region. The values are formed into a collection that is available when the execution of the region is complete.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ExpansionRegion" type="uml:ExpansionRegion">
    <xsd:annotation>
      <xsd:documentation>An expansion region is a structured activity region that executes multiple times corresponding to elements of an input collection.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProtocolTransition">
    <xsd:annotation>
      <xsd:documentation>A protocol transition specifies a legal transition for an operation. Transitions of protocol state machines have the following information: a pre condition (guard), on trigger, and a post condition. Every protocol transition is associated to zero or one operation (referred BehavioralFeature) that belongs to the context classifier of the protocol state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Transition">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="postCondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies the post condition of the transition which is the condition that should be obtained once the transition is triggered. This post condition is part of the post condition of the operation connected to the transition.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="preCondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies the precondition of the transition. It specifies the condition that should be verified before triggering the transition. This guard condition added to the source state will be evaluated as part of the precondition of the operation referred by the transition if any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="postCondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the post condition of the transition which is the condition that should be obtained once the transition is triggered. This post condition is part of the post condition of the operation connected to the transition.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preCondition" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Specifies the precondition of the transition. It specifies the condition that should be verified before triggering the transition. This guard condition added to the source state will be evaluated as part of the precondition of the operation referred by the transition if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProtocolTransition" type="uml:ProtocolTransition">
    <xsd:annotation>
      <xsd:documentation>A protocol transition specifies a legal transition for an operation. Transitions of protocol state machines have the following information: a pre condition (guard), on trigger, and a post condition. Every protocol transition is associated to zero or one operation (referred BehavioralFeature) that belongs to the context classifier of the protocol state machine.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AssociationClass">
    <xsd:annotation>
      <xsd:documentation>A model element that has both association and class properties. An AssociationClass can be seen as an association that also has class properties, or as a class that also has association properties. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not to any of the classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memberEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="navigableOwnedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ownedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="isDerived" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the association is derived from other model elements such as other associations or constraints.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="memberEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigableOwnedEnd" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AssociationClass" type="uml:AssociationClass">
    <xsd:annotation>
      <xsd:documentation>A model element that has both association and class properties. An AssociationClass can be seen as an association that also has class properties, or as a class that also has association properties. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not to any of the classifiers.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>
