<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://schema.omg.org/spec/UML/2.1/uml.xml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="uml" ecore:package="L2" targetNamespace="http://schema.omg.org/spec/UML/2.1/uml.xml">
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="../../../plugin/org.eclipse.emf.ecore/model/Ecore.xsd"/>
  <xsd:element ecore:ignore="true" name="Comment" type="uml:Comment"/>
  <xsd:element ecore:ignore="true" name="Element" type="uml:Element"/>
  <xsd:element ecore:ignore="true" name="DirectedRelationship" type="uml:DirectedRelationship"/>
  <xsd:element ecore:ignore="true" name="Relationship" type="uml:Relationship"/>
  <xsd:element ecore:ignore="true" name="LiteralSpecification" type="uml:LiteralSpecification"/>
  <xsd:element ecore:ignore="true" name="ValueSpecification" type="uml:ValueSpecification"/>
  <xsd:element ecore:ignore="true" name="TypedElement" type="uml:TypedElement"/>
  <xsd:element ecore:ignore="true" name="NamedElement" type="uml:NamedElement"/>
  <xsd:element ecore:ignore="true" name="Dependency" type="uml:Dependency"/>
  <xsd:element ecore:ignore="true" name="PackageableElement" type="uml:PackageableElement"/>
  <xsd:element ecore:ignore="true" name="Namespace" type="uml:Namespace"/>
  <xsd:element ecore:ignore="true" name="ElementImport" type="uml:ElementImport"/>
  <xsd:element ecore:ignore="true" name="PackageImport" type="uml:PackageImport"/>
  <xsd:element ecore:ignore="true" name="Package" type="uml:Package"/>
  <xsd:element ecore:ignore="true" name="PackageMerge" type="uml:PackageMerge"/>
  <xsd:element ecore:ignore="true" name="Type" type="uml:Type"/>
  <xsd:element ecore:ignore="true" name="ProfileApplication" type="uml:ProfileApplication"/>
  <xsd:element ecore:ignore="true" name="Profile" type="uml:Profile"/>
  <xsd:element ecore:ignore="true" name="Stereotype" type="uml:Stereotype"/>
  <xsd:element ecore:ignore="true" name="Class" type="uml:Class"/>
  <xsd:element ecore:ignore="true" name="BehavioredClassifier" type="uml:BehavioredClassifier"/>
  <xsd:element ecore:ignore="true" name="Classifier" type="uml:Classifier"/>
  <xsd:element ecore:ignore="true" name="RedefinableElement" type="uml:RedefinableElement"/>
  <xsd:element ecore:ignore="true" name="Generalization" type="uml:Generalization"/>
  <xsd:element ecore:ignore="true" name="Feature" type="uml:Feature"/>
  <xsd:element ecore:ignore="true" name="Substitution" type="uml:Substitution"/>
  <xsd:element ecore:ignore="true" name="Realization" type="uml:Realization"/>
  <xsd:element ecore:ignore="true" name="Abstraction" type="uml:Abstraction"/>
  <xsd:element ecore:ignore="true" name="OpaqueExpression" type="uml:OpaqueExpression"/>
  <xsd:element ecore:ignore="true" name="Parameter" type="uml:Parameter"/>
  <xsd:element ecore:ignore="true" name="MultiplicityElement" type="uml:MultiplicityElement"/>
  <xsd:element ecore:ignore="true" name="Operation" type="uml:Operation"/>
  <xsd:element ecore:ignore="true" name="BehavioralFeature" type="uml:BehavioralFeature"/>
  <xsd:element ecore:ignore="true" name="Behavior" type="uml:Behavior"/>
  <xsd:element ecore:ignore="true" name="Constraint" type="uml:Constraint"/>
  <xsd:element ecore:ignore="true" name="DataType" type="uml:DataType"/>
  <xsd:element ecore:ignore="true" name="Property" type="uml:Property"/>
  <xsd:element ecore:ignore="true" name="ConnectableElement" type="uml:ConnectableElement"/>
  <xsd:element ecore:ignore="true" name="ConnectorEnd" type="uml:ConnectorEnd"/>
  <xsd:element ecore:ignore="true" name="StructuralFeature" type="uml:StructuralFeature"/>
  <xsd:element ecore:ignore="true" name="DeploymentTarget" type="uml:DeploymentTarget"/>
  <xsd:element ecore:ignore="true" name="Deployment" type="uml:Deployment"/>
  <xsd:element ecore:ignore="true" name="DeployedArtifact" type="uml:DeployedArtifact"/>
  <xsd:element ecore:ignore="true" name="Association" type="uml:Association"/>
  <xsd:element ecore:ignore="true" name="Interface" type="uml:Interface"/>
  <xsd:element ecore:ignore="true" name="Reception" type="uml:Reception"/>
  <xsd:element ecore:ignore="true" name="Signal" type="uml:Signal"/>
  <xsd:element ecore:ignore="true" name="UseCase" type="uml:UseCase"/>
  <xsd:element ecore:ignore="true" name="Include" type="uml:Include"/>
  <xsd:element ecore:ignore="true" name="Extend" type="uml:Extend"/>
  <xsd:element ecore:ignore="true" name="ExtensionPoint" type="uml:ExtensionPoint"/>
  <xsd:element ecore:ignore="true" name="InterfaceRealization" type="uml:InterfaceRealization"/>
  <xsd:element ecore:ignore="true" name="Trigger" type="uml:Trigger"/>
  <xsd:element ecore:ignore="true" name="Event" type="uml:Event"/>
  <xsd:element ecore:ignore="true" name="Port" type="uml:Port"/>
  <xsd:element ecore:ignore="true" name="EncapsulatedClassifier" type="uml:EncapsulatedClassifier"/>
  <xsd:element ecore:ignore="true" name="StructuredClassifier" type="uml:StructuredClassifier"/>
  <xsd:element ecore:ignore="true" name="Connector" type="uml:Connector"/>
  <xsd:element ecore:ignore="true" name="Extension" type="uml:Extension"/>
  <xsd:element ecore:ignore="true" name="ExtensionEnd" type="uml:ExtensionEnd"/>
  <xsd:element ecore:ignore="true" name="Image" type="uml:Image"/>
  <xsd:element ecore:ignore="true" name="LiteralInteger" type="uml:LiteralInteger"/>
  <xsd:element ecore:ignore="true" name="LiteralString" type="uml:LiteralString"/>
  <xsd:element ecore:ignore="true" name="LiteralBoolean" type="uml:LiteralBoolean"/>
  <xsd:element ecore:ignore="true" name="LiteralNull" type="uml:LiteralNull"/>
  <xsd:element ecore:ignore="true" name="Slot" type="uml:Slot"/>
  <xsd:element ecore:ignore="true" name="InstanceSpecification" type="uml:InstanceSpecification"/>
  <xsd:element ecore:ignore="true" name="Enumeration" type="uml:Enumeration"/>
  <xsd:element ecore:ignore="true" name="EnumerationLiteral" type="uml:EnumerationLiteral"/>
  <xsd:element ecore:ignore="true" name="PrimitiveType" type="uml:PrimitiveType"/>
  <xsd:element ecore:ignore="true" name="InstanceValue" type="uml:InstanceValue"/>
  <xsd:element ecore:ignore="true" name="LiteralUnlimitedNatural" type="uml:LiteralUnlimitedNatural"/>
  <xsd:element ecore:ignore="true" name="Expression" type="uml:Expression"/>
  <xsd:element ecore:ignore="true" name="OpaqueBehavior" type="uml:OpaqueBehavior"/>
  <xsd:element ecore:ignore="true" name="FunctionBehavior" type="uml:FunctionBehavior"/>
  <xsd:element ecore:ignore="true" name="OpaqueAction" type="uml:OpaqueAction"/>
  <xsd:element ecore:ignore="true" name="Action" type="uml:Action"/>
  <xsd:element ecore:ignore="true" name="ExecutableNode" type="uml:ExecutableNode"/>
  <xsd:element ecore:ignore="true" name="ActivityNode" type="uml:ActivityNode"/>
  <xsd:element ecore:ignore="true" name="ActivityEdge" type="uml:ActivityEdge"/>
  <xsd:element ecore:ignore="true" name="Activity" type="uml:Activity"/>
  <xsd:element ecore:ignore="true" name="ActivityPartition" type="uml:ActivityPartition"/>
  <xsd:element ecore:ignore="true" name="ActivityGroup" type="uml:ActivityGroup"/>
  <xsd:element ecore:ignore="true" name="StructuredActivityNode" type="uml:StructuredActivityNode"/>
  <xsd:element ecore:ignore="true" name="Variable" type="uml:Variable"/>
  <xsd:element ecore:ignore="true" name="OutputPin" type="uml:OutputPin"/>
  <xsd:element ecore:ignore="true" name="Pin" type="uml:Pin"/>
  <xsd:element ecore:ignore="true" name="ObjectNode" type="uml:ObjectNode"/>
  <xsd:element ecore:ignore="true" name="InputPin" type="uml:InputPin"/>
  <xsd:element ecore:ignore="true" name="CallAction" type="uml:CallAction"/>
  <xsd:element ecore:ignore="true" name="InvocationAction" type="uml:InvocationAction"/>
  <xsd:element ecore:ignore="true" name="SendSignalAction" type="uml:SendSignalAction"/>
  <xsd:element ecore:ignore="true" name="CallOperationAction" type="uml:CallOperationAction"/>
  <xsd:element ecore:ignore="true" name="CallBehaviorAction" type="uml:CallBehaviorAction"/>
  <xsd:element ecore:ignore="true" name="ControlNode" type="uml:ControlNode"/>
  <xsd:element ecore:ignore="true" name="ControlFlow" type="uml:ControlFlow"/>
  <xsd:element ecore:ignore="true" name="ObjectFlow" type="uml:ObjectFlow"/>
  <xsd:element ecore:ignore="true" name="InitialNode" type="uml:InitialNode"/>
  <xsd:element ecore:ignore="true" name="ActivityParameterNode" type="uml:ActivityParameterNode"/>
  <xsd:element ecore:ignore="true" name="ValuePin" type="uml:ValuePin"/>
  <xsd:element ecore:ignore="true" name="Usage" type="uml:Usage"/>
  <xsd:element ecore:ignore="true" name="Message" type="uml:Message"/>
  <xsd:element ecore:ignore="true" name="MessageEnd" type="uml:MessageEnd"/>
  <xsd:element ecore:ignore="true" name="Interaction" type="uml:Interaction"/>
  <xsd:element ecore:ignore="true" name="InteractionFragment" type="uml:InteractionFragment"/>
  <xsd:element ecore:ignore="true" name="Lifeline" type="uml:Lifeline"/>
  <xsd:element ecore:ignore="true" name="PartDecomposition" type="uml:PartDecomposition"/>
  <xsd:element ecore:ignore="true" name="InteractionUse" type="uml:InteractionUse"/>
  <xsd:element ecore:ignore="true" name="Gate" type="uml:Gate"/>
  <xsd:element ecore:ignore="true" name="GeneralOrdering" type="uml:GeneralOrdering"/>
  <xsd:element ecore:ignore="true" name="OccurrenceSpecification" type="uml:OccurrenceSpecification"/>
  <xsd:element ecore:ignore="true" name="InteractionOperand" type="uml:InteractionOperand"/>
  <xsd:element ecore:ignore="true" name="InteractionConstraint" type="uml:InteractionConstraint"/>
  <xsd:element ecore:ignore="true" name="ExecutionSpecification" type="uml:ExecutionSpecification"/>
  <xsd:element ecore:ignore="true" name="StateInvariant" type="uml:StateInvariant"/>
  <xsd:element ecore:ignore="true" name="ActionExecutionSpecification" type="uml:ActionExecutionSpecification"/>
  <xsd:element ecore:ignore="true" name="BehaviorExecutionSpecification" type="uml:BehaviorExecutionSpecification"/>
  <xsd:element ecore:ignore="true" name="ExecutionEvent" type="uml:ExecutionEvent"/>
  <xsd:element ecore:ignore="true" name="CreationEvent" type="uml:CreationEvent"/>
  <xsd:element ecore:ignore="true" name="DestructionEvent" type="uml:DestructionEvent"/>
  <xsd:element ecore:ignore="true" name="SendOperationEvent" type="uml:SendOperationEvent"/>
  <xsd:element ecore:ignore="true" name="MessageEvent" type="uml:MessageEvent"/>
  <xsd:element ecore:ignore="true" name="SendSignalEvent" type="uml:SendSignalEvent"/>
  <xsd:element ecore:ignore="true" name="MessageOccurrenceSpecification" type="uml:MessageOccurrenceSpecification"/>
  <xsd:element ecore:ignore="true" name="ExecutionOccurrenceSpecification" type="uml:ExecutionOccurrenceSpecification"/>
  <xsd:element ecore:ignore="true" name="ReceiveOperationEvent" type="uml:ReceiveOperationEvent"/>
  <xsd:element ecore:ignore="true" name="ReceiveSignalEvent" type="uml:ReceiveSignalEvent"/>
  <xsd:element ecore:ignore="true" name="Actor" type="uml:Actor"/>
  <xsd:element ecore:ignore="true" name="CallEvent" type="uml:CallEvent"/>
  <xsd:element ecore:ignore="true" name="ChangeEvent" type="uml:ChangeEvent"/>
  <xsd:element ecore:ignore="true" name="SignalEvent" type="uml:SignalEvent"/>
  <xsd:element ecore:ignore="true" name="AnyReceiveEvent" type="uml:AnyReceiveEvent"/>
  <xsd:element ecore:ignore="true" name="ForkNode" type="uml:ForkNode"/>
  <xsd:element ecore:ignore="true" name="FlowFinalNode" type="uml:FlowFinalNode"/>
  <xsd:element ecore:ignore="true" name="FinalNode" type="uml:FinalNode"/>
  <xsd:element ecore:ignore="true" name="CentralBufferNode" type="uml:CentralBufferNode"/>
  <xsd:element ecore:ignore="true" name="MergeNode" type="uml:MergeNode"/>
  <xsd:element ecore:ignore="true" name="DecisionNode" type="uml:DecisionNode"/>
  <xsd:element ecore:ignore="true" name="ActivityFinalNode" type="uml:ActivityFinalNode"/>
  <xsd:element ecore:ignore="true" name="JoinNode" type="uml:JoinNode"/>
  <xsd:element ecore:ignore="true" name="Component" type="uml:Component"/>
  <xsd:element ecore:ignore="true" name="ComponentRealization" type="uml:ComponentRealization"/>
  <xsd:element ecore:ignore="true" name="Manifestation" type="uml:Manifestation"/>
  <xsd:element ecore:ignore="true" name="Node" type="uml:Node"/>
  <xsd:element ecore:ignore="true" name="Device" type="uml:Device"/>
  <xsd:element ecore:ignore="true" name="ExecutionEnvironment" type="uml:ExecutionEnvironment"/>
  <xsd:element ecore:ignore="true" name="CommunicationPath" type="uml:CommunicationPath"/>
  <xsd:element ecore:ignore="true" name="Artifact" type="uml:Artifact"/>
  <xsd:element ecore:ignore="true" name="CombinedFragment" type="uml:CombinedFragment"/>
  <xsd:element ecore:ignore="true" name="Continuation" type="uml:Continuation"/>
  <xsd:element ecore:ignore="true" name="ConsiderIgnoreFragment" type="uml:ConsiderIgnoreFragment"/>
  <xsd:element ecore:ignore="true" name="CreateObjectAction" type="uml:CreateObjectAction"/>
  <xsd:element ecore:ignore="true" name="DestroyObjectAction" type="uml:DestroyObjectAction"/>
  <xsd:element ecore:ignore="true" name="TestIdentityAction" type="uml:TestIdentityAction"/>
  <xsd:element ecore:ignore="true" name="ReadSelfAction" type="uml:ReadSelfAction"/>
  <xsd:element ecore:ignore="true" name="StructuralFeatureAction" type="uml:StructuralFeatureAction"/>
  <xsd:element ecore:ignore="true" name="ReadStructuralFeatureAction" type="uml:ReadStructuralFeatureAction"/>
  <xsd:element ecore:ignore="true" name="WriteStructuralFeatureAction" type="uml:WriteStructuralFeatureAction"/>
  <xsd:element ecore:ignore="true" name="ClearStructuralFeatureAction" type="uml:ClearStructuralFeatureAction"/>
  <xsd:element ecore:ignore="true" name="RemoveStructuralFeatureValueAction" type="uml:RemoveStructuralFeatureValueAction"/>
  <xsd:element ecore:ignore="true" name="AddStructuralFeatureValueAction" type="uml:AddStructuralFeatureValueAction"/>
  <xsd:element ecore:ignore="true" name="LinkAction" type="uml:LinkAction"/>
  <xsd:element ecore:ignore="true" name="LinkEndData" type="uml:LinkEndData"/>
  <xsd:element ecore:ignore="true" name="ReadLinkAction" type="uml:ReadLinkAction"/>
  <xsd:element ecore:ignore="true" name="LinkEndCreationData" type="uml:LinkEndCreationData"/>
  <xsd:element ecore:ignore="true" name="CreateLinkAction" type="uml:CreateLinkAction"/>
  <xsd:element ecore:ignore="true" name="WriteLinkAction" type="uml:WriteLinkAction"/>
  <xsd:element ecore:ignore="true" name="DestroyLinkAction" type="uml:DestroyLinkAction"/>
  <xsd:element ecore:ignore="true" name="LinkEndDestructionData" type="uml:LinkEndDestructionData"/>
  <xsd:element ecore:ignore="true" name="ClearAssociationAction" type="uml:ClearAssociationAction"/>
  <xsd:element ecore:ignore="true" name="BroadcastSignalAction" type="uml:BroadcastSignalAction"/>
  <xsd:element ecore:ignore="true" name="SendObjectAction" type="uml:SendObjectAction"/>
  <xsd:element ecore:ignore="true" name="ValueSpecificationAction" type="uml:ValueSpecificationAction"/>
  <xsd:element ecore:ignore="true" name="TimeExpression" type="uml:TimeExpression"/>
  <xsd:element ecore:ignore="true" name="Observation" type="uml:Observation"/>
  <xsd:element ecore:ignore="true" name="Duration" type="uml:Duration"/>
  <xsd:element ecore:ignore="true" name="DurationInterval" type="uml:DurationInterval"/>
  <xsd:element ecore:ignore="true" name="Interval" type="uml:Interval"/>
  <xsd:element ecore:ignore="true" name="TimeConstraint" type="uml:TimeConstraint"/>
  <xsd:element ecore:ignore="true" name="IntervalConstraint" type="uml:IntervalConstraint"/>
  <xsd:element ecore:ignore="true" name="TimeInterval" type="uml:TimeInterval"/>
  <xsd:element ecore:ignore="true" name="DurationConstraint" type="uml:DurationConstraint"/>
  <xsd:element ecore:ignore="true" name="TimeObservation" type="uml:TimeObservation"/>
  <xsd:element ecore:ignore="true" name="DurationObservation" type="uml:DurationObservation"/>
  <xsd:element ecore:ignore="true" name="StateMachine" type="uml:StateMachine"/>
  <xsd:element ecore:ignore="true" name="Region" type="uml:Region"/>
  <xsd:element ecore:ignore="true" name="Vertex" type="uml:Vertex"/>
  <xsd:element ecore:ignore="true" name="Transition" type="uml:Transition"/>
  <xsd:element ecore:ignore="true" name="State" type="uml:State"/>
  <xsd:element ecore:ignore="true" name="ConnectionPointReference" type="uml:ConnectionPointReference"/>
  <xsd:element ecore:ignore="true" name="Pseudostate" type="uml:Pseudostate"/>
  <xsd:element ecore:ignore="true" name="FinalState" type="uml:FinalState"/>
  <xsd:element ecore:ignore="true" name="TimeEvent" type="uml:TimeEvent"/>
  <xsd:element ecore:ignore="true" name="ConditionalNode" type="uml:ConditionalNode"/>
  <xsd:element ecore:ignore="true" name="Clause" type="uml:Clause"/>
  <xsd:element ecore:ignore="true" name="LoopNode" type="uml:LoopNode"/>
  <xsd:element ecore:ignore="true" name="SequenceNode" type="uml:SequenceNode"/>
  <xsd:element ecore:ignore="true" name="VariableAction" type="uml:VariableAction"/>
  <xsd:element ecore:ignore="true" name="ReadVariableAction" type="uml:ReadVariableAction"/>
  <xsd:element ecore:ignore="true" name="WriteVariableAction" type="uml:WriteVariableAction"/>
  <xsd:element ecore:ignore="true" name="ClearVariableAction" type="uml:ClearVariableAction"/>
  <xsd:element ecore:ignore="true" name="AddVariableValueAction" type="uml:AddVariableValueAction"/>
  <xsd:element ecore:ignore="true" name="RemoveVariableValueAction" type="uml:RemoveVariableValueAction"/>
  <xsd:element ecore:ignore="true" name="RaiseExceptionAction" type="uml:RaiseExceptionAction"/>
  <xsd:element ecore:ignore="true" name="ActionInputPin" type="uml:ActionInputPin"/>
  <xsd:simpleType ecore:instanceClass="int" name="Integer">
    <xsd:annotation>
      <xsd:documentation>An integer is a primitive type representing integer values.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:simpleType ecore:instanceClass="boolean" name="Boolean">
    <xsd:annotation>
      <xsd:documentation>A Boolean type is used for logical expression, consisting of the predefined values true and false.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:simpleType ecore:instanceClass="java.lang.String" name="String">
    <xsd:annotation>
      <xsd:documentation>A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:simpleType ecore:instanceClass="int" name="UnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>An unlimited natural is a primitive type representing unlimited natural values.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction/>
  </xsd:simpleType>
  <xsd:complexType name="Comment">
    <xsd:annotation>
      <xsd:documentation>A comment is a textual annotation that can be attached to a set of elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="body" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Specifies a string that is the comment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Element" name="annotatedElement">
          <xsd:annotation>
            <xsd:documentation>References the Element(s) being commented.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Element">
    <xsd:annotation>
      <xsd:documentation>An element is a constituent of a model. As such, it has the capability of owning other elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedComment" type="uml:Comment">
        <xsd:annotation>
          <xsd:documentation>The Comments owned by this element.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="owner" ecore:ordered="false" ecore:reference="uml:Element" ecore:transient="true" ecore:volatile="true" name="ownedElement">
      <xsd:annotation>
        <xsd:documentation>The Elements owned by this element.</xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType>
        <xsd:list itemType="xsd:anyURI"/>
      </xsd:simpleType>
    </xsd:attribute>
    <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="ownedElement" ecore:reference="uml:Element" ecore:transient="true" ecore:volatile="true" name="owner" type="xsd:anyURI">
      <xsd:annotation>
        <xsd:documentation>The Element that owns this element.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="DirectedRelationship">
    <xsd:annotation>
      <xsd:documentation>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Relationship">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:ordered="false" ecore:reference="uml:Element" ecore:transient="true" ecore:volatile="true" name="source">
          <xsd:annotation>
            <xsd:documentation>Specifies the sources of the DirectedRelationship.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:ordered="false" ecore:reference="uml:Element" ecore:transient="true" ecore:volatile="true" name="target">
          <xsd:annotation>
            <xsd:documentation>Specifies the targets of the DirectedRelationship.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Relationship">
    <xsd:annotation>
      <xsd:documentation>Relationship is an abstract concept that specifies some kind of relationship between elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:ordered="false" ecore:reference="uml:Element" ecore:transient="true" ecore:volatile="true" name="relatedElement">
          <xsd:annotation>
            <xsd:documentation>Specifies the elements related by the Relationship.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="LiteralSpecification">
    <xsd:annotation>
      <xsd:documentation>A literal specification identifies a literal constant being modeled.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="uml:PackageableElement" name="ValueSpecification">
    <xsd:annotation>
      <xsd:documentation>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="TypedElement">
    <xsd:annotation>
      <xsd:documentation>A typed element is a kind of named element that represents an element with a type.
A typed element has a type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:reference="uml:Type" name="type" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
The type of the TypedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="NamedElement">
    <xsd:annotation>
      <xsd:documentation>A named element is an element in a model that may have a name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:unsettable="true" name="name" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>The name of the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="visibility" type="uml:VisibilityKind">
          <xsd:annotation>
            <xsd:documentation>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:transient="true" ecore:volatile="true" name="qualifiedName" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="client" ecore:ordered="false" ecore:reference="uml:Dependency" name="clientDependency">
          <xsd:annotation>
            <xsd:documentation>Indicates the dependencies that reference the client.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="ownedMember" ecore:reference="uml:Namespace" ecore:transient="true" ecore:volatile="true" name="namespace" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="VisibilityKind">
    <xsd:annotation>
      <xsd:documentation>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="public"/>
      <xsd:enumeration value="private"/>
      <xsd:enumeration value="protected"/>
      <xsd:enumeration value="package"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType ecore:implements="uml:DirectedRelationship" name="Dependency">
    <xsd:annotation>
      <xsd:documentation>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:NamedElement" name="supplier" use="required">
          <xsd:annotation>
            <xsd:documentation>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="clientDependency" ecore:ordered="false" ecore:reference="uml:NamedElement" name="client" use="required">
          <xsd:annotation>
            <xsd:documentation>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="PackageableElement">
    <xsd:annotation>
      <xsd:documentation>A packageable element indicates a named element that may be owned directly by a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Namespace">
    <xsd:annotation>
      <xsd:documentation>A namespace is an element in a model that contains a set of named elements that can be identified by name.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:opposite="importingNamespace" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="elementImport" type="uml:ElementImport">
            <xsd:annotation>
              <xsd:documentation>References the ElementImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="importingNamespace" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="packageImport" type="uml:PackageImport">
            <xsd:annotation>
              <xsd:documentation>References the PackageImports owned by the Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="context" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedRule" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies a set of Constraints owned by this Namespace.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:NamedElement" ecore:transient="true" ecore:volatile="true" name="member">
          <xsd:annotation>
            <xsd:documentation>A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:PackageableElement" ecore:transient="true" ecore:volatile="true" name="importedMember">
          <xsd:annotation>
            <xsd:documentation>References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="namespace" ecore:ordered="false" ecore:reference="uml:NamedElement" ecore:transient="true" ecore:volatile="true" name="ownedMember">
          <xsd:annotation>
            <xsd:documentation>A collection of NamedElements owned by the Namespace.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ElementImport">
    <xsd:annotation>
      <xsd:documentation>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:attribute ecore:default="public" ecore:unsettable="false" name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="true" name="alias" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:PackageableElement" name="importedElement" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the PackageableElement whose name is to be added to a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="elementImport" ecore:reference="uml:Namespace" name="importingNamespace" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports a PackageableElement from another Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PackageImport">
    <xsd:annotation>
      <xsd:documentation>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:attribute ecore:default="public" ecore:unsettable="false" name="visibility" type="uml:VisibilityKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Package" name="importedPackage" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the Package whose members are imported into a Namespace.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="packageImport" ecore:reference="uml:Namespace" name="importingNamespace" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the Namespace that imports the members from a Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:PackageableElement" name="Package">
    <xsd:annotation>
      <xsd:documentation>A package is used to group elements, and provides a namespace for the grouped elements.
A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:opposite="receivingPackage" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="packageMerge" type="uml:PackageMerge">
            <xsd:annotation>
              <xsd:documentation>References the PackageMerges that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="packagedElement" type="uml:PackageableElement">
            <xsd:annotation>
              <xsd:documentation>Specifies the packageable elements that are owned by this Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="applyingPackage" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="profileApplication" type="uml:ProfileApplication">
            <xsd:annotation>
              <xsd:documentation>References the ProfileApplications that indicate which profiles have been applied to the Package.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:derived="true" ecore:opposite="package" ecore:ordered="false" ecore:reference="uml:Type" ecore:transient="true" ecore:volatile="true" name="ownedType">
          <xsd:annotation>
            <xsd:documentation>References the packaged elements that are Types.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:opposite="nestingPackage" ecore:ordered="false" ecore:reference="uml:Package" ecore:transient="true" ecore:volatile="true" name="nestedPackage">
          <xsd:annotation>
            <xsd:documentation>References the packaged elements that are Packages.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:opposite="nestedPackage" ecore:reference="uml:Package" ecore:transient="true" ecore:volatile="true" name="nestingPackage" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Package that owns this Package.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PackageMerge">
    <xsd:annotation>
      <xsd:documentation>A package merge defines how the contents of one package are extended by the contents of another package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:attribute ecore:reference="uml:Package" name="mergedPackage" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the Package that is to be merged with the receiving package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="packageMerge" ecore:reference="uml:Package" name="receivingPackage" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the Package that is being extended with the contents of the merged package of the PackageMerge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Type">
    <xsd:annotation>
      <xsd:documentation>A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:attribute ecore:derived="true" ecore:opposite="ownedType" ecore:reference="uml:Package" ecore:transient="true" ecore:volatile="true" name="package" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the owning package of this classifier, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ProfileApplication">
    <xsd:annotation>
      <xsd:documentation>A profile application is used to show which profiles have been applied to a package.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:attribute ecore:reference="uml:Profile" name="appliedProfile" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the Profiles that are applied to a Package through this ProfileApplication.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isStrict" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="profileApplication" ecore:reference="uml:Package" name="applyingPackage" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The package that owns the profile application.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Profile">
    <xsd:annotation>
      <xsd:documentation>A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Package">
        <xsd:attribute ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Stereotype" ecore:transient="true" ecore:volatile="true" name="ownedStereotype">
          <xsd:annotation>
            <xsd:documentation>References the Stereotypes that are owned by the Profile.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ElementImport" name="metaclassReference">
          <xsd:annotation>
            <xsd:documentation>References a metaclass that may be extended.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:PackageImport" name="metamodelReference">
          <xsd:annotation>
            <xsd:documentation>References a package containing (directly or indirectly) metaclasses that may be extended.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Stereotype">
    <xsd:annotation>
      <xsd:documentation>A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="icon" type="uml:Image">
            <xsd:annotation>
              <xsd:documentation>Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:BehavioredClassifier" name="Class">
    <xsd:annotation>
      <xsd:documentation>A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.
A class has the capability to have an internal structure and ports.
Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:EncapsulatedClassifier">
        <xsd:sequence>
          <xsd:element ecore:opposite="class" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects of this class are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Class" ecore:transient="true" ecore:volatile="true" name="superClass">
          <xsd:annotation>
            <xsd:documentation>This gives the superclasses of a class.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isActive" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="metaclass" ecore:ordered="false" ecore:reference="uml:Extension" ecore:transient="true" ecore:volatile="true" name="extension">
          <xsd:annotation>
            <xsd:documentation>References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="BehavioredClassifier">
    <xsd:annotation>
      <xsd:documentation>A behaviored classifier may have an interface realization.
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedBehavior" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>References behavior specifications owned by a classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="implementingClassifier" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="interfaceRealization" type="uml:InterfaceRealization">
            <xsd:annotation>
              <xsd:documentation>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>References Trigger descriptions owned by a Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Behavior" name="classifierBehavior" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>A behavior specification that specifies the behavior of the classifier itself.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="uml:RedefinableElement uml:Type" name="Classifier">
    <xsd:annotation>
      <xsd:documentation>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:opposite="specific" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="generalization" type="uml:Generalization">
            <xsd:annotation>
              <xsd:documentation>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="substitutingClassifier" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="substitution" type="uml:Substitution">
            <xsd:annotation>
              <xsd:documentation>References the substitutions that are owned by this Classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedUseCase" type="uml:UseCase">
            <xsd:annotation>
              <xsd:documentation>References the use cases owned by this classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isAbstract" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="featuringClassifier" ecore:ordered="false" ecore:reference="uml:Feature" ecore:transient="true" ecore:volatile="true" name="feature">
          <xsd:annotation>
            <xsd:documentation>Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.
Specifies each feature defined in the classifier.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:NamedElement" ecore:transient="true" ecore:volatile="true" name="inheritedMember">
          <xsd:annotation>
            <xsd:documentation>Specifies all elements inherited by this classifier from the general classifiers.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Classifier" name="redefinedClassifier">
          <xsd:annotation>
            <xsd:documentation>References the Classifiers that are redefined by this Classifier.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Classifier" ecore:transient="true" ecore:volatile="true" name="general">
          <xsd:annotation>
            <xsd:documentation>References the general classifier in the Generalization relationship.
Specifies the general Classifiers for this Classifier.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Property" ecore:transient="true" ecore:volatile="true" name="attribute">
          <xsd:annotation>
            <xsd:documentation>Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="subject" ecore:ordered="false" ecore:reference="uml:UseCase" name="useCase">
          <xsd:annotation>
            <xsd:documentation>The set of use cases for which this Classifier is the subject.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="RedefinableElement">
    <xsd:annotation>
      <xsd:documentation>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isLeaf" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:RedefinableElement" ecore:transient="true" ecore:volatile="true" name="redefinedElement">
          <xsd:annotation>
            <xsd:documentation>The redefinable element that is being redefined by this element.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Classifier" ecore:transient="true" ecore:volatile="true" name="redefinitionContext">
          <xsd:annotation>
            <xsd:documentation>References the contexts that this element may be redefined from.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Generalization">
    <xsd:annotation>
      <xsd:documentation>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DirectedRelationship">
        <xsd:attribute name="isSubstitutable" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Classifier" name="general" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the general classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="generalization" ecore:reference="uml:Classifier" name="specific" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the specializing classifier in the Generalization relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Feature">
    <xsd:annotation>
      <xsd:documentation>A feature declares a behavioral or structural characteristic of instances of classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isStatic" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="feature" ecore:ordered="false" ecore:reference="uml:Classifier" ecore:transient="true" ecore:volatile="true" name="featuringClassifier">
          <xsd:annotation>
            <xsd:documentation>The Classifiers that have this Feature as a feature.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Substitution">
    <xsd:annotation>
      <xsd:documentation>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:attribute ecore:reference="uml:Classifier" name="contract" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The contract with which the substituting classifier complies.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="substitution" ecore:reference="uml:Classifier" name="substitutingClassifier" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Realization">
    <xsd:annotation>
      <xsd:documentation>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Abstraction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Abstraction">
    <xsd:annotation>
      <xsd:documentation>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="mapping" type="uml:OpaqueExpression">
            <xsd:annotation>
              <xsd:documentation>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OpaqueExpression">
    <xsd:annotation>
      <xsd:documentation>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:sequence>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="body" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>The text of the expression, possibly in multiple languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="language" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:Parameter" ecore:transient="true" ecore:volatile="true" name="result" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Restricts an opaque expression to return exactly one return result. When the invocation of the opaque expression completes, a single set of values is returned to its owner. This association is derived from the single return result parameter of the associated behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Behavior" name="behavior" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the behavior of the opaque expression.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:TypedElement" name="Parameter">
    <xsd:annotation>
      <xsd:documentation>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="in" ecore:unsettable="false" name="direction" type="uml:ParameterDirectionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates whether a parameter is being sent into or out of a behavioral element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="true" ecore:volatile="true" name="default" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>Specifies a String that represents a value to be used when no argument is supplied for the Parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:reference="uml:Operation" ecore:transient="true" ecore:volatile="true" name="operation" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Operation owning this parameter.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="MultiplicityElement">
    <xsd:annotation>
      <xsd:documentation>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="upperValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the upper bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="lowerValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The specification of the lower bound for this multiplicity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isOrdered" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="isUnique" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="upper" type="uml:UnlimitedNatural">
          <xsd:annotation>
            <xsd:documentation>Specifies the upper bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="lower" type="uml:Integer">
          <xsd:annotation>
            <xsd:documentation>Specifies the lower bound of the multiplicity interval.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="ParameterDirectionKind">
    <xsd:annotation>
      <xsd:documentation>Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="in"/>
      <xsd:enumeration value="inout"/>
      <xsd:enumeration value="out"/>
      <xsd:enumeration value="return"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Operation">
    <xsd:annotation>
      <xsd:documentation>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isQuery" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isOrdered" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
Specifies whether the return parameter is ordered or not, if present.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isUnique" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
Specifies whether the return parameter is unique or not, if present.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="lower" type="uml:Integer">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
Specifies the lower multiplicity of the return parameter, if present.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="upper" type="uml:UnlimitedNatural">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
Specifies the upper multiplicity of the return parameter, if present.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedOperation" ecore:reference="uml:Class" name="class" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The class that owns the operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Constraint" name="precondition">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints on the state of the system when the Operation is invoked.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Constraint" name="postcondition">
          <xsd:annotation>
            <xsd:documentation>An optional set of Constraints specifying the state of the system when the Operation is completed.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Operation" name="redefinedOperation">
          <xsd:annotation>
            <xsd:documentation>References the Operations that are redefined by this Operation.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedOperation" ecore:reference="uml:DataType" name="datatype" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Constraint" name="bodyCondition" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>An optional Constraint on the result values of an invocation of this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:reference="uml:Type" ecore:transient="true" ecore:volatile="true" name="type" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>This information is derived from the return result for this Operation.
Specifies the return result of the operation, if present.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedOperation" ecore:reference="uml:Interface" name="interface" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Interface that owns this Operation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="uml:Feature" name="BehavioralFeature">
    <xsd:annotation>
      <xsd:documentation>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>Specifies the ordered set of formal parameters of this BehavioralFeature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isAbstract" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="specification" ecore:ordered="false" ecore:reference="uml:Behavior" name="method">
          <xsd:annotation>
            <xsd:documentation>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:default="sequential" ecore:unsettable="false" name="concurrency" type="uml:CallConcurrencyKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Type" name="raisedException">
          <xsd:annotation>
            <xsd:documentation>References the Types representing exceptions that may be raised during an invocation of this feature.
The signals that the behavioral feature raises as exceptions.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Behavior">
    <xsd:annotation>
      <xsd:documentation>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedParameter" type="uml:Parameter">
            <xsd:annotation>
              <xsd:documentation>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="precondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="postcondition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReentrant" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Behavior" name="redefinedBehavior">
          <xsd:annotation>
            <xsd:documentation>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:BehavioredClassifier" ecore:transient="true" ecore:volatile="true" name="context" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The classifier that is the context for the execution of the behavior. If the behavior is owned by a BehavioredClassifier, that classifier is the context. Otherwise, the context is the first BehavioredClassifier reached by following the chain of owner relationships. For example, following this algorithm, the context of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="method" ecore:reference="uml:BehavioralFeature" name="specification" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Constraint">
    <xsd:annotation>
      <xsd:documentation>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A condition that must be true when evaluated in order for the constraint to be satisfied.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Element" name="constrainedElement">
          <xsd:annotation>
            <xsd:documentation>The ordered set of Elements referenced by this Constraint.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedRule" ecore:reference="uml:Namespace" name="context" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the namespace that owns the NamedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="CallConcurrencyKind">
    <xsd:annotation>
      <xsd:documentation>CallConcurrencyKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="sequential"/>
      <xsd:enumeration value="guarded"/>
      <xsd:enumeration value="concurrent"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="DataType">
    <xsd:annotation>
      <xsd:documentation>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:opposite="datatype" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The Attributes owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="datatype" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations owned by the DataType.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:ConnectableElement uml:DeploymentTarget" name="Property">
    <xsd:annotation>
      <xsd:documentation>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property represents a set of instances that are owned by a containing classifier instance.
A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeature">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="defaultValue" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDerived" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If isDerived is true, the value of the attribute is derived from information elsewhere.
Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDerivedUnion" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:transient="true" ecore:unsettable="true" ecore:volatile="true" name="default" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>Specifies a String that represents a value to be used when no argument is supplied for the Property.
A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="none" ecore:unsettable="false" name="aggregation" type="uml:AggregationKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the kind of aggregation that applies to the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isComposite" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.
This is a derived value, indicating whether the aggregation of the Property is composite or not.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:reference="uml:Class" ecore:transient="true" ecore:volatile="true" name="class" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Class that owns the Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Property" name="redefinedProperty">
          <xsd:annotation>
            <xsd:documentation>References the properties that are redefined by this property.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedEnd" ecore:reference="uml:Association" name="owningAssociation" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the owning association of this property, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="memberEnd" ecore:reference="uml:Association" name="association" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the association of which this property is a member, if any.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:derived="true" ecore:reference="uml:Property" ecore:transient="true" ecore:volatile="true" name="opposite" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Property" name="subsettedProperty">
          <xsd:annotation>
            <xsd:documentation>References the properties of which this property is constrained to be a subset.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="ownedAttribute" ecore:reference="uml:DataType" name="datatype" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The DataType that owns this Property.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ConnectableElement">
    <xsd:annotation>
      <xsd:documentation>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:TypedElement">
        <xsd:attribute ecore:opposite="role" ecore:reference="uml:ConnectorEnd" name="end">
          <xsd:annotation>
            <xsd:documentation>Denotes a connector that attaches to this connectable element.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConnectorEnd">
    <xsd:annotation>
      <xsd:documentation>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:Property" ecore:transient="true" ecore:volatile="true" name="definingEnd" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Property" name="partWithPort" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="end" ecore:reference="uml:ConnectableElement" name="role" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="uml:MultiplicityElement uml:TypedElement" name="StructuralFeature">
    <xsd:annotation>
      <xsd:documentation>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReadOnly" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>States whether the feature's value may be modified by a client.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="DeploymentTarget">
    <xsd:annotation>
      <xsd:documentation>A deployment target is the location for a deployed artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:opposite="location" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="deployment" type="uml:Deployment">
            <xsd:annotation>
              <xsd:documentation>The set of Deployments for a DeploymentTarget.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:PackageableElement" ecore:transient="true" ecore:volatile="true" name="deployedElement">
          <xsd:annotation>
            <xsd:documentation>The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Deployment">
    <xsd:annotation>
      <xsd:documentation>A deployment is the allocation of an artifact or artifact instance to a deployment target.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency">
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:DeployedArtifact" name="deployedArtifact">
          <xsd:annotation>
            <xsd:documentation>The Artifacts that are deployed onto a Node. This association specializes the supplier association.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="deployment" ecore:reference="uml:DeploymentTarget" name="location" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The DeployedTarget which is the target of a Deployment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="DeployedArtifact">
    <xsd:annotation>
      <xsd:documentation>A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="AggregationKind">
    <xsd:annotation>
      <xsd:documentation>AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none"/>
      <xsd:enumeration value="shared"/>
      <xsd:enumeration value="composite"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType ecore:implements="uml:Relationship" name="Association">
    <xsd:annotation>
      <xsd:documentation>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:opposite="owningAssociation" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedEnd" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The ends that are owned by the association itself.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDerived" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the association is derived from other model elements such as other associations or constraints.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:reference="uml:Type" ecore:transient="true" ecore:volatile="true" name="endType">
          <xsd:annotation>
            <xsd:documentation>References the classifiers that are used as types of the ends of the association.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="association" ecore:reference="uml:Property" name="memberEnd" use="required">
          <xsd:annotation>
            <xsd:documentation>Each end represents participation of instances of the classifier connected to the end in links of the association.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:restriction>
              <xsd:simpleType>
                <xsd:list itemType="xsd:anyURI"/>
              </xsd:simpleType>
              <xsd:minLength value="2"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Property" name="navigableOwnedEnd">
          <xsd:annotation>
            <xsd:documentation>The navigable ends that are owned by the association itself.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Interface">
    <xsd:annotation>
      <xsd:documentation>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.
Interfaces may include receptions (in addition to operations).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes (i.e. the properties) owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="nestedClassifier" type="uml:Classifier">
            <xsd:annotation>
              <xsd:documentation>References all the Classifiers that are defined (nested) within the Class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedReception" type="uml:Reception">
            <xsd:annotation>
              <xsd:documentation>Receptions that objects providing this interface are willing to accept.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="interface" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The operations owned by the class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Interface" name="redefinedInterface">
          <xsd:annotation>
            <xsd:documentation>References all the Interfaces redefined by this Interface.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Reception">
    <xsd:annotation>
      <xsd:documentation>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioralFeature">
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The signal that this reception handles.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Signal">
    <xsd:annotation>
      <xsd:documentation>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes owned by the signal.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UseCase">
    <xsd:annotation>
      <xsd:documentation>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier">
        <xsd:sequence>
          <xsd:element ecore:opposite="includingCase" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="include" type="uml:Include">
            <xsd:annotation>
              <xsd:documentation>References the Include relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="extension" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="extend" type="uml:Extend">
            <xsd:annotation>
              <xsd:documentation>References the Extend relationships owned by this use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="useCase" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="extensionPoint" type="uml:ExtensionPoint">
            <xsd:annotation>
              <xsd:documentation>References the ExtensionPoints owned by the use case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="useCase" ecore:ordered="false" ecore:reference="uml:Classifier" name="subject">
          <xsd:annotation>
            <xsd:documentation>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:DirectedRelationship" name="Include">
    <xsd:annotation>
      <xsd:documentation>An include relationship defines that a use case contains the behavior defined in another use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:reference="uml:UseCase" name="addition" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the use case that is to be included.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="include" ecore:reference="uml:UseCase" name="includingCase" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the use case which will include the addition and owns the include relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:DirectedRelationship" name="Extend">
    <xsd:annotation>
      <xsd:documentation>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="condition" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:UseCase" name="extendedCase" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the use case that is being extended.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:ExtensionPoint" name="extensionLocation" use="required">
          <xsd:annotation>
            <xsd:documentation>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)
</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="extend" ecore:reference="uml:UseCase" name="extension" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the use case that represents the extension and owns the extend relationship.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ExtensionPoint">
    <xsd:annotation>
      <xsd:documentation>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:attribute ecore:opposite="extensionPoint" ecore:reference="uml:UseCase" name="useCase" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the use case that owns this extension point.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InterfaceRealization">
    <xsd:annotation>
      <xsd:documentation>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:attribute ecore:reference="uml:Interface" name="contract" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the Interface specifying the conformance contract.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="interfaceRealization" ecore:reference="uml:BehavioredClassifier" name="implementingClassifier" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Trigger">
    <xsd:annotation>
      <xsd:documentation>A trigger relates an event to a behavior that may affect an instance of the classifier.
A trigger specification may be qualified by the port on which the event occurred.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:reference="uml:Event" name="event" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The event that causes the trigger.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Port" name="port">
          <xsd:annotation>
            <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Event">
    <xsd:annotation>
      <xsd:documentation>An event is the specification of some occurrence that may potentially trigger effects by an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Port">
    <xsd:annotation>
      <xsd:documentation>A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Property">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isBehavior" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether requests arriving at this port are sent to the classifier behavior of this classifier. Such ports are referred to as behavior port. Any invocation of a behavioral feature targeted at a behavior port will be handled by the instance of the owning classifier itself, rather than by any instances that this classifier may contain.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="isService" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true indicates that this port is used to provide the published functionality of a classifier; if false, this port is used to implement the classifier but is not part of the essential externally-visible functionality of the classifier and can, therefore, be altered or deleted along with the internal implementation of the classifier and other properties that are considered part of its implementation.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Interface" ecore:transient="true" ecore:volatile="true" name="required">
          <xsd:annotation>
            <xsd:documentation>References the interfaces specifying the set of operations and receptions which the classifier expects its environment to handle. This association is derived as the set of interfaces required by the type of the port or its supertypes.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Port" name="redefinedPort">
          <xsd:annotation>
            <xsd:documentation>A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Interface" ecore:transient="true" ecore:volatile="true" name="provided">
          <xsd:annotation>
            <xsd:documentation>References the interfaces specifying the set of operations and receptions which the classifier offers to its environment, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived from the interfaces realized by the type of the port or by the type of the port, if the port was typed by an interface.
</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="EncapsulatedClassifier">
    <xsd:annotation>
      <xsd:documentation>A classifier has the ability to own ports as specific and type checked interaction points.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredClassifier">
        <xsd:attribute ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Port" ecore:transient="true" ecore:volatile="true" name="ownedPort">
          <xsd:annotation>
            <xsd:documentation>References a set of ports that an encapsulated classifier owns.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="StructuredClassifier">
    <xsd:annotation>
      <xsd:documentation>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>References the properties owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedConnector" type="uml:Connector">
            <xsd:annotation>
              <xsd:documentation>References the connectors owned by the classifier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Property" ecore:transient="true" ecore:volatile="true" name="part">
          <xsd:annotation>
            <xsd:documentation>References the properties specifying instances that the classifier owns by composition. This association is derived, selecting those owned properties where isComposite is true.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:ConnectableElement" ecore:transient="true" ecore:volatile="true" name="role">
          <xsd:annotation>
            <xsd:documentation>References the roles that instances may play in this classifier.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Connector">
    <xsd:annotation>
      <xsd:documentation>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.
A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the internal realization of that behavior by the component's parts. It represents the forwarding of signals (operation requests and events): a signal that arrives at a port that has a delegation connector to a part or to another port will be passed on to that target for handling.
An assembly connector is a connector between two components that defines that one component provides the services that another component requires. An assembly connector is a connector that is defined from a required interface or port to a provided interface or port.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Feature">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="2" name="end" type="uml:ConnectorEnd">
            <xsd:annotation>
              <xsd:documentation>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Association" name="type" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>An optional association that specifies the link corresponding to this connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Connector" name="redefinedConnector">
          <xsd:annotation>
            <xsd:documentation>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="kind" type="uml:ConnectorKind">
          <xsd:annotation>
            <xsd:documentation>Indicates the kind of connector.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Behavior" name="contract">
          <xsd:annotation>
            <xsd:documentation>The set of Behaviors that specify the valid interaction patterns across the connector.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="ConnectorKind">
    <xsd:annotation>
      <xsd:documentation>ConnectorKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="assembly"/>
      <xsd:enumeration value="delegation"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Extension">
    <xsd:annotation>
      <xsd:documentation>An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Association">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isRequired" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the multiplicity of the Property referenced by Extension::ownedEnd; a multiplicity of 1 means that isRequired is true, but otherwise it is false. Since the default multiplicity of an ExtensionEnd is 0..1, the default value of isRequired is false.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:opposite="extension" ecore:reference="uml:Class" ecore:transient="true" ecore:volatile="true" name="metaclass" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ExtensionEnd">
    <xsd:annotation>
      <xsd:documentation>An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Property"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Image">
    <xsd:annotation>
      <xsd:documentation>Physical definition of a graphical image.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:unsettable="true" name="content" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="true" name="location" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:unsettable="true" name="format" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>This indicates the format of the content - which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP.

In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example "SVG" could instead be expressed as "MIME: image/svg+xml".</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LiteralInteger">
    <xsd:annotation>
      <xsd:documentation>A literal integer is a specification of an integer value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute ecore:default="0" ecore:unsettable="false" name="value" type="uml:Integer" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Integer value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LiteralString">
    <xsd:annotation>
      <xsd:documentation>A literal string is a specification of a string value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute ecore:unsettable="true" name="value" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>The specified String value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LiteralBoolean">
    <xsd:annotation>
      <xsd:documentation>A literal Boolean is a specification of a Boolean value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="value" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified Boolean value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LiteralNull">
    <xsd:annotation>
      <xsd:documentation>A literal null specifies the lack of a value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Slot">
    <xsd:annotation>
      <xsd:documentation>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The value or values corresponding to the defining feature for the owning instance specification.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="slot" ecore:reference="uml:InstanceSpecification" name="owningInstance" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The instance specification that owns this slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:StructuralFeature" name="definingFeature" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The structural feature that specifies the values that may be held by the slot.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:DeployedArtifact uml:PackageableElement" name="InstanceSpecification">
    <xsd:annotation>
      <xsd:documentation>An instance specification is a model element that represents an instance in a modeled system.
An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DeploymentTarget">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="specification" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A specification of how to compute, derive, or construct the instance.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="owningInstance" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="slot" type="uml:Slot">
            <xsd:annotation>
              <xsd:documentation>A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Classifier" name="classifier">
          <xsd:annotation>
            <xsd:documentation>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Enumeration">
    <xsd:annotation>
      <xsd:documentation>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType">
        <xsd:sequence>
          <xsd:element ecore:opposite="enumeration" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedLiteral" type="uml:EnumerationLiteral">
            <xsd:annotation>
              <xsd:documentation>The ordered set of literals for this Enumeration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EnumerationLiteral">
    <xsd:annotation>
      <xsd:documentation>An enumeration literal is a user-defined data value for an enumeration.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InstanceSpecification">
        <xsd:attribute ecore:opposite="ownedLiteral" ecore:reference="uml:Enumeration" name="enumeration" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Enumeration that this EnumerationLiteral is a member of.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PrimitiveType">
    <xsd:annotation>
      <xsd:documentation>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InstanceValue">
    <xsd:annotation>
      <xsd:documentation>An instance value is a value specification that identifies an instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:attribute ecore:reference="uml:InstanceSpecification" name="instance" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The instance that is the specified value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LiteralUnlimitedNatural">
    <xsd:annotation>
      <xsd:documentation>A literal unlimited natural is a specification of an unlimited natural number.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LiteralSpecification">
        <xsd:attribute ecore:default="0" ecore:unsettable="false" name="value" type="uml:UnlimitedNatural" use="required">
          <xsd:annotation>
            <xsd:documentation>The specified UnlimitedNatural value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Expression">
    <xsd:annotation>
      <xsd:documentation>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="operand" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies a sequence of operands.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:unsettable="true" name="symbol" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>The symbol associated with the node in the expression tree.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OpaqueBehavior">
    <xsd:annotation>
      <xsd:documentation>An behavior with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:sequence>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="body" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Specifies the behavior in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="language" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use in the same order as the body strings.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FunctionBehavior">
    <xsd:annotation>
      <xsd:documentation>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OpaqueBehavior"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OpaqueAction">
    <xsd:annotation>
      <xsd:documentation>An action with implementation-specific semantics.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="body" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Specifies the action in one or more languages.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:unique="true" ecore:unsettable="true" maxOccurs="unbounded" minOccurs="0" name="language" nillable="true" type="uml:String">
            <xsd:annotation>
              <xsd:documentation>Languages the body strings use, in the same order as the body strings</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="inputValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Provides input to the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="outputValue" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Takes output from the action.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Action">
    <xsd:annotation>
      <xsd:documentation>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutableNode">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:OutputPin" ecore:transient="true" ecore:volatile="true" name="output">
          <xsd:annotation>
            <xsd:documentation>The ordered set of output pins connected to the Action. The action places its results onto pins in this set.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:InputPin" ecore:transient="true" ecore:volatile="true" name="input">
          <xsd:annotation>
            <xsd:documentation>The ordered set of input pins connected to the Action. These are among the total set of inputs.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:Classifier" ecore:transient="true" ecore:volatile="true" name="context" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The classifier that owns the behavior of which this action is a part.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ExecutableNode">
    <xsd:annotation>
      <xsd:documentation>An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ActivityNode">
    <xsd:annotation>
      <xsd:documentation>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:attribute ecore:opposite="source" ecore:ordered="false" ecore:reference="uml:ActivityEdge" name="outgoing">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as source.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="containedNode" ecore:ordered="false" ecore:reference="uml:ActivityGroup" ecore:transient="true" ecore:volatile="true" name="inGroup">
          <xsd:annotation>
            <xsd:documentation>Groups containing the node.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="node" ecore:ordered="false" ecore:reference="uml:ActivityPartition" name="inPartition">
          <xsd:annotation>
            <xsd:documentation>Partitions containing the node.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="node" ecore:reference="uml:StructuredActivityNode" name="inStructuredNode" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Structured activity node containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="node" ecore:reference="uml:Activity" name="activity" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Activity containing the node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="target" ecore:ordered="false" ecore:reference="uml:ActivityEdge" name="incoming">
          <xsd:annotation>
            <xsd:documentation>Edges that have the node as target.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ActivityNode" name="redefinedNode">
          <xsd:annotation>
            <xsd:documentation>Inherited nodes replaced by this node in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ActivityEdge">
    <xsd:annotation>
      <xsd:documentation>An activity edge is an abstract class for directed connections between two activity nodes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:RedefinableElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="guard" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specification evaluated at runtime to determine if the edge can be traversed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="edge" ecore:reference="uml:Activity" name="activity" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Activity containing the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="containedEdge" ecore:ordered="false" ecore:reference="uml:ActivityGroup" ecore:transient="true" ecore:volatile="true" name="inGroup">
          <xsd:annotation>
            <xsd:documentation>Groups containing the edge.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="edge" ecore:ordered="false" ecore:reference="uml:ActivityPartition" name="inPartition">
          <xsd:annotation>
            <xsd:documentation>Partitions containing the edge.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="incoming" ecore:reference="uml:ActivityNode" name="target" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Node to which tokens are put when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ActivityEdge" name="redefinedEdge">
          <xsd:annotation>
            <xsd:documentation>Inherited edges replaced by this edge in a specialization of the activity.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="outgoing" ecore:reference="uml:ActivityNode" name="source" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Node from which tokens are taken when they traverse the edge.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Activity">
    <xsd:annotation>
      <xsd:documentation>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:sequence>
          <xsd:element ecore:opposite="inActivity" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="group" type="uml:ActivityGroup">
            <xsd:annotation>
              <xsd:documentation>Top-level groups in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="activityScope" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="variable" type="uml:Variable">
            <xsd:annotation>
              <xsd:documentation>Top-level variables in the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="activity" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes coordinated by the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="activity" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="edge" type="uml:ActivityEdge">
            <xsd:annotation>
              <xsd:documentation>Edges expressing flow between nodes of the activity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReadOnly" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ActivityPartition" name="partition">
          <xsd:annotation>
            <xsd:documentation>Top-level partitions in the activity.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:StructuredActivityNode" ecore:transient="true" ecore:volatile="true" name="structuredNode">
          <xsd:annotation>
            <xsd:documentation>Top-level structured nodes in the activity.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:NamedElement" name="ActivityPartition">
    <xsd:annotation>
      <xsd:documentation>An activity partition is a kind of activity group for identifying actions that have some characteristic in common.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityGroup">
        <xsd:sequence>
          <xsd:element ecore:opposite="superPartition" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="subpartition" type="uml:ActivityPartition">
            <xsd:annotation>
              <xsd:documentation>Partitions immediately contained in the partition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDimension" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the partition groups other partitions along a dimension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isExternal" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Tells whether the partition represents an entity to which the partitioning structure does not apply.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="inPartition" ecore:ordered="false" ecore:reference="uml:ActivityEdge" name="edge">
          <xsd:annotation>
            <xsd:documentation>Edges immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="inPartition" ecore:ordered="false" ecore:reference="uml:ActivityNode" name="node">
          <xsd:annotation>
            <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="subpartition" ecore:reference="uml:ActivityPartition" name="superPartition" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Partition immediately containing the partition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Element" name="represents" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>An element constraining behaviors invoked by nodes in the partition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ActivityGroup">
    <xsd:annotation>
      <xsd:documentation>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="superGroup" ecore:ordered="false" ecore:reference="uml:ActivityGroup" ecore:transient="true" ecore:volatile="true" name="subgroup">
          <xsd:annotation>
            <xsd:documentation>Groups immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="subgroup" ecore:reference="uml:ActivityGroup" ecore:transient="true" ecore:volatile="true" name="superGroup" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Group immediately containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="inGroup" ecore:ordered="false" ecore:reference="uml:ActivityEdge" ecore:transient="true" ecore:volatile="true" name="containedEdge">
          <xsd:annotation>
            <xsd:documentation>Edges immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:opposite="inGroup" ecore:ordered="false" ecore:reference="uml:ActivityNode" ecore:transient="true" ecore:volatile="true" name="containedNode">
          <xsd:annotation>
            <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="group" ecore:reference="uml:Activity" name="inActivity" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Activity containing the group.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:Namespace uml:ActivityGroup" name="StructuredActivityNode">
    <xsd:annotation>
      <xsd:documentation>A structured activity node is an executable activity node that may have an expansion into subordinate nodes as an activity group. The subordinate nodes must belong to only one structured activity node, although they may be nested.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutableNode">
        <xsd:sequence>
          <xsd:element ecore:opposite="scope" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="variable" type="uml:Variable">
            <xsd:annotation>
              <xsd:documentation>A variable defined in the scope of the structured activity node. It has no value and may not be accessed</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="inStructuredNode" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="node" type="uml:ActivityNode">
            <xsd:annotation>
              <xsd:documentation>Nodes immediately contained in the group.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:TypedElement" name="Variable">
    <xsd:annotation>
      <xsd:documentation>Variables are elements for passing data between actions indirectly. A local variable stores values shared by the actions within a structured activity group but not accessible outside it. The output of an action may be written to a variable and read for the input to a subsequent action, which is effectively an indirect data flow path. Because there is no predefined relationship between actions that read and write variables, these actions must be sequenced by control flows to prevent race conditions that may occur between actions that read or write the same variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MultiplicityElement">
        <xsd:attribute ecore:opposite="variable" ecore:reference="uml:Activity" name="activityScope" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>An activity that owns the variable.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="variable" ecore:reference="uml:StructuredActivityNode" name="scope" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>A structured activity node that owns the variable.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OutputPin">
    <xsd:annotation>
      <xsd:documentation>An output pin is a pin that holds output values produced by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:MultiplicityElement" name="Pin">
    <xsd:annotation>
      <xsd:documentation>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:implements="uml:TypedElement" name="ObjectNode">
    <xsd:annotation>
      <xsd:documentation>An object node is an abstract activity node that is part of defining object flow in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InputPin">
    <xsd:annotation>
      <xsd:documentation>An input pin is a pin that holds input values to be consumed by an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Pin"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="CallAction">
    <xsd:annotation>
      <xsd:documentation>CallAction is an abstract class for actions that invoke behavior and receive return values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>A list of output pins where the results of performing the invocation are placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="isSynchronous" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the call is synchronous and the caller waits for completion of the invoked behavior.
If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="InvocationAction">
    <xsd:annotation>
      <xsd:documentation>InvocationAction is an abstract class for the various actions that invoke behavior.
In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="argument" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specification of the ordered set of argument values that appears during execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Port" name="onPort" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>A optional port of the receiver object on which the behavioral feature is invoked.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SendSignalAction">
    <xsd:annotation>
      <xsd:documentation>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the signal is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The type of signal transmitted to the target object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CallOperationAction">
    <xsd:annotation>
      <xsd:documentation>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Operation" name="operation" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The operation to be invoked by the action execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CallBehaviorAction">
    <xsd:annotation>
      <xsd:documentation>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CallAction">
        <xsd:attribute ecore:reference="uml:Behavior" name="behavior" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The invoked behavior. It must be capable of accepting and returning control.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ControlNode">
    <xsd:annotation>
      <xsd:documentation>A control node is an abstract activity node that coordinates flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ControlFlow">
    <xsd:annotation>
      <xsd:documentation>A control flow is an edge that starts an activity node after the previous one is finished.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ObjectFlow">
    <xsd:annotation>
      <xsd:documentation>An object flow is an activity edge that can have objects or data passing along it.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ActivityEdge"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InitialNode">
    <xsd:annotation>
      <xsd:documentation>An initial node is a control node at which flow starts when the activity is invoked.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ActivityParameterNode">
    <xsd:annotation>
      <xsd:documentation>An activity parameter node is an object node for inputs and outputs to activities.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode">
        <xsd:attribute ecore:reference="uml:Parameter" name="parameter" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The parameter the object node will be accepting or providing values for.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ValuePin">
    <xsd:annotation>
      <xsd:documentation>A value pin is an input pin that provides a value by evaluating a value specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InputPin">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Value that the pin will provide.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Usage">
    <xsd:annotation>
      <xsd:documentation>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Dependency"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Message">
    <xsd:annotation>
      <xsd:documentation>A message defines a particular communication between lifelines of an interaction.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="argument" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The arguments of the Message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="messageKind" type="uml:MessageKind">
          <xsd:annotation>
            <xsd:documentation>The derived kind of the Message (complete, lost, found or unknown)</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="synchCall" ecore:unsettable="false" name="messageSort" type="uml:MessageSort" use="required">
          <xsd:annotation>
            <xsd:documentation>The sort of communication reflected by the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:MessageEnd" name="receiveEvent" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Receiving of the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:MessageEnd" name="sendEvent" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Sending of the Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Connector" name="connector" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Connector on which this Message is sent.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="message" ecore:reference="uml:Interaction" name="interaction" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The enclosing Interaction owning the Message</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:reference="uml:NamedElement" ecore:transient="true" ecore:volatile="true" name="signature" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The definition of the type or signature of the Message (depending on its kind). The associated named element is derived from the message end that constitutes the sending or receiving message event. If both a sending event and a receiving message event are present, the signature is obtained from the sending event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="MessageKind">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="complete"/>
      <xsd:enumeration value="lost"/>
      <xsd:enumeration value="found"/>
      <xsd:enumeration value="unknown"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageSort">
    <xsd:annotation>
      <xsd:documentation>This is an enumerated type that identifies the type of communication action that was used to generate the message.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="synchCall"/>
      <xsd:enumeration value="asynchCall"/>
      <xsd:enumeration value="asynchSignal"/>
      <xsd:enumeration value="createMessage"/>
      <xsd:enumeration value="deleteMessage"/>
      <xsd:enumeration value="reply"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType abstract="true" name="MessageEnd">
    <xsd:annotation>
      <xsd:documentation>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:reference="uml:Message" name="message" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References a Message.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:InteractionFragment" name="Interaction">
    <xsd:annotation>
      <xsd:documentation>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:sequence>
          <xsd:element ecore:opposite="interaction" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="lifeline" type="uml:Lifeline">
            <xsd:annotation>
              <xsd:documentation>Specifies the participants in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="enclosingInteraction" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="fragment" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>The ordered set of fragments in the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="action" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>Actions owned by the Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="formalGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="interaction" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="message" type="uml:Message">
            <xsd:annotation>
              <xsd:documentation>The Messages contained in this Interaction.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="InteractionFragment">
    <xsd:annotation>
      <xsd:documentation>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="generalOrdering" type="uml:GeneralOrdering">
            <xsd:annotation>
              <xsd:documentation>The general ordering relationships contained in this fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="coveredBy" ecore:ordered="false" ecore:reference="uml:Lifeline" name="covered">
          <xsd:annotation>
            <xsd:documentation>References the Lifelines that the InteractionFragment involves.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="fragment" ecore:reference="uml:Interaction" name="enclosingInteraction" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Interaction enclosing this InteractionFragment.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="fragment" ecore:reference="uml:InteractionOperand" name="enclosingOperand" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The operand enclosing this InteractionFragment (they may nest recursively)</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Lifeline">
    <xsd:annotation>
      <xsd:documentation>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="selector" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:ConnectableElement" name="represents" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the ConnectableElement within the classifier that contains the enclosing interaction.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="lifeline" ecore:reference="uml:Interaction" name="interaction" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the Interaction enclosing this Lifeline.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:PartDecomposition" name="decomposedAs" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>References the Interaction that represents the decomposition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="covered" ecore:ordered="false" ecore:reference="uml:InteractionFragment" name="coveredBy">
          <xsd:annotation>
            <xsd:documentation>References the InteractionFragments in which this Lifeline takes part.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PartDecomposition">
    <xsd:annotation>
      <xsd:documentation>A part decomposition is a description of the internal interactions of one lifeline relative to an interaction.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionUse"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InteractionUse">
    <xsd:annotation>
      <xsd:documentation>An interaction use refers to an interaction. The interaction use is a shorthand for copying the contents of the referenced interaction where the interaction use is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="actualGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>The actual gates of the InteractionUse</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="argument" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>The actual arguments of the Interaction</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Interaction" name="refersTo" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Refers to the Interaction that defines its meaning</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Gate">
    <xsd:annotation>
      <xsd:documentation>A gate is a connection point for relating a message outside an interaction fragment with a message inside the interaction fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEnd"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GeneralOrdering">
    <xsd:annotation>
      <xsd:documentation>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:opposite="toAfter" ecore:reference="uml:OccurrenceSpecification" name="before" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="toBefore" ecore:reference="uml:OccurrenceSpecification" name="after" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:attribute ecore:opposite="after" ecore:ordered="false" ecore:reference="uml:GeneralOrdering" name="toBefore">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Event" name="event" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References a specification of the occurring event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="before" ecore:ordered="false" ecore:reference="uml:GeneralOrdering" name="toAfter">
          <xsd:annotation>
            <xsd:documentation>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification
</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:InteractionFragment" name="InteractionOperand">
    <xsd:annotation>
      <xsd:documentation>An interaction operand is contained in a combined fragment. An interaction operand represents one operand of the expression given by the enclosing combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="guard" type="uml:InteractionConstraint">
            <xsd:annotation>
              <xsd:documentation>Constraint of the operand.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="enclosingOperand" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="fragment" type="uml:InteractionFragment">
            <xsd:annotation>
              <xsd:documentation>The fragments of the operand.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InteractionConstraint">
    <xsd:annotation>
      <xsd:documentation>An interaction constraint is a Boolean expression that guards an operand in a combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Constraint">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="minint" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The minimum number of iterations of a loop</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="maxint" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>The maximum number of iterations of a loop</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:attribute ecore:reference="uml:OccurrenceSpecification" name="start" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the start of the Action or Behavior</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:OccurrenceSpecification" name="finish" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="StateInvariant">
    <xsd:annotation>
      <xsd:documentation>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="invariant" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>A Constraint that should hold at runtime for this StateInvariant</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ActionExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>An action execution specification is a kind of execution specification representing the execution of an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:attribute ecore:reference="uml:Action" name="action" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Action whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BehaviorExecutionSpecification">
    <xsd:annotation>
      <xsd:documentation>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ExecutionSpecification">
        <xsd:attribute ecore:reference="uml:Behavior" name="behavior" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Behavior whose execution is occurring.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ExecutionEvent">
    <xsd:annotation>
      <xsd:documentation>An execution event models the start or finish of an execution occurrence.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CreationEvent">
    <xsd:annotation>
      <xsd:documentation>A creation event models the creation of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DestructionEvent">
    <xsd:annotation>
      <xsd:documentation>A destruction event models the destruction of an object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SendOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A send operation event models the invocation of an operation call.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Operation" name="operation" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="MessageEvent">
    <xsd:annotation>
      <xsd:documentation>A message event specifies the receipt by an object of either a call or a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SendSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A send signal event models the sending of a signal.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:MessageEnd" name="MessageOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ExecutionOccurrenceSpecification">
    <xsd:annotation>
      <xsd:documentation>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:OccurrenceSpecification">
        <xsd:attribute ecore:reference="uml:ExecutionSpecification" name="execution" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>References the execution specification describing the execution that is started or finished at this execution event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReceiveOperationEvent">
    <xsd:annotation>
      <xsd:documentation>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Operation" name="operation" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The operation associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReceiveSignalEvent">
    <xsd:annotation>
      <xsd:documentation>A receive signal event specifies the event of receiving a signal by the target entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The signal associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Actor">
    <xsd:annotation>
      <xsd:documentation>An actor specifies a role played by a user or any other system that interacts with the subject.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:BehavioredClassifier"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CallEvent">
    <xsd:annotation>
      <xsd:documentation>A call event models the receipt by an object of a message invoking a call of an operation.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Operation" name="operation" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Designates the operation whose invocation raised the call event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ChangeEvent">
    <xsd:annotation>
      <xsd:documentation>A change event models a change in the system configuration that makes a condition true.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="changeExpression" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SignalEvent">
    <xsd:annotation>
      <xsd:documentation>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent">
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The specific signal that is associated with this event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AnyReceiveEvent">
    <xsd:annotation>
      <xsd:documentation>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:MessageEvent"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ForkNode">
    <xsd:annotation>
      <xsd:documentation>A fork node is a control node that splits a flow into multiple concurrent flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FlowFinalNode">
    <xsd:annotation>
      <xsd:documentation>A flow final node is a final node that terminates a flow.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:FinalNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="FinalNode">
    <xsd:annotation>
      <xsd:documentation>A final node is an abstract control node at which a flow in an activity stops.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CentralBufferNode">
    <xsd:annotation>
      <xsd:documentation>A central buffer node is an object node for managing flows from multiple sources and destinations.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ObjectNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="MergeNode">
    <xsd:annotation>
      <xsd:documentation>A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DecisionNode">
    <xsd:annotation>
      <xsd:documentation>A decision node is a control node that chooses between outgoing flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode">
        <xsd:attribute ecore:reference="uml:Behavior" name="decisionInput" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Provides input to guard specifications on edges outgoing from the decision node.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ActivityFinalNode">
    <xsd:annotation>
      <xsd:documentation>An activity final node is a final node that stops all flows in an activity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:FinalNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="JoinNode">
    <xsd:annotation>
      <xsd:documentation>A join node is a control node that synchronizes multiple flows.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ControlNode"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Component">
    <xsd:annotation>
      <xsd:documentation>A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:sequence>
          <xsd:element ecore:opposite="abstraction" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="realization" type="uml:ComponentRealization">
            <xsd:annotation>
              <xsd:documentation>The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="isIndirectlyInstantiated" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at runtime (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute, e.g. &lt;&lt;specification&gt;&gt;, &lt;&lt;focus&gt;&gt;, &lt;&lt;subsystem&gt;&gt;.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Interface" ecore:transient="true" ecore:volatile="true" name="required">
          <xsd:annotation>
            <xsd:documentation>The interfaces that the component requires from other components in its environment in order to be able to offer its full set of provided functionality. These interfaces may be Used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:ordered="false" ecore:reference="uml:Interface" ecore:transient="true" ecore:volatile="true" name="provided">
          <xsd:annotation>
            <xsd:documentation>The interfaces that the component exposes to its environment. These interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ComponentRealization">
    <xsd:annotation>
      <xsd:documentation>The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Realization">
        <xsd:attribute ecore:reference="uml:Classifier" name="realizingClassifier" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>A classifier that is involved in the implementation of the Component that owns this ComponentRealization.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="realization" ecore:reference="uml:Component" name="abstraction" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Manifestation">
    <xsd:annotation>
      <xsd:documentation>A manifestation is the concrete physical rendering of one or more model elements by an artifact.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Abstraction">
        <xsd:attribute ecore:reference="uml:PackageableElement" name="utilizedElement" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The model element that is utilized in the manifestation in an Artifact.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:DeploymentTarget" name="Node">
    <xsd:annotation>
      <xsd:documentation>A node is computational resource upon which artifacts may be deployed for execution.
Nodes can be interconnected through communication paths to define network structures.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Class">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="nestedNode" type="uml:Node">
            <xsd:annotation>
              <xsd:documentation>The Nodes that are defined (nested) within the Node.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Device">
    <xsd:annotation>
      <xsd:documentation>A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Node"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ExecutionEnvironment">
    <xsd:annotation>
      <xsd:documentation>An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Node"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CommunicationPath">
    <xsd:annotation>
      <xsd:documentation>A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Association"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:DeployedArtifact" name="Artifact">
    <xsd:annotation>
      <xsd:documentation>An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
An artifact is the source of a deployment to a node.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Classifier">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="nestedArtifact" type="uml:Artifact">
            <xsd:annotation>
              <xsd:documentation>The Artifacts that are defined (nested) within the Artifact.
The association is a specialization of the ownedMember association from Namespace to NamedElement.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="manifestation" type="uml:Manifestation">
            <xsd:annotation>
              <xsd:documentation>The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedOperation" type="uml:Operation">
            <xsd:annotation>
              <xsd:documentation>The Operations defined for the Artifact. The association is a specialization of the ownedMember association.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="ownedAttribute" type="uml:Property">
            <xsd:annotation>
              <xsd:documentation>The attributes or association ends defined for the Artifact.
The association is a specialization of the ownedMember association.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:unsettable="true" name="fileName" type="uml:String">
          <xsd:annotation>
            <xsd:documentation>A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CombinedFragment">
    <xsd:annotation>
      <xsd:documentation>A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" name="operand" type="uml:InteractionOperand">
            <xsd:annotation>
              <xsd:documentation>The set of operands of the combined fragment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="cfragmentGate" type="uml:Gate">
            <xsd:annotation>
              <xsd:documentation>Specifies the gates that form the interface between this CombinedFragment and its surroundings</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="seq" ecore:unsettable="false" name="interactionOperator" type="uml:InteractionOperatorKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies the operation which defines the semantics of this combination of InteractionFragments.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="InteractionOperatorKind">
    <xsd:annotation>
      <xsd:documentation>InteractionOperatorKind is an enumeration designating the different kinds of operators of combined fragments. The interaction operand defines the type of operator of a combined fragment.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="seq"/>
      <xsd:enumeration value="alt"/>
      <xsd:enumeration value="opt"/>
      <xsd:enumeration value="break"/>
      <xsd:enumeration value="par"/>
      <xsd:enumeration value="strict"/>
      <xsd:enumeration value="loop"/>
      <xsd:enumeration value="critical"/>
      <xsd:enumeration value="neg"/>
      <xsd:enumeration value="assert"/>
      <xsd:enumeration value="ignore"/>
      <xsd:enumeration value="consider"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Continuation">
    <xsd:annotation>
      <xsd:documentation>A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InteractionFragment">
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="setting" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConsiderIgnoreFragment">
    <xsd:annotation>
      <xsd:documentation>A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:CombinedFragment">
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:NamedElement" name="message">
          <xsd:annotation>
            <xsd:documentation>The set of messages that apply to this fragment</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CreateObjectAction">
    <xsd:annotation>
      <xsd:documentation>A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Classifier" name="classifier" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Classifier to be instantiated.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DestroyObjectAction">
    <xsd:annotation>
      <xsd:documentation>A destroy object action is an action that destroys objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The input pin providing the object to be destroyed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDestroyLinks" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether links in which the object participates are destroyed along with the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDestroyOwnedObjects" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether objects owned by the object are destroyed along with the object.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TestIdentityAction">
    <xsd:annotation>
      <xsd:documentation>A test identity action is an action that tests if two values are identical objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="first" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the pin on which an object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" name="second" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the pin on which an object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Tells whether the two input objects are identical.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadSelfAction">
    <xsd:annotation>
      <xsd:documentation>A read self action is an action that retrieves the host object of an action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the hosting object is placed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="StructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>StructuralFeatureAction is an abstract class for all structural feature actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which the object whose structural feature is to be read or written is obtained.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:StructuralFeature" name="structuralFeature" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Structural feature to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A read structural feature action is a structural feature action that retrieves the values of a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="WriteStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>WriteStructuralFeatureAction is an abstract class for structural feature actions that change structural feature values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Value to be added or removed from the structural feature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ClearStructuralFeatureAction">
    <xsd:annotation>
      <xsd:documentation>A clear structural feature action is a structural feature action that removes all values of a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuralFeatureAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RemoveStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove structural feature value action is a write structural feature action that removes values from structural features.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteStructuralFeatureAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="removeAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies the position of an existing value to remove in ordered nonunique structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isRemoveDuplicates" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to remove duplicates of the value in nonunique structural features.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AddStructuralFeatureValueAction">
    <xsd:annotation>
      <xsd:documentation>An add structural feature value action is a write structural feature action for adding values to a structural feature.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteStructuralFeatureAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="insertAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReplaceAll" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether existing values of the structural feature of the object should be removed before adding the new value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="LinkAction">
    <xsd:annotation>
      <xsd:documentation>LinkAction is an abstract class for all link actions that identify their links by the objects at the ends of the links and by the qualifiers at ends of the links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="2" name="endData" type="uml:LinkEndData">
            <xsd:annotation>
              <xsd:documentation>Data identifying one end of a link by the objects on its ends and qualifiers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" name="inputValue" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Pins taking end objects and qualifier values as input.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LinkEndData">
    <xsd:annotation>
      <xsd:documentation>A link end data is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of a link action. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around a link end data. Each association end is identified separately with an instance of the LinkEndData class.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:reference="uml:InputPin" name="value" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Property" name="end" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Association end for which this link-end data specifies values.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadLinkAction">
    <xsd:annotation>
      <xsd:documentation>A read link action is a link action that navigates across associations to retrieve objects on one end.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>The pin on which are put the objects participating in the association at the end not specified by the inputs.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LinkEndCreationData">
    <xsd:annotation>
      <xsd:documentation>A link end creation data is not an action. It is an element that identifies links. It identifies one end of a link to be created by a create link action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkEndData">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReplaceAll" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:InputPin" name="insertAt" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CreateLinkAction">
    <xsd:annotation>
      <xsd:documentation>A create link action is a write link action for creating links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteLinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="WriteLinkAction">
    <xsd:annotation>
      <xsd:documentation>WriteLinkAction is an abstract class for link actions that create and destroy links.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DestroyLinkAction">
    <xsd:annotation>
      <xsd:documentation>A destroy link action is a write link action that destroys links and link objects.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteLinkAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LinkEndDestructionData">
    <xsd:annotation>
      <xsd:documentation>A link end destruction data is not an action. It is an element that identifies links. It identifies one end of a link to be destroyed by destroy link action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:LinkEndData">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDestroyDuplicates" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to destroy duplicates of the value in nonunique association ends.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:InputPin" name="destroyAt" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ClearAssociationAction">
    <xsd:annotation>
      <xsd:documentation>A clear association action is an action that destroys all links of an association in which a particular object participates.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="object" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the input pin from which is obtained the object whose participation in the association is to be cleared.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="uml:Association" name="association" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Association to be cleared.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BroadcastSignalAction">
    <xsd:annotation>
      <xsd:documentation>A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:attribute ecore:reference="uml:Signal" name="signal" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The specification of signal object transmitted to the target objects.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SendObjectAction">
    <xsd:annotation>
      <xsd:documentation>A send object action is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InvocationAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="target" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The target object to which the object is sent.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" name="request" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ValueSpecificationAction">
    <xsd:annotation>
      <xsd:documentation>A value specification action is an action that evaluates a value specification.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="value" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Value specification to be evaluated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TimeExpression">
    <xsd:annotation>
      <xsd:documentation>A time expression defines a value specification that represents a time value.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:attribute ecore:reference="uml:ValueSpecification" name="expr" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The value of the time expression.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Observation" name="observation">
          <xsd:annotation>
            <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Observation">
    <xsd:annotation>
      <xsd:documentation>Observation is a superclass of TimeObservation and DurationObservation in order for TimeExpression and Duration to refer to either in a simple way.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:PackageableElement"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Duration">
    <xsd:annotation>
      <xsd:documentation>Duration defines a value specification that specifies the temporal distance between two time instants.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:attribute ecore:reference="uml:ValueSpecification" name="expr" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The value of the Duration.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Observation" name="observation">
          <xsd:annotation>
            <xsd:documentation>Refers to the time and duration observations that are involved in expr.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DurationInterval">
    <xsd:annotation>
      <xsd:documentation>A duration interval defines the range between two durations.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Interval"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Interval">
    <xsd:annotation>
      <xsd:documentation>An interval defines the range between two value specifications.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:ValueSpecification">
        <xsd:attribute ecore:reference="uml:ValueSpecification" name="min" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Refers to the ValueSpecification denoting the minimum value of the range.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:ValueSpecification" name="max" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Refers to the ValueSpecification denoting the maximum value of the range.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TimeConstraint">
    <xsd:annotation>
      <xsd:documentation>A time constraint is a constraint that refers to a time interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:IntervalConstraint">
        <xsd:attribute ecore:unsettable="false" name="firstEvent" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>The value of firstEvent is related to constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within constrainedElement.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IntervalConstraint">
    <xsd:annotation>
      <xsd:documentation>An interval constraint is a constraint that refers to an interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Constraint"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TimeInterval">
    <xsd:annotation>
      <xsd:documentation>A time interval defines the range between two time expressions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Interval"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DurationConstraint">
    <xsd:annotation>
      <xsd:documentation>A duration constraint is a constraint that refers to a duration interval.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:IntervalConstraint">
        <xsd:sequence>
          <xsd:element default="true" ecore:ordered="false" ecore:unique="true" maxOccurs="2" minOccurs="0" name="firstEvent" type="uml:Boolean">
            <xsd:annotation>
              <xsd:documentation>The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]. Default value is true applied when constrainedElement[i] refers an element that represents only one time instant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TimeObservation">
    <xsd:annotation>
      <xsd:documentation>A time observation is a reference to a time instant during an execution. It points out the element in the model to observe and whether the observation is when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Observation">
        <xsd:attribute ecore:reference="uml:NamedElement" name="event" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="true" ecore:unsettable="false" name="firstEvent" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>The value of firstEvent is related to event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters event. If firstEvent is false, then the corresponding observation event is the time instant the execution exits event.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DurationObservation">
    <xsd:annotation>
      <xsd:documentation>A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Observation">
        <xsd:sequence>
          <xsd:element default="true" ecore:ordered="false" ecore:unique="true" maxOccurs="2" minOccurs="0" name="firstEvent" type="uml:Boolean">
            <xsd:annotation>
              <xsd:documentation>The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]. Default value is true applied when event[i] refers an element that represents only one time instant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:NamedElement" name="event" use="required">
          <xsd:annotation>
            <xsd:documentation>The observation is determined by the entering or exiting of the event element during execution.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:restriction>
              <xsd:simpleType>
                <xsd:list itemType="xsd:anyURI"/>
              </xsd:simpleType>
              <xsd:maxLength value="2"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="StateMachine">
    <xsd:annotation>
      <xsd:documentation>State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Behavior">
        <xsd:sequence>
          <xsd:element ecore:opposite="stateMachine" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" name="region" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The regions owned directly by the state machine.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="stateMachine" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="connectionPoint" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="submachine" ecore:ordered="false" ecore:reference="uml:State" name="submachineState">
          <xsd:annotation>
            <xsd:documentation>References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:StateMachine" name="extendedStateMachine">
          <xsd:annotation>
            <xsd:documentation>The state machines of which this is an extension.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:RedefinableElement" name="Region">
    <xsd:annotation>
      <xsd:documentation>A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:opposite="container" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="subvertex" type="uml:Vertex">
            <xsd:annotation>
              <xsd:documentation>The set of vertices that are owned by this region.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="container" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="transition" type="uml:Transition">
            <xsd:annotation>
              <xsd:documentation>The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the source state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:opposite="region" ecore:reference="uml:State" name="state" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Region" name="extendedRegion" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The region of which this region is an extension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="region" ecore:reference="uml:StateMachine" name="stateMachine" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="Vertex">
    <xsd:annotation>
      <xsd:documentation>A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:NamedElement">
        <xsd:attribute ecore:opposite="source" ecore:ordered="false" ecore:reference="uml:Transition" name="outgoing">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions departing from this vertex.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="target" ecore:ordered="false" ecore:reference="uml:Transition" name="incoming">
          <xsd:annotation>
            <xsd:documentation>Specifies the transitions entering this vertex.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="subvertex" ecore:reference="uml:Region" name="container" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The region that contains this vertex.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType ecore:implements="uml:RedefinableElement" name="Transition">
    <xsd:annotation>
      <xsd:documentation>A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="effect" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>Specifies an optional behavior to be performed when the transition fires.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="trigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>Specifies the triggers that may fire the transition.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="external" ecore:unsettable="false" name="kind" type="uml:TransitionKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Indicates  the precise type of the transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="transition" ecore:reference="uml:Region" name="container" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Designates the region that owns this transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="incoming" ecore:reference="uml:Vertex" name="target" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Designates the target vertex that is reached when the transition is taken.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Transition" name="redefinedTransition" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The transition that is redefined by this transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:Constraint" name="guard" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="outgoing" ecore:reference="uml:Vertex" name="source" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Designates the originating vertex (state or pseudostate) of the transition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType ecore:constraints="state_is_local state_is_external" name="TransitionKind">
    <xsd:annotation>
      <xsd:documentation>TransitionKind is an enumeration type.
kind=#local implies owner.source.isComposite
kind=#external implies owner.source.isComposite</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="internal"/>
      <xsd:enumeration value="local"/>
      <xsd:enumeration value="external"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType ecore:implements="uml:RedefinableElement uml:Vertex" name="State">
    <xsd:annotation>
      <xsd:documentation>A state models a situation during which some (usually implicit) invariant condition holds.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Namespace">
        <xsd:sequence>
          <xsd:element ecore:opposite="state" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="connection" type="uml:ConnectionPointReference">
            <xsd:annotation>
              <xsd:documentation>The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="state" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="connectionPoint" type="uml:Pseudostate">
            <xsd:annotation>
              <xsd:documentation>The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="stateInvariant" type="uml:Constraint">
            <xsd:annotation>
              <xsd:documentation>Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="entry" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="exit" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="doActivity" type="uml:Behavior">
            <xsd:annotation>
              <xsd:documentation>An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="deferrableTrigger" type="uml:Trigger">
            <xsd:annotation>
              <xsd:documentation>A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:opposite="state" ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="region" type="uml:Region">
            <xsd:annotation>
              <xsd:documentation>The regions owned directly by the state.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isComposite" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one region.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isOrthogonal" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains two or more regions.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isSimple" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer to any submachine state machine.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:changeable="false" ecore:derived="true" ecore:lowerBound="1" ecore:transient="true" ecore:unsettable="false" ecore:volatile="true" name="isSubmachineState" type="uml:Boolean">
          <xsd:annotation>
            <xsd:documentation>A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine (submachine).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="submachineState" ecore:reference="uml:StateMachine" name="submachine" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The state machine that is to be inserted in place of the (submachine) state.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:State" name="redefinedState" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The state of which this state is a redefinition.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConnectionPointReference">
    <xsd:annotation>
      <xsd:documentation>A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Vertex">
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Pseudostate" name="entry">
          <xsd:annotation>
            <xsd:documentation>The entryPoint kind pseudo states corresponding to this connection point.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:Pseudostate" name="exit">
          <xsd:annotation>
            <xsd:documentation>The exitPoints kind pseudo states corresponding to this connection point.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="connection" ecore:reference="uml:State" name="state" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The State in which the connection point refreshens are defined.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Pseudostate">
    <xsd:annotation>
      <xsd:documentation>A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Vertex">
        <xsd:attribute ecore:default="initial" ecore:unsettable="false" name="kind" type="uml:PseudostateKind" use="required">
          <xsd:annotation>
            <xsd:documentation>Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="connectionPoint" ecore:reference="uml:StateMachine" name="stateMachine" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="connectionPoint" ecore:reference="uml:State" name="state" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The State that owns this pseudostate and in which it appears.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="PseudostateKind">
    <xsd:annotation>
      <xsd:documentation>PseudostateKind is an enumeration type.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="initial"/>
      <xsd:enumeration value="deepHistory"/>
      <xsd:enumeration value="shallowHistory"/>
      <xsd:enumeration value="join"/>
      <xsd:enumeration value="fork"/>
      <xsd:enumeration value="junction"/>
      <xsd:enumeration value="choice"/>
      <xsd:enumeration value="entryPoint"/>
      <xsd:enumeration value="exitPoint"/>
      <xsd:enumeration value="terminate"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="FinalState">
    <xsd:annotation>
      <xsd:documentation>A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:State"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TimeEvent">
    <xsd:annotation>
      <xsd:documentation>A time event specifies a point in time. At the specified time, the event occurs.
A time event can be defined relative to entering the current state of the executing state machine.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Event">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="when" type="uml:ValueSpecification">
            <xsd:annotation>
              <xsd:documentation>Specifies the corresponding time deadline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isRelative" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether it is relative or absolute time.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConditionalNode">
    <xsd:annotation>
      <xsd:documentation>A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:sequence>
          <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" name="clause" type="uml:Clause">
            <xsd:annotation>
              <xsd:documentation>Set of clauses composing the conditional.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isDeterminate" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the modeler asserts that at most one test will succeed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isAssured" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the modeler asserts that at least one test will succeed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Clause">
    <xsd:annotation>
      <xsd:documentation>A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Element">
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ExecutableNode" name="test">
          <xsd:annotation>
            <xsd:documentation>A nested activity fragment with a designated output pin that specifies the result of the test.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ExecutableNode" name="body">
          <xsd:annotation>
            <xsd:documentation>A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="successorClause" ecore:ordered="false" ecore:reference="uml:Clause" name="predecessorClause">
          <xsd:annotation>
            <xsd:documentation>A set of clauses whose tests must all evaluate false before the current clause can be tested.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:opposite="predecessorClause" ecore:ordered="false" ecore:reference="uml:Clause" name="successorClause">
          <xsd:annotation>
            <xsd:documentation>A set of clauses which may not be tested unless the current clause tests false.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:OutputPin" name="decider" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LoopNode">
    <xsd:annotation>
      <xsd:documentation>A loop node is a structured activity node that represents a loop with setup, test, and body sections.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isTestedFirst" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>If true, the test is performed before the first execution of the body.
If false, the body is executed once before the test is performed.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ExecutableNode" name="bodyPart">
          <xsd:annotation>
            <xsd:documentation>The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ExecutableNode" name="setupPart">
          <xsd:annotation>
            <xsd:documentation>The set of nodes and edges that initialize values or perform other setup computations for the loop.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute ecore:reference="uml:OutputPin" name="decider" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:ordered="false" ecore:reference="uml:ExecutableNode" name="test">
          <xsd:annotation>
            <xsd:documentation>The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SequenceNode">
    <xsd:annotation>
      <xsd:documentation>A sequence node is a structured activity node that executes its actions in order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:StructuredActivityNode">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="executableNode" type="uml:ExecutableNode">
            <xsd:annotation>
              <xsd:documentation>An ordered set of executable nodes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="VariableAction">
    <xsd:annotation>
      <xsd:documentation>VariableAction is an abstract class for actions that operate on a statically specified variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:attribute ecore:reference="uml:Variable" name="variable" type="xsd:anyURI" use="required">
          <xsd:annotation>
            <xsd:documentation>Variable to be read.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadVariableAction">
    <xsd:annotation>
      <xsd:documentation>A read variable action is a variable action that retrieves the values of a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="result" type="uml:OutputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the output pin on which the result is put.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="WriteVariableAction">
    <xsd:annotation>
      <xsd:documentation>WriteVariableAction is an abstract class for variable actions that change variable values.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="value" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Value to be added or removed from the variable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ClearVariableAction">
    <xsd:annotation>
      <xsd:documentation>A clear variable action is a variable action that removes all values of a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:VariableAction"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AddVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>An add variable value action is a write variable action for adding values to a variable.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteVariableAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="insertAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isReplaceAll" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether existing values of the variable should be removed before adding the new value.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RemoveVariableValueAction">
    <xsd:annotation>
      <xsd:documentation>A remove variable value action is a write variable action that removes values from variables.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:WriteVariableAction">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="removeAt" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>Specifies the position of an existing value to remove in ordered nonunique variables. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:default="false" ecore:unsettable="false" name="isRemoveDuplicates" type="uml:Boolean" use="required">
          <xsd:annotation>
            <xsd:documentation>Specifies whether to remove duplicates of the value in nonunique variables.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RaiseExceptionAction">
    <xsd:annotation>
      <xsd:documentation>A raise exception action is an action that causes an exception to occur. The input value becomes the exception object.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:Action">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="exception" type="uml:InputPin">
            <xsd:annotation>
              <xsd:documentation>An input pin whose value becomes an exception object.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ActionInputPin">
    <xsd:annotation>
      <xsd:documentation>An action input pin is a kind of pin that executes an action to determine the values to input to another.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="uml:InputPin">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" name="fromAction" type="uml:Action">
            <xsd:annotation>
              <xsd:documentation>The action used to provide values.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
